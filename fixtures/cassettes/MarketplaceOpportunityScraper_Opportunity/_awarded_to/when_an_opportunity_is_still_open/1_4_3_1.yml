---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9482
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELwQ.OVKQwSuuSanylvprthJrjgGNXxw
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '46993'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:58:09 GMT
      Dm-Request-Id:
      - f51e8c90d160a2ac
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:58:09 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELwQ.OVKQwSuuSanylvprthJrjgGNXxw;
        Expires=Tue, 10-Dec-2019 11:58:09 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - f51e8c90d160a2ac
      X-B3-Traceid:
      - f51e8c90d160a2ac
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - ee9bafd2-3b58-44b3-4425-85cb70efb63a
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7b0f68e9739bedcf2b240d30dd13a85b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - J4ixsqzos1SJufOeRCZm_jtGoJsMfkzyGOhy3uQ2YrV-YJziQ2Wufg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:58:09 GMT
recorded_with: VCR 4.0.0
