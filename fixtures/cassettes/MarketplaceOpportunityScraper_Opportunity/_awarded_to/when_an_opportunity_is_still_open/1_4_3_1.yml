---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/13198
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '40249'
      Connection:
      - keep-alive
      Date:
      - Wed, 30 Sep 2020 10:28:17 GMT
      Dm-Request-Id:
      - eb1d3bf6c7ae561e
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 30-Sep-2021 10:28:17 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.X3RdwQ.zqsONnHE7IKHvddDXFleKmqEQ-8;
        Expires=Wed, 30-Sep-2020 11:28:17 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - eb1d3bf6c7ae561e
      X-B3-Traceid:
      - eb1d3bf6c7ae561e
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - a3defa9e-46cf-4f3e-45af-65af14f12f69
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 8759b407cd243e2e2c573d5db804d721.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR61-C1
      X-Amz-Cf-Id:
      - Oc3l3AMP3M4Q-cw9y-iElgGHZ2y50rF0IEqUhElYPVVgVfKHog7-3Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Wed, 30 Sep 2020 10:28:17 GMT
recorded_with: VCR 4.0.0
