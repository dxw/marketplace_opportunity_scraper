---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9482
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun8Ag.IV7rzoSYEB0lQNoHpg6hMwQQkO0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '46185'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:18:26 GMT
      Dm-Request-Id:
      - a3aafd9573456c28
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:18:26 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun8Ag.IV7rzoSYEB0lQNoHpg6hMwQQkO0;
        Expires=Wed, 17-Jun-2020 12:18:26 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - a3aafd9573456c28
      X-B3-Traceid:
      - a3aafd9573456c28
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 65c41d1a-de17-4c6a-774f-4848cc71a027
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 368b317059d70e3ee45b9259c7201782.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR61-C1
      X-Amz-Cf-Id:
      - gjLxiW30vmkB-O7JXugC66fBWBwtVgCXxhmsdZo2luAutChE685HNg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:18:26 GMT
recorded_with: VCR 4.0.0
