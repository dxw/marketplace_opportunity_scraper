---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9142
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELvQ.vFSLtXBLRGuQ94Zumyfo5Ut3Vos
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '42626'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:58:06 GMT
      Dm-Request-Id:
      - 948d0f00c9070617
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:58:06 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELvg.7IyDXss2_Q_pEXRTatwSiwFFJ5M;
        Expires=Tue, 10-Dec-2019 11:58:06 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 948d0f00c9070617
      X-B3-Traceid:
      - 948d0f00c9070617
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 48b75f07-1ca1-48cc-559a-eae061239b6e
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 d9a1c3f4f9951c6a6e85d635c29e3e2a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - aY_pZtKAk_OxdfEj3NfOVGhE0V5fgev4BZ9QpYIuedTH-q-c-TUd3g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:58:06 GMT
recorded_with: VCR 4.0.0
