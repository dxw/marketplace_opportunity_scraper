---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities?lot=digital-outcomes&statusOpenClosed=open
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELiw.nT59jlQx23nj4rRYiB4P-TMxX3s
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '50614'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:15 GMT
      Dm-Request-Id:
      - f7b24dda9ffe52db
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:15 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELiw.nT59jlQx23nj4rRYiB4P-TMxX3s;
        Expires=Tue, 10-Dec-2019 11:57:15 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - f7b24dda9ffe52db
      X-B3-Traceid:
      - f7b24dda9ffe52db
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 6888c10b-5e6f-4ce2-6c2d-c060e1e38268
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f715245c12dc1f6bdadc387db50e442c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - dYTWxM5DBn_yyHzpqFcPKJ9yIDw_Feta28U1iSrPFlme75OMt2HFeA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:15 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11371
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELiw.nT59jlQx23nj4rRYiB4P-TMxX3s
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39203'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:16 GMT
      Dm-Request-Id:
      - 356bce7969de55f8
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:16 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjA.n8PRC-TA6C0BGRBq5eLMOtDqZV4;
        Expires=Tue, 10-Dec-2019 11:57:16 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 356bce7969de55f8
      X-B3-Traceid:
      - 356bce7969de55f8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 535acaff-3c7d-4a04-625a-9dece9a8be07
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f715245c12dc1f6bdadc387db50e442c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - s5bPcGeCjLs8z1s-ITEvNCPXui6q5nrO2a9Ksl3KZsVyfl4BfGA_dg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:16 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11300
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjA.n8PRC-TA6C0BGRBq5eLMOtDqZV4
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29152'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:16 GMT
      Dm-Request-Id:
      - bbbb5f41962a4a3e
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:16 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjA.n8PRC-TA6C0BGRBq5eLMOtDqZV4;
        Expires=Tue, 10-Dec-2019 11:57:16 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - bbbb5f41962a4a3e
      X-B3-Traceid:
      - bbbb5f41962a4a3e
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 3fdb30af-c299-4075-4ac0-3e9dc8e5251b
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 bd3391cd9fd3f009f600e9425bfccea3.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - CKz-F2tAOfH-6utWNxyBwKC-vSq1eGfgHKgnKIXA03N8H1bRwNu6KA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:16 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11366
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjA.n8PRC-TA6C0BGRBq5eLMOtDqZV4
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31468'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:16 GMT
      Dm-Request-Id:
      - 9becac3f8f7b26cb
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:16 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjA.n8PRC-TA6C0BGRBq5eLMOtDqZV4;
        Expires=Tue, 10-Dec-2019 11:57:16 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 9becac3f8f7b26cb
      X-B3-Traceid:
      - 9becac3f8f7b26cb
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - f9319706-2506-4afa-6e63-89b094237809
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 85b9b6c170ed4eb5bc514443bb4ade55.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - nbTGDFlZ3EOsvVeVDhOtqcz0YY09lnfyWTxAppGvngHbn1rv2ejZiw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPCEtLVtpZiBsdCBJRSA5XT48aHRtbCBjbGFzcz0ibHRlLWllOCIgbGFuZz0iZW4iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGh0bWwgbGFuZz0iZW4iPjwhLS08IVtlbmRpZl0tLT4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPHRpdGxlPgogIE1hcHBpbmcgdG9vbCBmb3IgcGxhY2UtYmFzZWQgdHJhbnNwb3J0IGRhdGEg4oCTIERpc2NvdmVyeSBQaGFzZSAtIERpZ2l0YWwgTWFya2V0cGxhY2UKPC90aXRsZT4KCiAgICA8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCEtLTwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA2XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2dvdnVrLXRlbXBsYXRlLWllNi5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIElFIDddPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtaWU3LmNzcz8wLjE5LjIiIG1lZGlhPSJzY3JlZW4iIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgSUUgOF0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1pZTguY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhW2VuZGlmXS0tPgogICAgPGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1wcmludC5jc3M/MC4xOS4yIiBtZWRpYT0icHJpbnQiIHJlbD0ic3R5bGVzaGVldCIgLz4KCiAgICA8IS0tW2lmIElFIDhdPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZm9udHMtaWU4LmNzcz8wLjE5LjIiIG1lZGlhPSJhbGwiIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgZ3RlIElFIDldPjwhLS0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9mb250cy5jc3M/MC4xOS4yIiBtZWRpYT0iYWxsIiByZWw9InN0eWxlc2hlZXQiIC8+PCEtLTwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdCBJRSA5XT48c2NyaXB0IHNyYz0iL3N0YXRpYy9qYXZhc2NyaXB0cy9pZS5qcz8wLjE5LjIiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgoKICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZmF2aWNvbi5pY28/MC4xOS4yIiB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICA8bGluayByZWw9Im1hc2staWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292LnVrX2xvZ290eXBlX2Nyb3duLnN2Zz8wLjE5LjIiIGNvbG9yPSIjMGIwYzBjIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2FwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2FwcGxlLXRvdWNoLWljb24tMTIweDEyMC5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9Ijc2eDc2IiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTc2eDc2LnBuZz8wLjE5LjIiPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTYweDYwLnBuZz8wLjE5LjIiPgoKICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Ii9zdGF0aWMvaW1hZ2VzL29wZW5ncmFwaC1pbWFnZS5wbmc/MC4xOS4yIj4KCiAgICAKICAKCgoKCgoKCiAgPG1ldGEgbmFtZT0iZ2FfY3VzdG9tRGltZW5zaW9uIiBkYXRhLWlkPSIxMiIgZGF0YS12YWx1ZT0iVXNlciByZXNlYXJjaCBiYW5uZXIiPgoKCgoKCiAgPCEtLVtpZiBndCBJRSA4XT48IS0tPgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJzY3JlZW4iIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24uY3NzPzBmOWJhNTIzNTYzZDUyYzMzNmQxZmUyOWU3OTBjM2U1IiAvPgo8IS0tPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+CiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9InNjcmVlbiIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi1pZTcuY3NzPzM4MzhlNzVjNmIxODU5NDhlNzM5NDdhOWJjMmU1NjEyIiAvPgo8IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4KICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ic2NyZWVuIiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLWllOC5jc3M/YTM3M2FhMWI3MzlmNTM4NmQ3YTkwM2VkNjg2MmQ2YzgiIC8+CjwhW2VuZGlmXS0tPgogIAogICAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSJUS0dTR1puZkhweDEtbEtPdGhJMTdBTnR3azdmejNGNFNicjc3STBwcE8wIiAvPgoKCiAgPC9oZWFkPgoKICA8Ym9keSBjbGFzcz0iIj4KICAgIDxzY3JpcHQ+ZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAoKGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lKSA/IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lICsgJyBqcy1lbmFibGVkJyA6ICdqcy1lbmFibGVkJyk7PC9zY3JpcHQ+CgogICAgCgogICAgPGRpdiBpZD0ic2tpcGxpbmstY29udGFpbmVyIj4KICAgICAgPGRpdj4KICAgICAgICA8YSBocmVmPSIjY29udGVudCIgY2xhc3M9InNraXBsaW5rIj5Ta2lwIHRvIG1haW4gY29udGVudDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGlkPSJnbG9iYWwtY29va2llLW1lc3NhZ2UiPgogICAgICAKICAgICAgICAKICA8cD5HT1YuVUsgdXNlcyBjb29raWVzIHRvIG1ha2UgdGhlIHNpdGUgc2ltcGxlci4gPGEgaHJlZj0iL2Nvb2tpZXMiPkZpbmQgb3V0IG1vcmUgYWJvdXQgY29va2llczwvYT48L3A+CgoKICAgICAgCiAgICA8L2Rpdj4KCiAgICAKICAgIDxoZWFkZXIgcm9sZT0iYmFubmVyIiBpZD0iZ2xvYmFsLWhlYWRlciIgY2xhc3M9IndpdGgtcHJvcG9zaXRpb24iPgogICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWdsb2JhbCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItbG9nbyI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ayIgdGl0bGU9IkdvIHRvIHRoZSBHT1YuVUsgaG9tZXBhZ2UiIGlkPSJsb2dvIiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zdGF0aWMvaW1hZ2VzL2dvdi51a19sb2dvdHlwZV9jcm93bl9pbnZlcnRfdHJhbnMucG5nPzAuMTkuMiIgd2lkdGg9IjM2IiBoZWlnaHQ9IjMyIiBhbHQ9IiI+IEdPVi5VSwogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogIDxkaXYgY2xhc3M9ImhlYWRlci10aXRsZSI+CiAgICA8YSBocmVmPSIvIj5EaWdpdGFsIE1hcmtldHBsYWNlPC9hPgogICAgPHN0cm9uZyBjbGFzcz0icGhhc2UtdGFnIj5CRVRBPC9zdHJvbmc+CjwvZGl2PgoKICAgICAgICA8L2Rpdj4KICAgICAgICAKICA8ZGl2IGNsYXNzPSJoZWFkZXItcHJvcG9zaXRpb24iPgogIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgPGEgaHJlZj0iI3Byb3Bvc2l0aW9uLWxpbmtzIiBjbGFzcz0ianMtaGVhZGVyLXRvZ2dsZSBtZW51Ij5NZW51PC9hPgogICAgPG5hdiBpZD0icHJvcG9zaXRpb24tbWVudSI+CiAgICAgIDx1bCBpZD0icHJvcG9zaXRpb24tbGlua3MiPgogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9idXlpbmctYW5kLXNlbGxpbmctb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPkd1aWRhbmNlPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL2hlbHAiPkhlbHA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL3VzZXIvbG9naW4iPkxvZyBpbjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIAogICAgICA8L3VsPgogICAgPC9uYXY+CiAgPC9kaXY+CjwvZGl2PgoKICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj4KICAgIAoKICAgIAogIAogIAogIAoKICAKICAgIDxkaXYgY2xhc3M9InVzZXItcmVzZWFyY2gtYmFubmVyIj4KICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgIDxwPgogICAgICA8c3Ryb25nIGNsYXNzPSJiYW5uZXItaGVhZGluZyI+SGVscCB1cyBpbXByb3ZlIHRoZSBEaWdpdGFsIE1hcmtldHBsYWNlPC9zdHJvbmc+CiAgICAgIDxhIAogICAgICAgIGhyZWY9IiMiIAogICAgICAgIGNsYXNzPSJ1c2VyLXJlc2VhcmNoLWJhbm5lci1jbG9zZS1idG4iCiAgICAgICAgZGF0YS1hbmFseXRpY3M9InRyYWNrRXZlbnQiCiAgICAgICAgZGF0YS1hbmFseXRpY3MtY2F0ZWdvcnk9InVzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJDbG9zZSBiYW5uZXIiCiAgICAgID5DbG9zZTwvYT4KICAgIDwvcD4KICAgIDxwPgogICAgICA8YSAKICAgICAgICBocmVmPSIvdXNlci9ub3RpZmljYXRpb25zL3VzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3M9InRyYWNrRXZlbnQiCiAgICAgICAgZGF0YS1hbmFseXRpY3MtY2F0ZWdvcnk9InVzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJWaWV3IHNpZ24gdXAgdG8gdXNlciByZXNlYXJjaCBzY3JlZW4iCiAgICAgID5TaWduIHVwIHRvIGJlIGEgcG90ZW50aWFsIHVzZXIgcmVzZWFyY2ggcGFydGljaXBhbnQ8L2E+CiAgICA8L3A+CiAgPC9kaXY+CjwvZGl2PgogIAoKCiAgICA8ZGl2IGlkPSJnbG9iYWwtaGVhZGVyLWJhciI+PC9kaXY+CgogICAgCiAgICAKICAgIAogIAogIAogICAgPGRpdiBpZD0iZ2xvYmFsLWJyZWFkY3J1bWIiIGNsYXNzPSJoZWFkZXItY29udGV4dCI+CiAgPG5hdj4KICAgIDxvbCBjbGFzcz0iZ3JvdXAiIHJvbGU9ImJyZWFkY3J1bWJzIj4KICAgICAgICA8bGk+PGEgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT48L2xpPgogICAgICAgIAogICAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMiPlN1cHBsaWVyIG9wcG9ydHVuaXRpZXM8L2E+PC9saT4KICAgICAgICAKICAgICAgCiAgICA8L29sPgogIDwvbmF2Pgo8L2Rpdj4KICAKCiAgPGRpdiBpZD0id3JhcHBlciI+CiAgICA8bWFpbiBpZD0iY29udGVudCIgcm9sZT0ibWFpbiI+CiAgICAgIAogIAoKICAgICAgCgoKCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tdHdvLXRoaXJkcyI+CiAgICA8aGVhZGVyIGNsYXNzPSJwYWdlLWhlYWRpbmctc21hbGxlciI+CiAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1jYXB0aW9uLWwiPkRlcGFydG1lbnQgZm9yIFRyYW5zcG9ydDwvc3Bhbj4KICAgICAgPGgxIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLWwiPk1hcHBpbmcgdG9vbCBmb3IgcGxhY2UtYmFzZWQgdHJhbnNwb3J0IGRhdGEg4oCTIERpc2NvdmVyeSBQaGFzZTwvaDE+CiAgICAgIDxzcGFuIGRhdGEtbG90PSJkaWdpdGFsLW91dGNvbWVzIj48L3NwYW4+CiAgICA8L2hlYWRlcj4KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKCjxkaXYgY2xhc3M9InN0YXRpc3RpYy1jb250YWluZXIiIGlkPSJpbmNvbXBsZXRlLWFwcGxpY2F0aW9ucyI+CiAgICA8aDMgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+SW5jb21wbGV0ZSBhcHBsaWNhdGlvbnM8L2gzPgogICAgPGRpdiBjbGFzcz0iYmlnLXN0YXRpc3RpYyI+NzwvZGl2PgogICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLW5hbWUiPkluY29tcGxldGUgYXBwbGljYXRpb25zPC9kaXY+CiAgICAKICAgICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLWRlc2NyaXB0aW9uIj41IFNNRSwgMiBsYXJnZTwvZGl2PgogICAgCiAgPC9kaXY+CjxkaXYgY2xhc3M9InN0YXRpc3RpYy1jb250YWluZXIiIGlkPSJjb21wbGV0ZWQtYXBwbGljYXRpb25zIj4KICAgIDxoMyBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5Db21wbGV0ZWQgYXBwbGljYXRpb25zPC9oMz4KICAgIDxkaXYgY2xhc3M9ImJpZy1zdGF0aXN0aWMiPjA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InN0YXRpc3RpYy1uYW1lIj5Db21wbGV0ZWQgYXBwbGljYXRpb25zPC9kaXY+CiAgICAKICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEltcG9ydGFudCBkYXRlcwogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlB1Ymxpc2hlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk1vbmRheSA5IERlY2VtYmVyIDIwMTk8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkRlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+TW9uZGF5IDE2IERlY2VtYmVyIDIwMTkgYXQgMTE6NTlwbSBHTVQ8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkNsb3NpbmcgZGF0ZSBmb3IgYXBwbGljYXRpb25zPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+TW9uZGF5IDIzIERlY2VtYmVyIDIwMTkgYXQgMTE6NTlwbSBHTVQ8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0xIj4KICAgICAgCiAgICAgIE92ZXJ2aWV3CiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBPdmVydmlldwogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+U3VtbWFyeSBvZiB0aGUgd29yazwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlIHdpbm5pbmcgc3VwcGxpZXIgd2lsbCBiZSByZXF1aXJlZCB0byBkZWxpdmVyIGEgRGlzY292ZXJ5IHJlcG9ydCAoTVMgd29yZCBhbmQgUERGKSB3aXRoIGFuYWx5c2lzIGFuZCBzdXBwb3J0aW5nIGV2aWRlbmNlLCBhcyB3ZWxsIGFzIGEgcHJlc2VudGF0aW9uIGFuZCBRJmFtcDtBIHNlc3Npb24gd2hlbiB0aGUgZmluYWwgcmVwb3J0IGlzIHN1Ym1pdHRlZC48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5MYXRlc3Qgc3RhcnQgZGF0ZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+TW9uZGF5IDEwIEZlYnJ1YXJ5IDIwMjA8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5FeHBlY3RlZCBjb250cmFjdCBsZW5ndGg8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjQtNiB3ZWVrcywgYWx0aG91Z2ggZGVwZW5kZW50IG9uIHByZWZlcnJlZCBiaWRkZXJzIGFkdmljZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkxvY2F0aW9uPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkxvbmRvbjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPk9yZ2FuaXNhdGlvbiB0aGUgd29yayBpcyBmb3I8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkRlcGFydG1lbnQgZm9yIFRyYW5zcG9ydDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkJ1ZGdldCByYW5nZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+TWF4LsKjMjUsMDAwIGluY2x1ZGluZyBWQVQgIGZpeGVkIHByaWNlIGNvbnRyYWN0PC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0yIj4KICAgICAgCiAgICAgIEFib3V0IHRoZSB3b3JrCiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBBYm91dCB0aGUgd29yawogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V2h5IHRoZSB3b3JrIGlzIGJlaW5nIGRvbmU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSBEaXNjb3ZlcnkgUGhhc2Ugc2hvdWxkIGVzdGFibGlzaDo8YnI+LQlXaG8gYXJlIHRoZSBwcm9wb3NlZCB1c2VycyBvZiB0aGUgdG9vbCBhbmQgdGhlaXIgcmVxdWlyZW1lbnRzLyBwcmVmZXJlbmNlcywgb3V0bGluaW5nIGluZm9ybWF0aW9uIHRoYXQgd291bGQgYmUgdXNlZnVsIHRvIGluY2x1ZGUgd2l0aGluIHRoZSB0b29sLCBhbmQgYW55IGRhdGEgaXNzdWVzIHRoYXQgbmVlZCB0byBiZSByZXNvbHZlZCBpbiBvcmRlciB0byBkbyBzbyA8YnI+LQlBcmUgc2ltaWxhciB0b29scyBhbHJlYWR5IGluIGV4aXN0ZW5jZSB3aGljaCBkZWxpdmVyIHNpbWlsYXIgdXNlciBiZW5lZml0czxicj4tCVdoYXQgb3B0aW9ucyB0aGVyZSBhcmUsIHdpdGggYXNzb2NpYXRlZCBwcm9zIGFuZCBjb25zLCBmb3IgRGZUIGluIGVpdGhlciBkZXZlbG9waW5nIHRoZWlyIG93biBzeXN0ZW0sIG9yIHVzaW5nIGFuIOKAmG9mZi10aGUtc2hlbGbigJkgcHJvZHVjdC48YnI+LQlSZWNvbW1lbmRhdGlvbnMgZm9yIGtlZXBpbmcgdGhlIHRvb2wgdXAtdG8tZGF0ZSwgaWRlYWxseSBpbiBsaW5lIHdpdGggZXhpc3RpbmcgRGVwYXJ0bWVudGFsIHByb2Nlc3Nlcy48YnI+PGJyPlRoZXJlIHdpbGwgYmUgbm8gQWxwaGEgb3IgQmV0YSBzdGFnZS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Qcm9ibGVtIHRvIGJlIHNvbHZlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+SW4gdGhlIG1lZGl1bS10ZXJtIHRoZSBEZXBhcnRtZW50IGlzIGFpbWluZyB0byBkZXZlbG9wIGFuIGludGVyYWN0aXZlIG1hcHBpbmcgdG9vbCwgY2FwYWJsZSBvZiBkaXNwbGF5aW5nIGEgd2lkZSByYW5nZSBvZiBpbmZvcm1hdGlvbiBlLmcuIHJhaWwgcHJvamVjdHMsIHBvcHVsYXRpb24gc2l6ZSwgcHJvcG9ydGlvbiBvZiBwb3B1bGF0aW9uIHRoYXQgdXNlcyBwdWJsaWMgdHJhbnNwb3J0IGV0Yy4gdGhhdCB3aWxsIGJlIHVzZWQgd2l0aGluIHRoZSBkZXBhcnRtZW50IHRvIG1ha2UgYmV0dGVyIGRlY2lzaW9ucywgYXMgd2VsbCBhcyB0byBiZSBhYmxlIHRvIGJldHRlciB0ZWxsIGEgc3RvcnksIGFuZCBtYWtlIGJldHRlciBzdHJhdGVnaWMgbGlua3Mgd2hlbiBtYWtpbmcgaW52ZXN0bWVudCBkZWNpc2lvbnMuPGJyPlRoaXMgZGlzY292ZXJ5IHBoYXNlIGlzIHRvIGlkZW50aWZ5IHdoYXQgaW5mb3JtYXRpb24gc2hvdWxkIGJlIGluY2x1ZGVkIHdpdGhpbiB0aGUgdG9vbCwgdGhlIGtleSB1c2VycywgYW5kIGhpZ2hsaWdodGluZyB3aGVyZSB0aGlzIGluZm9ybWF0aW9uIGlzIHNvdXJjZWQgZnJvbS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5XaG8gdGhlIHVzZXJzIGFyZSBhbmQgd2hhdCB0aGV5IG5lZWQgdG8gZG88L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSBwcmltYXJ5IHVzZXJzIG9mIHRoZSBEaXNjb3Zlcnkgb3V0Y29tZXMgd2lsbCBiZSBpbnRlcm5hbCBEZlQgdXNlcnMsIHdobyB3aWxsIHVzZSB0aGUgZXZpZGVuY2UgdG8gaW5mb3JtIGNvbnNpZGVyYXRpb24gb2Ygb3B0aW9ucyBvbiB0aGUgZnV0dXJlIGRldmVsb3BtZW50IG9mIGFuIGludGVybmFsIENpdmlsIFNlcnZpY2Ugb25seSBtYXBwaW5nIHRvb2wuIFRoZXNlIHVzZXJzIHdpbGwgaW5jbHVkZSBhcmVhIGxlYWRzIHdobyB3aWxsIGJlIHByb3ZpZGluZyBpbmZvcm1hdGlvbiBpbnRvIHRoZSB0b29sKSwgcG9saWN5IGFuZCBwcm9qZWN0IHRlYW1zIGFyb3VuZCB0aGUgZGVwYXJ0bWVudCwgYXMgd2VsbCBhcyBzZW5pb3IgbWFuYWdlcnMgYW5kIEJvYXJkIG1lbWJlcnMgd2hvIHdpbGwgYmUgdGhlIGN1c3RvbWVycyBvZiB0aGUgdG9vbCwgYW5kIHdobyB3aWxsIGhhdmUgcHJlZmVyZW5jZXMgaW4gdGhlIHR5cGUgb2YgZGF0YSBhbmQgdGhlIGZvcm1hdCBpbiB3aGljaCBpdCBpcyBwcmVzZW50ZWQuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RWFybHkgbWFya2V0IGVuZ2FnZW1lbnQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk5vdCBhcHBsaWNhYmxlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QW55IHdvcmsgdGhhdOKAmXMgYWxyZWFkeSBiZWVuIGRvbmU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk4vQTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV4aXN0aW5nIHRlYW08L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkEgU3RlZXJpbmcgR3JvdXAgd2lsbCBiZSBlc3RhYmxpc2hlZCB0byBvdmVyc2VlIHRoaXMgd29yayB3aGljaCB3aWxsIGJlIG1hZGUgdXAgb2YgdGVhbXMgYWNyb3NzIHRoZSBEZXBhcnRtZW50IHdpdGggYW4gaW50ZXJlc3QgaW4gdGhpcyB3b3JrLCB3aXRoIHRoZSBrZXkgY29udGFjdCBwb2ludCBiZWluZyBmcm9tIHdpdGhpbiB0aGUgUmVnaW9ucyBDaXRpZXMgYW5kIERldm9sdXRpb24gRGlyZWN0b3JhdGUuIFRoZSBzcGVjaWFsaXNtcyBvbiB0aGUgU3RlZXJpbmcgR3JvdXAgd2lsbCByYW5nZSBmcm9tIHBvbGljeSB0byBnb3Zlcm5hbmNlLCB0ZWNobm9sb2d5IGFuZCBwcm9ncmFtbWUgZGVsaXZlcnkuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+Q3VycmVudCBwaGFzZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Ob3Qgc3RhcnRlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtMyI+CiAgICAgIAogICAgICBXb3JrIHNldHVwCiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBXb3JrIHNldHVwCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5BZGRyZXNzIHdoZXJlIHRoZSB3b3JrIHdpbGwgdGFrZSBwbGFjZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlIG1ham9yaXR5IG9mIHRoZSB3b3JrIHdpbGwgYmUgY29uZHVjdGVkIGF0IHRoZSBzdXBwbGllcuKAmXMgb3duIHNpdGUgKG9yIG90aGVyIGNob3NlbiBsb2NhdGlvbikgdGhvdWdoIGNvbmR1Y3Rpbmcgb2YgdXNlciByZXNlYXJjaCB0cmF2ZWwgdG8gaW50ZXJ2aWV3IHJlc3BvbmRlbnRzIGF0IHRoZSBEZXBhcnRtZW50IGZvciBUcmFuc3BvcnQgaW4gdGhlaXIgb2ZmaWNlIGluIExvbmRvbiBhcyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIGRpc2NvdmVyeSBhY3Rpdml0aWVzLCBhbmQgZm9ydG5pZ2h0bHkgdXBkYXRlcyB0byB0aGUgU3RlZXJpbmcgR3JvdXA6PGJyPjxicj5EZXBhcnRtZW50IGZvciBUcmFuc3BvcnQ8YnI+R3JlYXQgTWluc3RlciBIb3VzZTxicj4zMyBIb3JzZWZlcnJ5IFJvYWQ8YnI+TG9uZG9uPGJyPlNXMVAgNERSPGJyPjxicj5UJmFtcDtTIHNob3VsZCBiZSBpbmNsdWRlZCB3aXRoaW4gdGhlIGluaXRpYWwgYmlkcywgYW5kIHdpbGwgYmUgcGFpZCBpbiBsaW5lIHdpdGggRGZUIHJhdGVzIGFuZCB0ZXJtcy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Xb3JraW5nIGFycmFuZ2VtZW50czwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+V2UgYXJlIG9wZW4gdG8gZGlzY3Vzc2lvbnMgYXJvdW5kIHRoZSBiZXN0IGZvcm1hdCBmb3IgZGVsaXZlcmluZyB0aGUgd29yay4gV2Ugd291bGQgZXhwZWN0IHRoZSBzdWNjZXNzZnVsIHN1cHBsaWVyIHRvIGJlIGF2YWlsYWJsZSBkdXJpbmcgRGZUIHdvcmtpbmcgaG91cnMgKE1vbi1GcmksIDktNSksIGFuZCBmb3IgYW55IGtub3dsZWRnZSB0cmFuc2ZlciBhY3Rpdml0aWVzLjxicj48YnI+VGhlIHN1cHBsaWVyIHdpbGwgbmVlZCB0byBlaXRoZXIgdHJhdmVsIHRvIExvbmRvbiB0byBnZXQgYW4gdW5kZXJzdGFuZGluZyBvZiB0aGUgaW5mb3JtYXRpb24vIGRhdGEgcmVxdWlyZW1lbnRzIG9mIHRoZSB0b29sIGZyb20gdGhvc2Ugc3Rha2Vob2xkZXJzIHdobyB3aWxsIHVzZSBpdCAoRGZUIENpdmlsIFNlcnZhbnRzKSwgYXMgd2VsbCBhcyBmb3J0bmlnaHRseSBtZWV0aW5ncyB3aXRoIHRoZSBEZlQgU3RlZXJpbmcgR3JvdXAsIGVpdGhlciBpbiBwZXJzb24gb3IgdmlhIHRlbGUtY29uZmVyZW5jZS48YnI+PGJyPlQmYW1wO1Mgc2hvdWxkIGJlIGluY2x1ZGVkIHdpdGhpbiB0aGUgaW5pdGlhbCBiaWRzLCBhbmQgd2lsbCBiZSBwYWlkIGluIGxpbmUgd2l0aCBEZlQgcmF0ZXMgYW5kIHRlcm1zLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlNlY3VyaXR5IGNsZWFyYW5jZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+QmFzZWxpbmUgUGVyc29ubmVsIFNlY3VyaXR5IFN0YW5kYXJkIHRoYXQgc2hvdWxkIGJlIGFjdGl2ZSBmcm9tIHdoZW4gdGhlIGNvbnRyYWN0IGNvbW1lbmNlcy4gPGJyPjxicj5FdmlkZW5jZSBvZiBjbGVhcmFuY2Ugb2YgdGhhdCB5b3UgYXJlIHdvcmtpbmcgdG93YXJkIG9idGFpbmluZyBjbGVhcmFuY2Ugd2lsbCBiZSByZXF1ZXN0ZWQgYXMgcGFydCBvZiBzdGFnZSAyIGV2YWx1YXRpb24uPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy00Ij4KICAgICAgCiAgICAgIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24KICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24KICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZGl0aW9uYWwgdGVybXMgYW5kIGNvbmRpdGlvbnM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk4vQTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNSI+CiAgICAgIAogICAgICBTa2lsbHMgYW5kIGV4cGVyaWVuY2UKICA8L2gyPgogICAgIAogICAgICAgIDxwPjxwIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZGVzY3JpcHRpb24iPgogICAgQnV5ZXJzIHdpbGwgdXNlIHRoZSBlc3NlbnRpYWwgYW5kIG5pY2UtdG8taGF2ZSBza2lsbHMgYW5kIGV4cGVyaWVuY2UgdG8gaGVscCB0aGVtIGV2YWx1YXRlIHN1cHBsaWVyc+KAmSB0ZWNobmljYWwgY29tcGV0ZW5jZS4KICA8L3A+PC9wPgogICAgIAogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIFNraWxscyBhbmQgZXhwZXJpZW5jZQogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RXNzZW50aWFsIHNraWxscyBhbmQgZXhwZXJpZW5jZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPlByb3ZlbiBwcmV2aW91cyBleHBlcmllbmNlIG9mIGNvbmR1Y3RpbmcgZGlzY292ZXJ5IGFjdGl2aXR5IGluIG9yZGVyIHRvIHN1cHBvcnQgYmV0dGVyIGluZm9ybWF0aW9uIGRpc3BsYXkgdXNpbmcgbG9jYXRpb24gZGF0YTwvbGk+CiAgICAKICAgICAgPGxpPkRlbW9uc3RyYWJsZSBldmlkZW5jZSBvZiBzb21lIGV4cGVyaWVuY2Ugd2l0aCB0cmFuc3BvcnQgZGF0YSwgYnV0IHdpdGhvdXQgYmVpbmcgbGltaXRlZCB0byB0aGUgdHJhbnNwb3J0IHNlY3RvcjwvbGk+CiAgICAKICAgICAgPGxpPkRlbW9uc3RyYWJsZSBldmlkZW5jZSBvZiBleHBlcmllbmNlIG9mIGRlc2stYmFzZWQgcmVzZWFyY2gsIGFuZCBpbnRlcnZpZXdpbmcgc2VuaW9yIHN0YWtlaG9sZGVycyAoYm90aCBpbnRlcm5hbCBhbmQgZXh0ZXJuYWwpPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIG9mIHRlY2huaWNhbCBleHBlcmllbmNlIHdpdGgvIGF3YXJlbmVzcyBvZiBtYXBwaW5nIHRvb2xzPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIGlmIGEgaGlnaCBsZXZlbCB1bmRlcnN0YW5kaW5nIG9mIHRoZSB3b3JrIG9mIHRoZSBEZXBhcnRtZW50IGZvciBUcmFuc3BvcnQ8L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5OaWNlLXRvLWhhdmUgc2tpbGxzIGFuZCBleHBlcmllbmNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy02Ij4KICAgICAgCiAgICAgIEhvdyBzdXBwbGllcnMgd2lsbCBiZSBldmFsdWF0ZWQKICA8L2gyPgogICAgIAogICAgICAgIDxwPkFsbCBzdXBwbGllcnMgd2lsbCBiZSBhc2tlZCB0byBwcm92aWRlIGEgd3JpdHRlbiBwcm9wb3NhbC48L3A+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgSG93IHN1cHBsaWVycyB3aWxsIGJlIGV2YWx1YXRlZAogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+SG93IG1hbnkgc3VwcGxpZXJzIHRvIGV2YWx1YXRlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj42PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UHJvcG9zYWwgY3JpdGVyaWE8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PHVsPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmFibGUgZXZpZGVuY2Ugb2YgaG93IGl0IGZpdHMgd2l0aCB0ZWNobmljYWwgY29tcGV0ZW5jZSBjcml0ZXJpYSwgYXBwcm9hY2ggYW5kIG1ldGhvZG9sb2d5ICgxMCUpPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIG9mIGhvdyB0aGUgYXBwcm9hY2ggbWVldHMgZGVwYXJ0bWVudOKAmXMgZ29hbHMgYW5kIHVzZXIgbmVlZHMgKDE1JSk8L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmFibGUgZXZpZGVuY2Ugb2YgaG93IHRoZXnigJl2ZSBpZGVudGlmaWVkIHJpc2tzIGFuZCBkZXBlbmRlbmNpZXMgYW5kIG9mZmVyZWQgYXBwcm9hY2hlcyB0byBtYW5hZ2UgdGhlbSAoMyUpPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIG9mIGhvdyB0aGUgYXBwcm9hY2ggb3Igc29sdXRpb24gbWF0Y2hlcyBEZlTigJlzIGV4aXN0aW5nIHNraWxsIHNldCAoMiUpPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIG9mIGhvdyB0aGUgYXBwcm9hY2ggd2lsbCB0cmFuc2ZlciBrbm93bGVkZ2UgdG8gRGZUIHN0YWZmICg1JSk8L2xpPgogICAgCiAgICAgIDxsaT5UZWFtIHN0cnVjdHVyZSAoMyUpPC9saT4KICAgIAogICAgICA8bGk+Q1YgKDIlKTwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkN1bHR1cmFsIGZpdCBjcml0ZXJpYTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPkRlbW9uc3RyYWJsZSBldmlkZW5jZSBhbmQgRXhwZXJpZW5jZSBvZiB3b3JraW5nIGFzIGEgdGVhbSB3aXRoIG91ciBvcmdhbmlzYXRpb24gYW5kIG90aGVyIHN0YWtlaG9sZGVycyAoMyUpPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIGFuZCBFeHBlcmllbmNlIG9mIHRoZSBpZGlvc3luY3Jhc2llcyBvZiB0aGUgdHJhbnNwb3J0IHNlY3RvciAoNyUpPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIGFuZCBFeHBlcmllbmNlIG9mIGludGVycHJldGluZyB0aGUgYnJpZWYgYW5kIGFwcGx5aW5nIHNlY3RvcmFsIGtub3dsZWRnZSAoNSUpPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIGFuZCBFeHBlcmllbmNlIG9mIHRyYW5zcGFyZW50IGFuZCBjb2xsYWJvcmF0aXZlIGRlY2lzaW9uIG1ha2luZyAoMyUpPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGV2aWRlbmNlIGFuZCBFeHBlcmllbmNlIG9mIHNoYXJpbmcgYXBwcm9hY2gsIGtub3dsZWRnZSBhbmQgc2tpbGxzIHdpdGggb3RoZXIgdGVhbSBtZW1iZXJzIGFuZCB3aXRoIHRoZSBkZXBhcnRtZW50IGJ5IGV4YW1wbGUgKDIlKTwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlBheW1lbnQgYXBwcm9hY2g8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+Rml4ZWQgcHJpY2U8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5BZGRpdGlvbmFsIGFzc2Vzc21lbnQgbWV0aG9kczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPkNhc2Ugc3R1ZHk8L2xpPgogICAgCiAgICAgIDxsaT5QcmVzZW50YXRpb248L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5FdmFsdWF0aW9uIHdlaWdodGluZzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5UZWNobmljYWwgY29tcGV0ZW5jZTwvcD4KICAgICAgICAgIDxkaXY+NDUlPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im11bHRpcXVlc3Rpb24iPgogICAgICAgICAgPHA+Q3VsdHVyYWwgZml0PC9wPgogICAgICAgICAgPGRpdj4yMCU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5QcmljZTwvcD4KICAgICAgICAgIDxkaXY+MzUlPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImNvbHVtbi1vbmUtd2hvbGUiPgogICAgCgoKCjxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJjbGFyaWZpY2F0aW9uLXF1ZXN0aW9ucyI+CiAgICAgIAogICAgICBRdWVzdGlvbnMgYXNrZWQgYnkgc3VwcGxpZXJzCiAgPC9oMj4KCiAgICA8cCBjbGFzcz0ic3VtbWFyeS1pdGVtLW5vLWNvbnRlbnQiPgogICAgICBObyBxdWVzdGlvbnMgaGF2ZSBiZWVuIGFuc3dlcmVkIHlldAogICAgPC9wPgogIAoKCiAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9zdXBwbGllcnMvb3Bwb3J0dW5pdGllcy8xMTM2Ni9hc2stYS1xdWVzdGlvbiI+CiAgICAKICAgICAgTG9nIGluIHRvIGFzayBhIHF1ZXN0aW9uCiAgICAKICA8L2E+CgogIDwvZGl2Pgo8L2Rpdj4KCgogIDxici8+PCEtLSA8LSByZW1vdmUgb25jZSBncmlkIGFuZCBib2R5IGVsZW1lbnRzIGhhdmUgYmVlbiBjb252ZXJ0ZWQgdG8gZ292dWsgZnJvbnRlbmQgLS0+CiAgPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogICAgPGRpdiBjbGFzcz0iY29sdW1uLXR3by10aGlyZHMiPgogICAgICA8Zm9ybSBhY3Rpb249Ii9zdXBwbGllcnMvb3Bwb3J0dW5pdGllcy8xMTM2Ni9yZXNwb25zZXMvc3RhcnQiIG1ldGhvZD0iZ2V0Ij4KICAgICAgICAKICAKICAgIAogIAoKPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJnb3Z1ay1idXR0b24iPgogIEFwcGx5IGZvciB0aGlzIG9wcG9ydHVuaXR5CjwvYnV0dG9uPgogICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCgoKICAgIDwvbWFpbj4KICA8L2Rpdj4KCgogICAgPGZvb3RlciBjbGFzcz0iZ3JvdXAganMtZm9vdGVyIiBpZD0iZm9vdGVyIiByb2xlPSJjb250ZW50aW5mbyI+CgogICAgICA8ZGl2IGNsYXNzPSJmb290ZXItd3JhcHBlciI+CiAgICAgICAgCiAgPGRpdiBjbGFzcz0iZm9vdGVyLWNhdGVnb3JpZXMiPgogIDxkaXYgY2xhc3M9ImZvb3Rlci1hYm91dCI+CiAgICA8aDI+CiAgICAgIENvbnRhY3QKICAgIDwvaDI+CiAgICA8dWw+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIvaGVscCI+RGlnaXRhbCBNYXJrZXRwbGFjZSBoZWxwPC9hPgogICAgICA8L2xpPgogICAgPC91bD4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJmb290ZXItYnV5ZXJzIj4KICAgIDxoMj4KICAgICAgQWJvdXQgdGhlIERpZ2l0YWwgTWFya2V0cGxhY2UKICAgIDwvaDI+CiAgICA8dWw+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1tYXJrZXRwbGFjZS1idXllcnMtZ3VpZGUiPlNlcnZpY2VzIHlvdSBjYW4gYnV5PC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2Utc3VwcGxpZXJzLWd1aWRlIj5TZXJ2aWNlcyB5b3UgY2FuIHNlbGw8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2Nyb3duLWNvbW1lcmNpYWwtc2VydmljZSI+QWJvdXQgQ3Jvd24gQ29tbWVyY2lhbCBTZXJ2aWNlPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSI+QWJvdXQgR292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2U8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIvZy1jbG91ZC9zdXBwbGllcnMiPkctQ2xvdWQgc3VwcGxpZXIgQeKAk1o8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgogIDxkaXYgY2xhc3M9ImZvb3Rlci1zdXBwbGllcnMiPgogICAgPGgyPgogICAgICAgIEd1aWRhbmNlCiAgICA8L2gyPgogICAgPHVsPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtc3VwcGxpZXJzLWd1aWRlIj5BcHBseWluZyB0byBzZWxsIG9uIHRoZSBHLUNsb3VkIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zdXBwbGllcnMtZ3VpZGUiPkFwcGx5aW5nIHRvIHNlbGwgb24gdGhlIERpZ2l0YWwgT3V0Y29tZXMgYW5kIFNwZWNpYWxpc3RzIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9ob3ctdG8tc2VsbC15b3VyLWRpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLXNlcnZpY2VzIj5SZXNwb25kaW5nIHRvIGJ1eWVyIHJlcXVpcmVtZW50cyBvbiB0aGUgRGlnaXRhbCBPdXRjb21lcyBhbmQgU3BlY2lhbGlzdHMgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtYnV5ZXJzLWd1aWRlIj5CdXlpbmcgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLWJ1eWVycy1ndWlkZSI+QnV5aW5nIG9uIHRoZSBEaWdpdGFsIE91dGNvbWVzIGFuZCBTcGVjaWFsaXN0cyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvdGhlLWNyb3duLWhvc3RpbmctZGF0YS1jZW50cmVzLWZyYW1ld29yay1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+QnV5aW5nIG9uIHRoZSBDcm93biBIb3N0aW5nIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9kaXY+CiAgPGhyLz4KPC9kaXY+CgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbWV0YSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbWV0YS1pbm5lciI+CiAgICAgICAgICAgIAogICAgPGgyIGNsYXNzPSJ2aXN1YWxseWhpZGRlbiI+U3VwcG9ydCBsaW5rczwvaDI+CiAgICA8dWw+CiAgICAgICAgPGxpPjxhIGhyZWY9Ii90ZXJtcy1hbmQtY29uZGl0aW9ucyIgY2xhc3M9InRlcm1zLWFuZC1jb25kaXRpb25zIj5UZXJtcyBhbmQgY29uZGl0aW9uczwvYT48L2xpPgogICAgICAgIDxsaT48YSBocmVmPSIvY29va2llcyI+Q29va2llczwvYT48L2xpPgogICAgICAgIDxsaT48YSBocmVmPSIvcHJpdmFjeS1ub3RpY2UiPlByaXZhY3kgbm90aWNlPC9hPjwvbGk+CiAgICAgICAgPGxpPkJ1aWx0IGJ5IHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIj5Hb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZTwvYT48L2xpPgogICAgPC91bD4KCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvcGVuLWdvdmVybm1lbnQtbGljZW5jZSI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImxvZ28iPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIiByZWw9ImxpY2Vuc2UiPk9wZW4gR292ZXJubWVudCBMaWNlbmNlPC9hPjwvcD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxwPkFsbCBjb250ZW50IGlzIGF2YWlsYWJsZSB1bmRlciB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvZG9jL29wZW4tZ292ZXJubWVudC1saWNlbmNlL3ZlcnNpb24vMy8iIHJlbD0ibGljZW5zZSI+T3BlbiBHb3Zlcm5tZW50IExpY2VuY2UgdjMuMDwvYT4sIGV4Y2VwdCB3aGVyZSBvdGhlcndpc2Ugc3RhdGVkPC9wPgogICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvcHlyaWdodCI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvaW5mb3JtYXRpb24tbWFuYWdlbWVudC9yZS11c2luZy1wdWJsaWMtc2VjdG9yLWluZm9ybWF0aW9uL2NvcHlyaWdodC1hbmQtcmUtdXNlL2Nyb3duLWNvcHlyaWdodC8iPiZjb3B5OyBDcm93biBjb3B5cmlnaHQ8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Zvb3Rlcj4KCiAgICA8ZGl2IGlkPSJnbG9iYWwtYXBwLWVycm9yIiBjbGFzcz0iYXBwLWVycm9yIGhpZGRlbiI+PC9kaXY+CgogICAgPHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvZ292dWstdGVtcGxhdGUuanM/MC4xOS4yIj48L3NjcmlwdD4KCiAgICAKICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2FwcGxpY2F0aW9uLmpzP2Y4NGJlYTEzMWJiODhjY2JhOGQ5YWRkMDQ0N2I5NTRiIj48L3NjcmlwdD4KICAKCgogICAgCiAgICA8c2NyaXB0PmlmICh0eXBlb2Ygd2luZG93LkdPVlVLID09PSAndW5kZWZpbmVkJykgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZS5yZXBsYWNlKCdqcy1lbmFibGVkJywgJycpOzwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPg==
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:17 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11360
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjA.n8PRC-TA6C0BGRBq5eLMOtDqZV4
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33770'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:17 GMT
      Dm-Request-Id:
      - e371d47748b8f704
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:17 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjQ.tCvze-BeCVQoyIv4FGeSuY2Bg-0;
        Expires=Tue, 10-Dec-2019 11:57:17 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - e371d47748b8f704
      X-B3-Traceid:
      - e371d47748b8f704
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 7d671fee-d5ac-4854-7d21-88851afbed54
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 85b9b6c170ed4eb5bc514443bb4ade55.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - P9lfkyAChdnkkkguQTiIXH3DLR9SeOL-2aogIxc0ZBP5zJduYCKpyA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:17 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11296
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjQ.tCvze-BeCVQoyIv4FGeSuY2Bg-0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '32916'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:17 GMT
      Dm-Request-Id:
      - dbb516f26974ff7b
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:17 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjQ.tCvze-BeCVQoyIv4FGeSuY2Bg-0;
        Expires=Tue, 10-Dec-2019 11:57:17 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - dbb516f26974ff7b
      X-B3-Traceid:
      - dbb516f26974ff7b
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 706c133a-0a01-4155-49d8-a7e0c713a8d5
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ce730d33091c8015848f9f46f438eab3.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - 4lTbfHmYAMLQBKnoiQp-5IwYKG4kBWWoUlNGX3YExqtGOH_Ds-AMyQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:17 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11358
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjQ.tCvze-BeCVQoyIv4FGeSuY2Bg-0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34668'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:17 GMT
      Dm-Request-Id:
      - 6b497e257155484e
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:17 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjQ.tCvze-BeCVQoyIv4FGeSuY2Bg-0;
        Expires=Tue, 10-Dec-2019 11:57:17 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 6b497e257155484e
      X-B3-Traceid:
      - 6b497e257155484e
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 0e9693d6-b81a-4b9d-7541-eae4dc3f91a8
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 9fdd5bd72604beaad36fa6d3b5b0ff10.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - vB2YFb0N-swvno0QG9ZQp7bog2HGSIB92fwsfJu0s4aS9QcGO3-gTw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:18 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11241
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjQ.tCvze-BeCVQoyIv4FGeSuY2Bg-0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30569'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:18 GMT
      Dm-Request-Id:
      - 402f8cca48a3cdec
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:18 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjg.NJ6v3-dma2R5e3WE4r1J90jwepU;
        Expires=Tue, 10-Dec-2019 11:57:18 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 402f8cca48a3cdec
      X-B3-Traceid:
      - 402f8cca48a3cdec
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - e930e69a-d749-4278-43fb-42a5ad43931a
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0d28fd7b073340c78cdcd5a3e2e0fe5b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - uxU_sz9pN6QKkz_CRvJXHog6__8deFMCobpARfQYW9HFkzOeuaMv_Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPCEtLVtpZiBsdCBJRSA5XT48aHRtbCBjbGFzcz0ibHRlLWllOCIgbGFuZz0iZW4iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGh0bWwgbGFuZz0iZW4iPjwhLS08IVtlbmRpZl0tLT4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPHRpdGxlPgogIE5hdGlvbmFsIEluZnJhc3RydWN0dXJlIENvbW1pc3Npb24g4oCTIFlvdW5nIFByb2Zlc3Npb25hbHMgUGFuZWwgIHdlYnNpdGUgcGxhdGZvcm0gLSBEaWdpdGFsIE1hcmtldHBsYWNlCjwvdGl0bGU+CgogICAgPCEtLVtpZiBndCBJRSA4XT48IS0tPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUuY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhLS08IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgSUUgNl0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1pZTYuY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA3XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2dvdnVrLXRlbXBsYXRlLWllNy5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIElFIDhdPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtaWU4LmNzcz8wLjE5LjIiIG1lZGlhPSJzY3JlZW4iIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtcHJpbnQuY3NzPzAuMTkuMiIgbWVkaWE9InByaW50IiByZWw9InN0eWxlc2hlZXQiIC8+CgogICAgPCEtLVtpZiBJRSA4XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2ZvbnRzLWllOC5jc3M/MC4xOS4yIiBtZWRpYT0iYWxsIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGd0ZSBJRSA5XT48IS0tPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZm9udHMuY3NzPzAuMTkuMiIgbWVkaWE9ImFsbCIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhLS08IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvaWUuanM/MC4xOS4yIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2Zhdmljb24uaWNvPzAuMTkuMiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgPGxpbmsgcmVsPSJtYXNrLWljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdi51a19sb2dvdHlwZV9jcm93bi5zdmc/MC4xOS4yIiBjb2xvcj0iIzBiMGMwYyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nPzAuMTkuMiI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxMjB4MTIwIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTEyMHgxMjAucG5nPzAuMTkuMiI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSI3Nng3NiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvYXBwbGUtdG91Y2gtaWNvbi03Nng3Ni5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvYXBwbGUtdG91Y2gtaWNvbi02MHg2MC5wbmc/MC4xOS4yIj4KCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSIvc3RhdGljL2ltYWdlcy9vcGVuZ3JhcGgtaW1hZ2UucG5nPzAuMTkuMiI+CgogICAgCiAgCgoKCgoKCgogIDxtZXRhIG5hbWU9ImdhX2N1c3RvbURpbWVuc2lvbiIgZGF0YS1pZD0iMTIiIGRhdGEtdmFsdWU9IlVzZXIgcmVzZWFyY2ggYmFubmVyIj4KCgoKCgogIDwhLS1baWYgZ3QgSUUgOF0+PCEtLT4KICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ic2NyZWVuIiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLmNzcz8wZjliYTUyMzU2M2Q1MmMzMzZkMWZlMjllNzkwYzNlNSIgLz4KPCEtLTwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJzY3JlZW4iIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24taWU3LmNzcz8zODM4ZTc1YzZiMTg1OTQ4ZTczOTQ3YTliYzJlNTYxMiIgLz4KPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+CiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9InNjcmVlbiIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi1pZTguY3NzP2EzNzNhYTFiNzM5ZjUzODZkN2E5MDNlZDY4NjJkNmM4IiAvPgo8IVtlbmRpZl0tLT4KICAKICAgIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iVEtHU0dabmZIcHgxLWxLT3RoSTE3QU50d2s3ZnozRjRTYnI3N0kwcHBPMCIgLz4KCgogIDwvaGVhZD4KCiAgPGJvZHkgY2xhc3M9IiI+CiAgICA8c2NyaXB0PmRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gKChkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSkgPyBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSArICcganMtZW5hYmxlZCcgOiAnanMtZW5hYmxlZCcpOzwvc2NyaXB0PgoKICAgIAoKICAgIDxkaXYgaWQ9InNraXBsaW5rLWNvbnRhaW5lciI+CiAgICAgIDxkaXY+CiAgICAgICAgPGEgaHJlZj0iI2NvbnRlbnQiIGNsYXNzPSJza2lwbGluayI+U2tpcCB0byBtYWluIGNvbnRlbnQ8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0iZ2xvYmFsLWNvb2tpZS1tZXNzYWdlIj4KICAgICAgCiAgICAgICAgCiAgPHA+R09WLlVLIHVzZXMgY29va2llcyB0byBtYWtlIHRoZSBzaXRlIHNpbXBsZXIuIDxhIGhyZWY9Ii9jb29raWVzIj5GaW5kIG91dCBtb3JlIGFib3V0IGNvb2tpZXM8L2E+PC9wPgoKCiAgICAgIAogICAgPC9kaXY+CgogICAgCiAgICA8aGVhZGVyIHJvbGU9ImJhbm5lciIgaWQ9Imdsb2JhbC1oZWFkZXIiIGNsYXNzPSJ3aXRoLXByb3Bvc2l0aW9uIj4KICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1nbG9iYWwiPgogICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWxvZ28iPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsiIHRpdGxlPSJHbyB0byB0aGUgR09WLlVLIGhvbWVwYWdlIiBpZD0ibG9nbyIgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIvc3RhdGljL2ltYWdlcy9nb3YudWtfbG9nb3R5cGVfY3Jvd25faW52ZXJ0X3RyYW5zLnBuZz8wLjE5LjIiIHdpZHRoPSIzNiIgaGVpZ2h0PSIzMiIgYWx0PSIiPiBHT1YuVUsKICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJoZWFkZXItdGl0bGUiPgogICAgPGEgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT4KICAgIDxzdHJvbmcgY2xhc3M9InBoYXNlLXRhZyI+QkVUQTwvc3Ryb25nPgo8L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgPGRpdiBjbGFzcz0iaGVhZGVyLXByb3Bvc2l0aW9uIj4KICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgIDxhIGhyZWY9IiNwcm9wb3NpdGlvbi1saW5rcyIgY2xhc3M9ImpzLWhlYWRlci10b2dnbGUgbWVudSI+TWVudTwvYT4KICAgIDxuYXYgaWQ9InByb3Bvc2l0aW9uLW1lbnUiPgogICAgICA8dWwgaWQ9InByb3Bvc2l0aW9uLWxpbmtzIj4KICAgICAgICA8bGk+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvYnV5aW5nLWFuZC1zZWxsaW5nLW9uLXRoZS1kaWdpdGFsLW1hcmtldHBsYWNlIj5HdWlkYW5jZTwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii9oZWxwIj5IZWxwPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii91c2VyL2xvZ2luIj5Mb2cgaW48L2E+CiAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgPC91bD4KICAgIDwvbmF2PgogIDwvZGl2Pgo8L2Rpdj4KCiAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CiAgICAKCiAgICAKICAKICAKICAKCiAgCiAgICA8ZGl2IGNsYXNzPSJ1c2VyLXJlc2VhcmNoLWJhbm5lciI+CiAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICA8cD4KICAgICAgPHN0cm9uZyBjbGFzcz0iYmFubmVyLWhlYWRpbmciPkhlbHAgdXMgaW1wcm92ZSB0aGUgRGlnaXRhbCBNYXJrZXRwbGFjZTwvc3Ryb25nPgogICAgICA8YSAKICAgICAgICBocmVmPSIjIiAKICAgICAgICBjbGFzcz0idXNlci1yZXNlYXJjaC1iYW5uZXItY2xvc2UtYnRuIgogICAgICAgIGRhdGEtYW5hbHl0aWNzPSJ0cmFja0V2ZW50IgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWNhdGVnb3J5PSJ1c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iQ2xvc2UgYmFubmVyIgogICAgICA+Q2xvc2U8L2E+CiAgICA8L3A+CiAgICA8cD4KICAgICAgPGEgCiAgICAgICAgaHJlZj0iL3VzZXIvbm90aWZpY2F0aW9ucy91c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzPSJ0cmFja0V2ZW50IgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWNhdGVnb3J5PSJ1c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iVmlldyBzaWduIHVwIHRvIHVzZXIgcmVzZWFyY2ggc2NyZWVuIgogICAgICA+U2lnbiB1cCB0byBiZSBhIHBvdGVudGlhbCB1c2VyIHJlc2VhcmNoIHBhcnRpY2lwYW50PC9hPgogICAgPC9wPgogIDwvZGl2Pgo8L2Rpdj4KICAKCgogICAgPGRpdiBpZD0iZ2xvYmFsLWhlYWRlci1iYXIiPjwvZGl2PgoKICAgIAogICAgCiAgICAKICAKICAKICAgIDxkaXYgaWQ9Imdsb2JhbC1icmVhZGNydW1iIiBjbGFzcz0iaGVhZGVyLWNvbnRleHQiPgogIDxuYXY+CiAgICA8b2wgY2xhc3M9Imdyb3VwIiByb2xlPSJicmVhZGNydW1icyI+CiAgICAgICAgPGxpPjxhIGhyZWY9Ii8iPkRpZ2l0YWwgTWFya2V0cGxhY2U8L2E+PC9saT4KICAgICAgICAKICAgICAgCiAgICAgICAgPGxpPjxhIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzIj5TdXBwbGllciBvcHBvcnR1bml0aWVzPC9hPjwvbGk+CiAgICAgICAgCiAgICAgIAogICAgPC9vbD4KICA8L25hdj4KPC9kaXY+CiAgCgogIDxkaXYgaWQ9IndyYXBwZXIiPgogICAgPG1haW4gaWQ9ImNvbnRlbnQiIHJvbGU9Im1haW4iPgogICAgICAKICAKCiAgICAgIAoKCgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLXR3by10aGlyZHMiPgogICAgPGhlYWRlciBjbGFzcz0icGFnZS1oZWFkaW5nLXNtYWxsZXIiPgogICAgICA8c3BhbiBjbGFzcz0iZ292dWstY2FwdGlvbi1sIj5OYXRpb25hbCBJbmZyYXN0cnVjdHVyZSBDb21taXNzaW9uPC9zcGFuPgogICAgICA8aDEgY2xhc3M9ImdvdnVrLWhlYWRpbmctbCI+TmF0aW9uYWwgSW5mcmFzdHJ1Y3R1cmUgQ29tbWlzc2lvbiDigJMgWW91bmcgUHJvZmVzc2lvbmFscyBQYW5lbCAgd2Vic2l0ZSBwbGF0Zm9ybTwvaDE+CiAgICAgIDxzcGFuIGRhdGEtbG90PSJkaWdpdGFsLW91dGNvbWVzIj48L3NwYW4+CiAgICA8L2hlYWRlcj4KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKCjxkaXYgY2xhc3M9InN0YXRpc3RpYy1jb250YWluZXIiIGlkPSJpbmNvbXBsZXRlLWFwcGxpY2F0aW9ucyI+CiAgICA8aDMgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+SW5jb21wbGV0ZSBhcHBsaWNhdGlvbnM8L2gzPgogICAgPGRpdiBjbGFzcz0iYmlnLXN0YXRpc3RpYyI+MTg8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InN0YXRpc3RpYy1uYW1lIj5JbmNvbXBsZXRlIGFwcGxpY2F0aW9uczwvZGl2PgogICAgCiAgICAgIDxkaXYgY2xhc3M9InN0YXRpc3RpYy1kZXNjcmlwdGlvbiI+MTcgU01FLCAxIGxhcmdlPC9kaXY+CiAgICAKICA8L2Rpdj4KPGRpdiBjbGFzcz0ic3RhdGlzdGljLWNvbnRhaW5lciIgaWQ9ImNvbXBsZXRlZC1hcHBsaWNhdGlvbnMiPgogICAgPGgzIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPkNvbXBsZXRlZCBhcHBsaWNhdGlvbnM8L2gzPgogICAgPGRpdiBjbGFzcz0iYmlnLXN0YXRpc3RpYyI+MDwvZGl2PgogICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLW5hbWUiPkNvbXBsZXRlZCBhcHBsaWNhdGlvbnM8L2Rpdj4KICAgIAogIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tb25lLXdob2xlIj4KICAgIAoKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgSW1wb3J0YW50IGRhdGVzCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UHVibGlzaGVkPC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+RnJpZGF5IDYgRGVjZW1iZXIgMjAxOTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5GcmlkYXkgMTMgRGVjZW1iZXIgMjAxOSBhdCAxMTo1OXBtIEdNVDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+Q2xvc2luZyBkYXRlIGZvciBhcHBsaWNhdGlvbnM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5GcmlkYXkgMjAgRGVjZW1iZXIgMjAxOSBhdCAxMTo1OXBtIEdNVDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTEiPgogICAgICAKICAgICAgT3ZlcnZpZXcKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIE92ZXJ2aWV3CiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5TdW1tYXJ5IG9mIHRoZSB3b3JrPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Qcm9jdXJlbWVudCB0byBjcmVhdGUgYSBvbmxpbmUgaW50ZXJhY3RpdmUgcGxhdGZvcm0gdG8gc3VtbWFyaXNlIHRoZSBmaW5kaW5ncyBvZiB0aGUgTmF0aW9uYWwgSW5mcmFzdHJ1Y3R1cmVzIENvbW1pc3Npb24mIzM5O3MgWW91bmcgUHJvZmVzc2lvbmFsJiMzOTtzIFBhbmVsIHdvcmsgb24gICYjMzk7R2VuZXJhdGlvbmFsIFNoaWZ0IGluIEluZnJhc3RydWN0dXJlLiYjMzk7PGJyPjxicj5UaGVyZSBtYXkgYmUgYW4gb3B0aW9uIHRvIGV4dGVuZCB0aGUgY29udHJhY3Qgc28gdGhhdCB0aGUgc3VwcGxpZXIgYWxzbyBob3N0cyB0aGUgd2Vic2l0ZS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5MYXRlc3Qgc3RhcnQgZGF0ZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+TW9uZGF5IDYgSmFudWFyeSAyMDIwPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RXhwZWN0ZWQgY29udHJhY3QgbGVuZ3RoPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj4xNCBXZWVrczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkxvY2F0aW9uPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkxvbmRvbjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPk9yZ2FuaXNhdGlvbiB0aGUgd29yayBpcyBmb3I8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk5hdGlvbmFsIEluZnJhc3RydWN0dXJlIENvbW1pc3Npb248L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5CdWRnZXQgcmFuZ2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPsKjMzAsMDAwPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0yIj4KICAgICAgCiAgICAgIEFib3V0IHRoZSB3b3JrCiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBBYm91dCB0aGUgd29yawogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V2h5IHRoZSB3b3JrIGlzIGJlaW5nIGRvbmU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSBvdXRwdXQgcmVxdWlyZW1lbnQgb2YgYWxsIHdvcmsgdW5kZXJ0YWtlbiBieSB0aGUgTklDIFlQUCBpcyB0byBzdXBwb3J0IHRoZSBOSUMmIzM5O3MgYWltcyB0byBiZSAmIzM0O3RoZSBVS+KAmXMgbW9zdCBjcmVkaWJsZSwgZm9yd2FyZC10aGlua2luZyBhbmQgaW5mbHVlbnRpYWwgdm9pY2Ugb24gaW5mcmFzdHJ1Y3R1cmUgcG9saWN5IGFuZCBzdHJhdGVneSYjMzQ7LiBUaGUgcHJvZHVjdGlvbiBvZiBhIG5vdmVsIGludGVyYWN0aXZlIHBsYXRmb3JtIHdpbGwgc3VwcG9ydCB0aG9zZSBhaW1zIGJ5OiA8YnI+MSkgUHJvZHVjaW5nIHRoZSBjb250ZW50IG9mIGEgcmVwb3J0IHdpdGggcmVzZWFyY2ggYW5kIG9waW5pb25zIGZyb20gYSBicm9hZCByYW5nZSBvZiBpbmR1c3RyeSB5b3VuZyBwcm9mZXNzaW9uYWxzIGluIHNpbXBsZSBub24tdGVjaG5pY2FsIChhbmQgbm9uLWphcmdvbikgbGFuZ3VhZ2UgdGhhdCBpcyBhY2Nlc3NpYmxlIHRvIGEgYnJvYWQgcmFuZ2Ugb2YgYXVkaWVuY2VzOyA8YnI+MikgQmVpbmcgYW4gaW5ub3ZhdGl2ZSBhcHByb2FjaCB0b3dhcmRzIGtub3dsZWRnZSBkaXNzZW1pbmF0aW9uIGZvciB0aGUgTklDOyBhbmQsICBhbmQ8YnI+MykgQnJvYWRlbmluZyB0aGUgdm9pY2Ugb2YgdGhlIE5JQywgaXRzIGF1ZGllbmNlIGFuZCBlbmdhZ2VtZW50IOKAkyBhbGxvd2luZyB3b3JrIHRvIGJlIHJldmlld2VkIGFjcm9zcyBzb2NpZXR5IGFuZCBieSBhbGwuIDxicj48YnI+VGhlIHdlYnNpdGUgd2lsbCBuZWVkIHRvIGdvIGxpdmUgaW4gdGhlIHcvYyAyMC8wNC8yMDIwPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UHJvYmxlbSB0byBiZSBzb2x2ZWQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkluIHRoZSBjdXJyZW50IHRpbWVzLCBpbmRpdmlkdWFscyBzdWZmZXIgZnJvbSAmIzM0O2luZm9ybWF0aW9uIG92ZXJsb2FkJiMzNDsg4oCTIHdlIHJlY2VpdmUgbXVsdGlwbGUgZS1tYWlscywgbGlua3MgYW5kIG1hdGVyaWFsIHRvIHJldmlldy4gT25seSBhIHZlcnkgc21hbGwgcHJvcG9ydGlvbiBvZiB0aGF0IG1hdGVyaWFsIGlzIHJlYWQsIGV2ZW4gYnkgdGVjaG5pY2FsIGV4cGVydHMgaW4gdGhlaXIgc3BlY2lmaWMgZmllbGQgb2Yga25vd2xlZGdlLiBPZiBrZXkgaW1wb3J0YW5jZSB0aGVyZWZvcmUgdG8gdGhlIFlQUCBpcyBlbmdhZ2VtZW50IHRvIHRoZSAmIzM0O25ldyBnZW5lcmF0aW9uJiMzNDssIGJ5IGdldHRpbmcgZW5nYWdlbWVudCBvbiB0aGUgdG9waWMgb2YgaW5mcmFzdHJ1Y3R1cmUgYW5kIGFsbG93aW5nIGEgY29tbXVuaWNhdGl2ZSBkaWFsb2d1ZSB0aGF0IGVmZmVjdHMgYSBuZXcgY29udmVyc2F0aW9uIHJlZ2FyZGluZyBpbmZyYXN0cnVjdHVyZSBhbmQgd2hhdCBpdCBtZWFucyBpbiBzb2NpZXR5LiA8YnI+PGJyPklmIHRoZSBZUFAgd2VyZSB0byBwcm9kdWNlIGEgd3JpdHRlbiByZXBvcnQgYXMgYSByZXN1bHQgb2YgaXRzIG1vbnRocyBvZiByZXNlYXJjaCwgaXQgd291bGQgKGEpIGJlIGVudGlyZWx5IGNvbnRyYXJ5IHRvIHRoZSBvdXRwdXQgb2YgdGhhdCByZXNlYXJjaCBhbmQgdGhlIHdheSBpdCBzaG91bGQgJiMzNDtyZWFkJiMzNDsgdG8gdGhlIHB1YmxpYzsgYW5kIChiKSB3b3VsZCBub3QgYmUgcmVhZCBieSB0aG9zZSB0aGUgcmVwb3J0IGlzIOKAkyBpbiBwYXJ0IOKAkyB0cnlpbmcgdG8gcmVhY2guIDxicj48YnI+VGhlIFlQUCBleGlzdHMgYXMgYSBuZXcgYW5kIGNvbXBsZW1lbnRhcnkgdm9pY2UgdG8gdGhlIE5JQyB0byBleHByZXNzIHZpZXdzIHJlZ2FyZGluZyBpbmZyYXN0cnVjdHVyZSBhbmQgaXRzIGltcG9ydGFuY2UgaW4gdGhlIFVLLiBPZmZlcmluZyBhIG5ldyBhbmQgZGlmZmVyZW50IHBsYXRmb3JtIG9uIHdoaWNoIHRvIHZvaWNlIGFuZCBleHByZXNzIHRlY2huaWNhbCBjb25jZXB0cyBlbnN1cmVzIGEgd2lkZXIgcHVibGljIGF1ZGllbmNlIGFuZCBiZW5lZml0Ljwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPldobyB0aGUgdXNlcnMgYXJlIGFuZCB3aGF0IHRoZXkgbmVlZCB0byBkbzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+QXMgYSB2aXNpdG9yIHRvIHRoZSBwbGF0Zm9ybSBJIG5lZWQgdG8gZXhwbG9yZSB0aGUgZmluZGluZ3Mgb2YgdGhlIFlQUCYjMzk7cyB3b3JrLCAgIDxicj5zbyB0aGF0IEkgY2FuIHVuZGVyc3RhbmQgdGhlIGZpbmRpbmdzIG9mIHRoZWlyIHJlc2VhcmNoLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkVhcmx5IG1hcmtldCBlbmdhZ2VtZW50PC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Ob25lPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QW55IHdvcmsgdGhhdOKAmXMgYWxyZWFkeSBiZWVuIGRvbmU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RXhpc3RpbmcgdGVhbTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlIE5JQyYjMzk7cyBZb3VuZyBQcm9mZXNzaW9uYWxzIFBhbmVsIGlzIG1hZGUgdXAgb2YgMTYgcHJvZmVzc2lvbmFscyBmcm9tIGFjcm9zcyB0aGUgaW5kdXN0cnkgdG8gcHJvdmlkZSBhIGZyZXNoIHZpZXcgb24gdGhlIE5JQyYjMzk7cyB3b3JrLjxicj48YnI+VGhlIFlQUCBoYXZlIGNyZWF0ZWQgdGhlIGNvbnRlbnQgZm9yIHRoZSBpbnRlcmFjdGl2ZSBwbGF0Zm9ybS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5DdXJyZW50IHBoYXNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk5vdCBzdGFydGVkPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0zIj4KICAgICAgCiAgICAgIFdvcmsgc2V0dXAKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIFdvcmsgc2V0dXAKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZHJlc3Mgd2hlcmUgdGhlIHdvcmsgd2lsbCB0YWtlIHBsYWNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5TdXBwbGllciB0byB3b3JrIHdpdGhpbiBvd24gbG9jYXRpb24uPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V29ya2luZyBhcnJhbmdlbWVudHM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRlYW0gdG8gd29yayBvZmZzaXRlPGJyPldlZWtseSBjYXRjaCB1cHMgd2l0aCBOSUMgcHJvamVjdCBtYW5hZ2VyIG9uIGEgd2Vla2x5IGJhc2lzLiA8YnI+Tm8gRXhwZW5zZXMgaW5jbHVkZWQgd2l0aGluIHByb2N1cmVtZW50Ljwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlNlY3VyaXR5IGNsZWFyYW5jZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTQiPgogICAgICAKICAgICAgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QWRkaXRpb25hbCB0ZXJtcyBhbmQgY29uZGl0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+U3RhbmRhcmQgY29uZGl0aW9ucy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTUiPgogICAgICAKICAgICAgU2tpbGxzIGFuZCBleHBlcmllbmNlCiAgPC9oMj4KICAgICAKICAgICAgICA8cD48cCBjbGFzcz0ic3VtbWFyeS1pdGVtLWRlc2NyaXB0aW9uIj4KICAgIEJ1eWVycyB3aWxsIHVzZSB0aGUgZXNzZW50aWFsIGFuZCBuaWNlLXRvLWhhdmUgc2tpbGxzIGFuZCBleHBlcmllbmNlIHRvIGhlbHAgdGhlbSBldmFsdWF0ZSBzdXBwbGllcnPigJkgdGVjaG5pY2FsIGNvbXBldGVuY2UuCiAgPC9wPjwvcD4KICAgICAKICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBTa2lsbHMgYW5kIGV4cGVyaWVuY2UKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkVzc2VudGlhbCBza2lsbHMgYW5kIGV4cGVyaWVuY2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PHVsPgogICAgCiAgICAgIDxsaT5FeHBlcmllbmNlIG9mIGRlbGl2ZXJpbmcgcHVibGljIGZhY2luZyB3ZWJzaXRlcywgcHJlZmVyYWJseSB3aXRoIHRoZSBzcGVjaWZpZWQgdGFyZ2V0IGF1ZGllbmNlczwvbGk+CiAgICAKICAgICAgPGxpPlZpc3VhbCBjb250ZW50IHByb2R1Y3Rpb24gZXhwZXJpZW5jZSwgcHJlZmVyYWJseSB3aXRoIHJlbGV2YW5jZSB0byB0aGUgc2NvcGU8L2xpPgogICAgCiAgICAgIDxsaT5Db3B5d3JpdGluZyBhbmQgZ3JhcGhpYyBkZXNpZ24gY2FwYWJpbGl0eSBhbmQgdXNlIG9mIHN0b2NrIGltYWdlczwvbGk+CiAgICAKICAgICAgPGxpPlVzZXIgY2VudGVyZWQgZGVzaWduIGV4cGVyaWVuY2UuIE11c3QgaGF2ZSBleHBlcmllbmNlIGluIGRlbGl2ZXJpbmcgYXQgbGVhc3QgdGhyZWUgc2ltaWxhciBwcm9qZWN0czwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPk5pY2UtdG8taGF2ZSBza2lsbHMgYW5kIGV4cGVyaWVuY2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTYiPgogICAgICAKICAgICAgSG93IHN1cHBsaWVycyB3aWxsIGJlIGV2YWx1YXRlZAogIDwvaDI+CiAgICAgCiAgICAgICAgPHA+QWxsIHN1cHBsaWVycyB3aWxsIGJlIGFza2VkIHRvIHByb3ZpZGUgYSB3cml0dGVuIHByb3Bvc2FsLjwvcD4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBIb3cgc3VwcGxpZXJzIHdpbGwgYmUgZXZhbHVhdGVkCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Ib3cgbWFueSBzdXBwbGllcnMgdG8gZXZhbHVhdGU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjEwPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UHJvcG9zYWwgY3JpdGVyaWE8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PHVsPgogICAgCiAgICAgIDxsaT5UZWNobmljYWwgc29sdXRpb248L2xpPgogICAgCiAgICAgIDxsaT5BcHByb2FjaCBhbmQgbWV0aG9kb2xvZ3k8L2xpPgogICAgCiAgICAgIDxsaT5UZWFtIHN0cnVjdHVyZTwvbGk+CiAgICAKICAgICAgPGxpPlZhbHVlIGZvciBtb25leTwvbGk+CiAgICAKICAgICAgPGxpPkV4cGVyaWVuY2UgaW4gZGVsaXZlcmluZyBwcmV2aW91cyBwcm9qZWN0czwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkN1bHR1cmFsIGZpdCBjcml0ZXJpYTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPldvcmsgYXMgYSB0ZWFtIHdpdGggb3VyIG9yZ2FuaXNhdGlvbiBhbmQgb3RoZXIgc3VwcGxpZXJzPC9saT4KICAgIAogICAgICA8bGk+QmUgdHJhbnNwYXJlbnQgYW5kIGNvbGxhYm9yYXRpdmUgd2hlbiBtYWtpbmcgZGVjaXNpb25zPC9saT4KICAgIAogICAgICA8bGk+Q2hhbGxlbmdlIHRoZSBzdGF0dXMgcXVvPC9saT4KICAgIAogIDwvdWw+CiAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UGF5bWVudCBhcHByb2FjaDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5GaXhlZCBwcmljZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZGl0aW9uYWwgYXNzZXNzbWVudCBtZXRob2RzPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldvcmsgaGlzdG9yeTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV2YWx1YXRpb24gd2VpZ2h0aW5nPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJtdWx0aXF1ZXN0aW9uIj4KICAgICAgICAgIDxwPlRlY2huaWNhbCBjb21wZXRlbmNlPC9wPgogICAgICAgICAgPGRpdj41MCU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5DdWx0dXJhbCBmaXQ8L3A+CiAgICAgICAgICA8ZGl2PjEwJTwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAKICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJtdWx0aXF1ZXN0aW9uIj4KICAgICAgICAgIDxwPlByaWNlPC9wPgogICAgICAgICAgPGRpdj40MCU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLW9uZS13aG9sZSI+CiAgICAKCgoKPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9ImNsYXJpZmljYXRpb24tcXVlc3Rpb25zIj4KICAgICAgCiAgICAgIFF1ZXN0aW9ucyBhc2tlZCBieSBzdXBwbGllcnMKICA8L2gyPgoKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgUXVlc3Rpb25zIGFza2VkIGJ5IHN1cHBsaWVycwogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+U3VwcGxpZXIgcXVlc3Rpb248L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5CdXllciBhbnN3ZXI8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4xLjwvc3Bhbj4KICAgICAgSGkuIFlvdSBhc2sgZm9yIGV4cGVyaWVuY2Ugb2YgZGVsaXZlcmluZyBwdWJsaWMgZmFjaW5nIHdlYnNpdGVzLCBwcmVmZXJhYmx5IHdpdGggdGhlIHNwZWNpZmllZCB0YXJnZXQgYXVkaWVuY2VzLCBidXQgZG9uJiMzOTt0IGFjdHVhbGx5IHNwZWNpZnkgdGhlIHRhcmdldCBhdWRpZW5jZS4gV2hhdCBhcmUgeW91ciBhdWRpZW5jZXM/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlIHBsYXRmb3JtIGhhcyB0d28ga2V5IHRhcmdldCBhdWRpZW5jZXM6PGJyPjEuIG1pbGxlbm5pYWxzIGFuZCBHZW5lcmF0aW9uIFogd2hvIGFyZSB0aGUgbGVhc3QgcmVwcmVzZW50ZWQgaW4gaW5mcmFzdHJ1Y3R1cmUgZGViYXRlcywgYW5kIDxicj4yLiBpbmZyYXN0cnVjdHVyZSBwcm9mZXNzaW9uYWxzIC9kZWNpc2lvbiBtYWtlcnMuIDxicj48YnI+RXhwZXJpZW5jZSBpbiBlbmdhZ2luZyB3aXRoIGJvdGggdGhlc2UgYXVkaWVuY2VzIGlzIHByZWZlcnJlZC48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCgogIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvc3VwcGxpZXJzL29wcG9ydHVuaXRpZXMvMTEyNDEvYXNrLWEtcXVlc3Rpb24iPgogICAgCiAgICAgIExvZyBpbiB0byBhc2sgYSBxdWVzdGlvbgogICAgCiAgPC9hPgoKICA8L2Rpdj4KPC9kaXY+CgoKICA8YnIvPjwhLS0gPC0gcmVtb3ZlIG9uY2UgZ3JpZCBhbmQgYm9keSBlbGVtZW50cyBoYXZlIGJlZW4gY29udmVydGVkIHRvIGdvdnVrIGZyb250ZW5kIC0tPgogIDxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbHVtbi10d28tdGhpcmRzIj4KICAgICAgPGZvcm0gYWN0aW9uPSIvc3VwcGxpZXJzL29wcG9ydHVuaXRpZXMvMTEyNDEvcmVzcG9uc2VzL3N0YXJ0IiBtZXRob2Q9ImdldCI+CiAgICAgICAgCiAgCiAgICAKICAKCjxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iZ292dWstYnV0dG9uIj4KICBBcHBseSBmb3IgdGhpcyBvcHBvcnR1bml0eQo8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgPC9kaXY+CiAgPC9kaXY+CgoKCiAgICA8L21haW4+CiAgPC9kaXY+CgoKICAgIDxmb290ZXIgY2xhc3M9Imdyb3VwIGpzLWZvb3RlciIgaWQ9ImZvb3RlciIgcm9sZT0iY29udGVudGluZm8iPgoKICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXdyYXBwZXIiPgogICAgICAgIAogIDxkaXYgY2xhc3M9ImZvb3Rlci1jYXRlZ29yaWVzIj4KICA8ZGl2IGNsYXNzPSJmb290ZXItYWJvdXQiPgogICAgPGgyPgogICAgICBDb250YWN0CiAgICA8L2gyPgogICAgPHVsPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iL2hlbHAiPkRpZ2l0YWwgTWFya2V0cGxhY2UgaGVscDwvYT4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWJ1eWVycyI+CiAgICA8aDI+CiAgICAgIEFib3V0IHRoZSBEaWdpdGFsIE1hcmtldHBsYWNlCiAgICA8L2gyPgogICAgPHVsPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2UtYnV5ZXJzLWd1aWRlIj5TZXJ2aWNlcyB5b3UgY2FuIGJ1eTwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLXN1cHBsaWVycy1ndWlkZSI+U2VydmljZXMgeW91IGNhbiBzZWxsPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9jcm93bi1jb21tZXJjaWFsLXNlcnZpY2UiPkFib3V0IENyb3duIENvbW1lcmNpYWwgU2VydmljZTwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvZ292ZXJubWVudC1kaWdpdGFsLXNlcnZpY2UiPkFib3V0IEdvdmVybm1lbnQgRGlnaXRhbCBTZXJ2aWNlPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iL2ctY2xvdWQvc3VwcGxpZXJzIj5HLUNsb3VkIHN1cHBsaWVyIEHigJNaPC9hPgogICAgICA8L2xpPgogICAgPC91bD4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJmb290ZXItc3VwcGxpZXJzIj4KICAgIDxoMj4KICAgICAgICBHdWlkYW5jZQogICAgPC9oMj4KICAgIDx1bD4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLXN1cHBsaWVycy1ndWlkZSI+QXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc3VwcGxpZXJzLWd1aWRlIj5BcHBseWluZyB0byBzZWxsIG9uIHRoZSBEaWdpdGFsIE91dGNvbWVzIGFuZCBTcGVjaWFsaXN0cyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvaG93LXRvLXNlbGwteW91ci1kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zZXJ2aWNlcyI+UmVzcG9uZGluZyB0byBidXllciByZXF1aXJlbWVudHMgb24gdGhlIERpZ2l0YWwgT3V0Y29tZXMgYW5kIFNwZWNpYWxpc3RzIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLWJ1eWVycy1ndWlkZSI+QnV5aW5nIG9uIHRoZSBHLUNsb3VkIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1idXllcnMtZ3VpZGUiPkJ1eWluZyBvbiB0aGUgRGlnaXRhbCBPdXRjb21lcyBhbmQgU3BlY2lhbGlzdHMgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL3RoZS1jcm93bi1ob3N0aW5nLWRhdGEtY2VudHJlcy1mcmFtZXdvcmstb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPkJ1eWluZyBvbiB0aGUgQ3Jvd24gSG9zdGluZyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgogIDxoci8+CjwvZGl2PgoKCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLW1ldGEiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLW1ldGEtaW5uZXIiPgogICAgICAgICAgICAKICAgIDxoMiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPlN1cHBvcnQgbGlua3M8L2gyPgogICAgPHVsPgogICAgICAgIDxsaT48YSBocmVmPSIvdGVybXMtYW5kLWNvbmRpdGlvbnMiIGNsYXNzPSJ0ZXJtcy1hbmQtY29uZGl0aW9ucyI+VGVybXMgYW5kIGNvbmRpdGlvbnM8L2E+PC9saT4KICAgICAgICA8bGk+PGEgaHJlZj0iL2Nvb2tpZXMiPkNvb2tpZXM8L2E+PC9saT4KICAgICAgICA8bGk+PGEgaHJlZj0iL3ByaXZhY3ktbm90aWNlIj5Qcml2YWN5IG5vdGljZTwvYT48L2xpPgogICAgICAgIDxsaT5CdWlsdCBieSB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSI+R292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2U8L2E+PC9saT4KICAgIDwvdWw+CgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ib3Blbi1nb3Zlcm5tZW50LWxpY2VuY2UiPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJsb2dvIj48YSBocmVmPSJodHRwczovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9kb2Mvb3Blbi1nb3Zlcm5tZW50LWxpY2VuY2UvdmVyc2lvbi8zLyIgcmVsPSJsaWNlbnNlIj5PcGVuIEdvdmVybm1lbnQgTGljZW5jZTwvYT48L3A+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8cD5BbGwgY29udGVudCBpcyBhdmFpbGFibGUgdW5kZXIgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIiByZWw9ImxpY2Vuc2UiPk9wZW4gR292ZXJubWVudCBMaWNlbmNlIHYzLjA8L2E+LCBleGNlcHQgd2hlcmUgb3RoZXJ3aXNlIHN0YXRlZDwvcD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb3B5cmlnaHQiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2luZm9ybWF0aW9uLW1hbmFnZW1lbnQvcmUtdXNpbmctcHVibGljLXNlY3Rvci1pbmZvcm1hdGlvbi9jb3B5cmlnaHQtYW5kLXJlLXVzZS9jcm93bi1jb3B5cmlnaHQvIj4mY29weTsgQ3Jvd24gY29weXJpZ2h0PC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9mb290ZXI+CgogICAgPGRpdiBpZD0iZ2xvYmFsLWFwcC1lcnJvciIgY2xhc3M9ImFwcC1lcnJvciBoaWRkZW4iPjwvZGl2PgoKICAgIDxzY3JpcHQgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2dvdnVrLXRlbXBsYXRlLmpzPzAuMTkuMiI+PC9zY3JpcHQ+CgogICAgCiAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3N0YXRpYy9qYXZhc2NyaXB0cy9hcHBsaWNhdGlvbi5qcz9mODRiZWExMzFiYjg4Y2NiYThkOWFkZDA0NDdiOTU0YiI+PC9zY3JpcHQ+CiAgCgoKICAgIAogICAgPHNjcmlwdD5pZiAodHlwZW9mIHdpbmRvdy5HT1ZVSyA9PT0gJ3VuZGVmaW5lZCcpIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUucmVwbGFjZSgnanMtZW5hYmxlZCcsICcnKTs8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4=
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:18 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11348
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjg.NJ6v3-dma2R5e3WE4r1J90jwepU
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36358'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:18 GMT
      Dm-Request-Id:
      - e68fd84a3e3aeddc
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:18 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjg.NJ6v3-dma2R5e3WE4r1J90jwepU;
        Expires=Tue, 10-Dec-2019 11:57:18 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - e68fd84a3e3aeddc
      X-B3-Traceid:
      - e68fd84a3e3aeddc
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 5a0ec486-bae1-4ccb-60f6-00d01aef837b
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 2f4e5a72eeac30e4d9491781ea4482a8.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - 8V5uoxVGpKgJTRJ-kmSECdGjLJH9zVILT7y5W4t4rtZA2OMnBwJwzw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPCEtLVtpZiBsdCBJRSA5XT48aHRtbCBjbGFzcz0ibHRlLWllOCIgbGFuZz0iZW4iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGh0bWwgbGFuZz0iZW4iPjwhLS08IVtlbmRpZl0tLT4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPHRpdGxlPgogIENhbWJyaWRnZSBVbml2ZXJzaXR5IEhvc3BpdGFscyBOSFMgRm91bmRhdGlvbiBUcnVzdCAtIFdlYnNpdGUgcmVkZXZlbG9tZW50IHByb2plY3QgLSBEaWdpdGFsIE1hcmtldHBsYWNlCjwvdGl0bGU+CgogICAgPCEtLVtpZiBndCBJRSA4XT48IS0tPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUuY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhLS08IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgSUUgNl0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1pZTYuY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA3XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2dvdnVrLXRlbXBsYXRlLWllNy5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIElFIDhdPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtaWU4LmNzcz8wLjE5LjIiIG1lZGlhPSJzY3JlZW4iIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtcHJpbnQuY3NzPzAuMTkuMiIgbWVkaWE9InByaW50IiByZWw9InN0eWxlc2hlZXQiIC8+CgogICAgPCEtLVtpZiBJRSA4XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2ZvbnRzLWllOC5jc3M/MC4xOS4yIiBtZWRpYT0iYWxsIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIGd0ZSBJRSA5XT48IS0tPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZm9udHMuY3NzPzAuMTkuMiIgbWVkaWE9ImFsbCIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhLS08IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgbHQgSUUgOV0+PHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvaWUuanM/MC4xOS4yIj48L3NjcmlwdD48IVtlbmRpZl0tLT4KCiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2Zhdmljb24uaWNvPzAuMTkuMiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgPGxpbmsgcmVsPSJtYXNrLWljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdi51a19sb2dvdHlwZV9jcm93bi5zdmc/MC4xOS4yIiBjb2xvcj0iIzBiMGMwYyI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxNTJ4MTUyIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nPzAuMTkuMiI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSIxMjB4MTIwIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTEyMHgxMjAucG5nPzAuMTkuMiI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIHNpemVzPSI3Nng3NiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvYXBwbGUtdG91Y2gtaWNvbi03Nng3Ni5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvYXBwbGUtdG91Y2gtaWNvbi02MHg2MC5wbmc/MC4xOS4yIj4KCiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlIiBjb250ZW50PSIvc3RhdGljL2ltYWdlcy9vcGVuZ3JhcGgtaW1hZ2UucG5nPzAuMTkuMiI+CgogICAgCiAgCgoKCgoKCgogIDxtZXRhIG5hbWU9ImdhX2N1c3RvbURpbWVuc2lvbiIgZGF0YS1pZD0iMTIiIGRhdGEtdmFsdWU9IlVzZXIgcmVzZWFyY2ggYmFubmVyIj4KCgoKCgogIDwhLS1baWYgZ3QgSUUgOF0+PCEtLT4KICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ic2NyZWVuIiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLmNzcz8wZjliYTUyMzU2M2Q1MmMzMzZkMWZlMjllNzkwYzNlNSIgLz4KPCEtLTwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJzY3JlZW4iIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24taWU3LmNzcz8zODM4ZTc1YzZiMTg1OTQ4ZTczOTQ3YTliYzJlNTYxMiIgLz4KPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgOF0+CiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9InNjcmVlbiIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi1pZTguY3NzP2EzNzNhYTFiNzM5ZjUzODZkN2E5MDNlZDY4NjJkNmM4IiAvPgo8IVtlbmRpZl0tLT4KICAKICAgIDxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iVEtHU0dabmZIcHgxLWxLT3RoSTE3QU50d2s3ZnozRjRTYnI3N0kwcHBPMCIgLz4KCgogIDwvaGVhZD4KCiAgPGJvZHkgY2xhc3M9IiI+CiAgICA8c2NyaXB0PmRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gKChkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSkgPyBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSArICcganMtZW5hYmxlZCcgOiAnanMtZW5hYmxlZCcpOzwvc2NyaXB0PgoKICAgIAoKICAgIDxkaXYgaWQ9InNraXBsaW5rLWNvbnRhaW5lciI+CiAgICAgIDxkaXY+CiAgICAgICAgPGEgaHJlZj0iI2NvbnRlbnQiIGNsYXNzPSJza2lwbGluayI+U2tpcCB0byBtYWluIGNvbnRlbnQ8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBpZD0iZ2xvYmFsLWNvb2tpZS1tZXNzYWdlIj4KICAgICAgCiAgICAgICAgCiAgPHA+R09WLlVLIHVzZXMgY29va2llcyB0byBtYWtlIHRoZSBzaXRlIHNpbXBsZXIuIDxhIGhyZWY9Ii9jb29raWVzIj5GaW5kIG91dCBtb3JlIGFib3V0IGNvb2tpZXM8L2E+PC9wPgoKCiAgICAgIAogICAgPC9kaXY+CgogICAgCiAgICA8aGVhZGVyIHJvbGU9ImJhbm5lciIgaWQ9Imdsb2JhbC1oZWFkZXIiIGNsYXNzPSJ3aXRoLXByb3Bvc2l0aW9uIj4KICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLXdyYXBwZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlci1nbG9iYWwiPgogICAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWxvZ28iPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsiIHRpdGxlPSJHbyB0byB0aGUgR09WLlVLIGhvbWVwYWdlIiBpZD0ibG9nbyIgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIvc3RhdGljL2ltYWdlcy9nb3YudWtfbG9nb3R5cGVfY3Jvd25faW52ZXJ0X3RyYW5zLnBuZz8wLjE5LjIiIHdpZHRoPSIzNiIgaGVpZ2h0PSIzMiIgYWx0PSIiPiBHT1YuVUsKICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJoZWFkZXItdGl0bGUiPgogICAgPGEgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT4KICAgIDxzdHJvbmcgY2xhc3M9InBoYXNlLXRhZyI+QkVUQTwvc3Ryb25nPgo8L2Rpdj4KCiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgPGRpdiBjbGFzcz0iaGVhZGVyLXByb3Bvc2l0aW9uIj4KICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgIDxhIGhyZWY9IiNwcm9wb3NpdGlvbi1saW5rcyIgY2xhc3M9ImpzLWhlYWRlci10b2dnbGUgbWVudSI+TWVudTwvYT4KICAgIDxuYXYgaWQ9InByb3Bvc2l0aW9uLW1lbnUiPgogICAgICA8dWwgaWQ9InByb3Bvc2l0aW9uLWxpbmtzIj4KICAgICAgICA8bGk+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvYnV5aW5nLWFuZC1zZWxsaW5nLW9uLXRoZS1kaWdpdGFsLW1hcmtldHBsYWNlIj5HdWlkYW5jZTwvYT4KICAgICAgICA8L2xpPgogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii9oZWxwIj5IZWxwPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgCgogICAgICAgIAogICAgICAgICAgCiAgICAgICAgCgogICAgICAgIAogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Ii91c2VyL2xvZ2luIj5Mb2cgaW48L2E+CiAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgPC91bD4KICAgIDwvbmF2PgogIDwvZGl2Pgo8L2Rpdj4KCiAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CiAgICAKCiAgICAKICAKICAKICAKCiAgCiAgICA8ZGl2IGNsYXNzPSJ1c2VyLXJlc2VhcmNoLWJhbm5lciI+CiAgPGRpdiBjbGFzcz0id3JhcHBlciI+CiAgICA8cD4KICAgICAgPHN0cm9uZyBjbGFzcz0iYmFubmVyLWhlYWRpbmciPkhlbHAgdXMgaW1wcm92ZSB0aGUgRGlnaXRhbCBNYXJrZXRwbGFjZTwvc3Ryb25nPgogICAgICA8YSAKICAgICAgICBocmVmPSIjIiAKICAgICAgICBjbGFzcz0idXNlci1yZXNlYXJjaC1iYW5uZXItY2xvc2UtYnRuIgogICAgICAgIGRhdGEtYW5hbHl0aWNzPSJ0cmFja0V2ZW50IgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWNhdGVnb3J5PSJ1c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iQ2xvc2UgYmFubmVyIgogICAgICA+Q2xvc2U8L2E+CiAgICA8L3A+CiAgICA8cD4KICAgICAgPGEgCiAgICAgICAgaHJlZj0iL3VzZXIvbm90aWZpY2F0aW9ucy91c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzPSJ0cmFja0V2ZW50IgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWNhdGVnb3J5PSJ1c2VyLXJlc2VhcmNoIgogICAgICAgIGRhdGEtYW5hbHl0aWNzLWFjdGlvbj0iVmlldyBzaWduIHVwIHRvIHVzZXIgcmVzZWFyY2ggc2NyZWVuIgogICAgICA+U2lnbiB1cCB0byBiZSBhIHBvdGVudGlhbCB1c2VyIHJlc2VhcmNoIHBhcnRpY2lwYW50PC9hPgogICAgPC9wPgogIDwvZGl2Pgo8L2Rpdj4KICAKCgogICAgPGRpdiBpZD0iZ2xvYmFsLWhlYWRlci1iYXIiPjwvZGl2PgoKICAgIAogICAgCiAgICAKICAKICAKICAgIDxkaXYgaWQ9Imdsb2JhbC1icmVhZGNydW1iIiBjbGFzcz0iaGVhZGVyLWNvbnRleHQiPgogIDxuYXY+CiAgICA8b2wgY2xhc3M9Imdyb3VwIiByb2xlPSJicmVhZGNydW1icyI+CiAgICAgICAgPGxpPjxhIGhyZWY9Ii8iPkRpZ2l0YWwgTWFya2V0cGxhY2U8L2E+PC9saT4KICAgICAgICAKICAgICAgCiAgICAgICAgPGxpPjxhIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzIj5TdXBwbGllciBvcHBvcnR1bml0aWVzPC9hPjwvbGk+CiAgICAgICAgCiAgICAgIAogICAgPC9vbD4KICA8L25hdj4KPC9kaXY+CiAgCgogIDxkaXYgaWQ9IndyYXBwZXIiPgogICAgPG1haW4gaWQ9ImNvbnRlbnQiIHJvbGU9Im1haW4iPgogICAgICAKICAKCiAgICAgIAoKCgo8ZGl2IGNsYXNzPSJncmlkLXJvdyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uLXR3by10aGlyZHMiPgogICAgPGhlYWRlciBjbGFzcz0icGFnZS1oZWFkaW5nLXNtYWxsZXIiPgogICAgICA8c3BhbiBjbGFzcz0iZ292dWstY2FwdGlvbi1sIj5DYW1icmlkZ2UgVW5pdmVyc2l0eSBIb3NwaXRhbHMgTkhTIEZvdW5kYXRpb24gVHJ1c3Q8L3NwYW4+CiAgICAgIDxoMSBjbGFzcz0iZ292dWstaGVhZGluZy1sIj5DYW1icmlkZ2UgVW5pdmVyc2l0eSBIb3NwaXRhbHMgTkhTIEZvdW5kYXRpb24gVHJ1c3QgLSBXZWJzaXRlIHJlZGV2ZWxvbWVudCBwcm9qZWN0PC9oMT4KICAgICAgPHNwYW4gZGF0YS1sb3Q9ImRpZ2l0YWwtb3V0Y29tZXMiPjwvc3Bhbj4KICAgIDwvaGVhZGVyPgogIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tb25lLXdob2xlIj4KICAgIAoKPGRpdiBjbGFzcz0ic3RhdGlzdGljLWNvbnRhaW5lciIgaWQ9ImluY29tcGxldGUtYXBwbGljYXRpb25zIj4KICAgIDxoMyBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5JbmNvbXBsZXRlIGFwcGxpY2F0aW9uczwvaDM+CiAgICA8ZGl2IGNsYXNzPSJiaWctc3RhdGlzdGljIj4yNTwvZGl2PgogICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLW5hbWUiPkluY29tcGxldGUgYXBwbGljYXRpb25zPC9kaXY+CiAgICAKICAgICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLWRlc2NyaXB0aW9uIj4yMSBTTUUsIDQgbGFyZ2U8L2Rpdj4KICAgIAogIDwvZGl2Pgo8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtY29udGFpbmVyIiBpZD0iY29tcGxldGVkLWFwcGxpY2F0aW9ucyI+CiAgICA8aDMgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+Q29tcGxldGVkIGFwcGxpY2F0aW9uczwvaDM+CiAgICA8ZGl2IGNsYXNzPSJiaWctc3RhdGlzdGljIj4wPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtbmFtZSI+Q29tcGxldGVkIGFwcGxpY2F0aW9uczwvZGl2PgogICAgCiAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImNvbHVtbi1vbmUtd2hvbGUiPgogICAgCgogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBJbXBvcnRhbnQgZGF0ZXMKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5QdWJsaXNoZWQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5GcmlkYXkgNiBEZWNlbWJlciAyMDE5PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5EZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkZyaWRheSAxMyBEZWNlbWJlciAyMDE5IGF0IDExOjU5cG0gR01UPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5DbG9zaW5nIGRhdGUgZm9yIGFwcGxpY2F0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkZyaWRheSAyMCBEZWNlbWJlciAyMDE5IGF0IDExOjU5cG0gR01UPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtMSI+CiAgICAgIAogICAgICBPdmVydmlldwogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgT3ZlcnZpZXcKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlN1bW1hcnkgb2YgdGhlIHdvcms8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlJlZGV2ZWxvcG1lbnQgb2YgdGhlIFRydXN0JiMzOTtzIG1haW4gcHVibGljLWZhY2luZyB3ZWJzaXRlLCBpbmNsdWRpbmc6IGRpc2NvdmVyeSwgZGVzaWduLCBidWlsZCBhbmQgaW1wbGVtZW50YXRpb24gaW4geWVhciBvbmUgYW5kIGhvc3RpbmcsIG1haW50ZW5hbmNlIGFuZCBzdXBwb3J0IGluIHllYXIgdHdvLiBQbHVzIHJvYWQgbWFwIGZvciBpbnRlZ3JhdGlvbiBvZiBUcnVzdCBtaWNybyBzaXRlcyBvbiB0byBhIHNpbmdsZSBwbGF0Zm9ybS48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5MYXRlc3Qgc3RhcnQgZGF0ZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+TW9uZGF5IDE2IE1hcmNoIDIwMjA8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5FeHBlY3RlZCBjb250cmFjdCBsZW5ndGg8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjI0IG1vbnRoczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkxvY2F0aW9uPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk5vIHNwZWNpZmljIGxvY2F0aW9uLCBlZyB0aGV5IGNhbiB3b3JrIHJlbW90ZWx5PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+T3JnYW5pc2F0aW9uIHRoZSB3b3JrIGlzIGZvcjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+Q2FtYnJpZGdlIFVuaXZlcnNpdHkgSG9zcGl0YWxzIE5IUyBGb3VuZGF0aW9uIFRydXN0PC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QnVkZ2V0IHJhbmdlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5VcCB0byAxNTBrIG92ZXIgdGhlIGR1cmF0aW9uIG9mIHRoZSBwcm9qZWN0LiBUbyBpbmNsdWRlIGRlbGl2ZXJ5IG9mIGFsbCByZXF1aXJlbWVudHMgb2YgdGhlIGluaXRpYWwgc2l0ZSBkZXZlbG9wbWVudCwgYW5kIHRoZSBob3N0aW5nLCBtYWludGVuYW5jZSBhbmQgc3VwcG9ydCBvdmVyIHRoZSAyNCBtb250aCBwZXJpb2QuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0yIj4KICAgICAgCiAgICAgIEFib3V0IHRoZSB3b3JrCiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBBYm91dCB0aGUgd29yawogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V2h5IHRoZSB3b3JrIGlzIGJlaW5nIGRvbmU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk91ciB3ZWJzaXRlIGlzIGEga2V5IGNvbW11bmljYXRpb25zIHRvb2wsIG9mdGVuIHRoZSBmaXJzdCBwb2ludCBvZiBjb250YWN0IGZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgVHJ1c3QuIEl0IGlzIGltcG9ydGFudCB0aGF0IHdlIGRlbGl2ZXIgYSByZXNwb25zaXZlIHdlYnNpdGUgdGhhdCBpcyBpbmZvcm1hdGl2ZSwgZWFzeSB0byBuYXZpZ2F0ZSBhbmQgdXNlZnVsIGZvciBwYXRpZW50cyBhbmQgb3RoZXIgc3Rha2Vob2xkZXJzLiA8YnI+PGJyPkl0IG11c3QgYmUgbW9kZXJuLCBlYXN5IHRvIHVuZGVyc3RhbmQgYW5kIGEgY29uc2lzdGVudCBleHBlcmllbmNlIGZvciB0aG9zZSBlbmdhZ2luZyB3aXRoIG91ciBzZXJ2aWNlcyBvbmxpbmUsIGNyZWF0aW5nIGFuIGVudmlyb25tZW50IHRoYXQgYWxsb3dzIGVhc2llciBjb2xsYWJvcmF0aW9uIHdpdGggb3VyIHBlb3BsZSBhbmQgaG9zcGl0YWwuIDxicj48YnI+SXQgbXVzdCBhbHNvIHJlZmxlY3QgdGhlIGVtb3Rpb24gdGhhdCBjb21lcyB3aXRoIHRoZSBob3NwaXRhbCwgcHJvdmlkaW5nIHJlYXNzdXJhbmNlIGJvdGggdG8gcGF0aWVudHMsIGZhbWlsaWVzIGFuZCBjYXJlcnMsIGFuZCBkZWxpdmVyIGEgcm9hZCBtYXAgZm9yIG90aGVyIENhbWJyaWRnZSBVbml2ZXJzaXR5IEhvc3BpdGFscyBOSFMgRm91bmRhdGlvbiBUcnVzdCAoQ1VIKSB3ZWJzaXRlcyB0byBiZSBpbnRlZ3JhdGVkIG9udG8gdGhlIHBsYXRmb3JtIGluIHRoZSBmdXR1cmUuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UHJvYmxlbSB0byBiZSBzb2x2ZWQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk9yaWdpbmFsbHkgbGF1bmNoZWQgaW4gMjAwOCwgaXQgd2FzIGF0IHRoZSB0aW1lIGEgZ29vZCBleGFtcGxlIG9mIGEgY2xlYW4sIHdlbGwtb3JnYW5pc2VkIHdlYnNpdGUgdGhhdCBlbmFibGVkIHRoZSBUcnVzdCB0byBzaG93Y2FzZSB3b3JrIGZyb20gYWNyb3NzIGRlcGFydG1lbnRzIGFsb25nc2lkZSBhY2Nlc3MgdG8gYWR2aWNlIGFuZCBzdXBwb3J0IGNvbnRlbnQuIFRoZSBvcmdhbmljIGdyb3d0aCBoYXMgcmVzdWx0ZWQgaW4gYW4gaW5jb25zaXN0ZW50IGFuZCBjb25mdXNpbmcgZXhwZXJpZW5jZSBmb3Igb3VyIHVzZXIuIDxicj48YnI+V2Ugd2FudCB0byByZWRldmVsb3Agb3VyIHNpdGUgdXNpbmcgb3BlbiBzb3VyY2UgYW5kIG9wZW4gc3RhbmRhcmRzIGluIG9yZGVyIHRvIG9mZmVyIGFuIGltcHJvdmVkIGV4cGVyaWVuY2UgZm9yIG91ciB1c2VycywgaW1wcm92ZWQgcGVyZm9ybWFuY2Ugb24gbXVsdGlwbGUgZGV2aWNlcywgZWZmZWN0aXZlIHVzZSAoaW50ZWdyYXRpb24pIG9mIG5hdGlvbmFsIGNvbnRlbnQgcHJvdmlkZWQgYnkgTkhTIERpZ2l0YWwsIENvbXBsaWFuY2Ugd2l0aCBHRFBSIGFuZCBFVSBhY2Nlc3NpYmlsaXR5IHN0YW5kYXJkcy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5XaG8gdGhlIHVzZXJzIGFyZSBhbmQgd2hhdCB0aGV5IG5lZWQgdG8gZG88L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSB3ZWJzaXRlIG11c3QgcHJvdmlkZSBhIHNvbHV0aW9uIHRoYXQgZW5hYmxlcyBwYXRpZW50cyB0byBmaW5kIG91dCBob3cgdG8gZ2V0IHRvIGFwcG9pbnRtZW50cyB1c2luZyB3YXktZmluZGluZyB0b29scy4gPGJyPjxicj5JbmZvcm1hdGlvbiBhYm91dCB0aGUgaW5kaXZpZHVhbC9zZXJ2aWNlL2RlcGFydG1lbnQgaW4gY2hhcmdlIG9mIGNhcmUuIDxicj5BY2Nlc3MgdG8gbG9jYWwgY29tbXVuaXR5IHNlcnZpY2VzIGRpcmVjdG9yeSB0byBoZWxwIHdpdGggcmVjb3ZlcnksIGhlYWx0aCBhbmQgd2VsbC1iZWluZy4gPGJyPjxicj5BZHZpY2UgYW5kIGluZm9ybWF0aW9uIGFib3V0IGNvbmRpdGlvbnMgYXQgYSB0aW1lIHRoYXQgc3VpdHMgdGhlbSAoMjQvNykuIFRoZXkgc2hvdWxkIGJlIGFibGUgc2F5IGhvdyB0aGV5IGFyZSBmZWVsaW5nIGFuZCB3aGF0IGNvbmNlcm5zIGFyZSBzbyB0aGF0IHRoZXkgY2FuIHJlY2VpdmUgaW5mb3JtYXRpb24gdG8gaGVscCB0aGVtIHVuZGVyc3RhbmQgY29uZGl0aW9uIGFuZCByZWR1Y2UgYW54aWV0eS48YnI+PGJyPlBhdGllbnRzIG5lZWQgdG8gYmUgYWJsZSB0byBzZWxmLXJlZmVyIG9ubGluZSB0byBoZWxwIGRlcGFydG1lbnRzIG1hbmFnZSBib29raW5ncyBlZmZlY3RpdmVseS48YnI+PGJyPlBlb3BsZSB3YW50aW5nIHRvIGdldCBpbiB0b3VjaCB3aXRoIENVSCBtdXN0IGJlIGFibGUgdG8gZG8gc28gaW4gYSBzZWN1cmUgd2F5Ljxicj48YnI+V2Ugd2FudCB0byBzaG93IG91ciBwYXRpZW50cyB3aGF0IGtpbmQgb2YgcmVzZWFyY2ggd2UgZG8gYW5kIHdoeSBpdCBtYXR0ZXJzLCBzbyB0aGF0IHRoZXkgYXJlIGNvbmZpZGVudCBhbmQgd2lsbGluZyB0byB0YWtlIHBhcnQgaW4gbWVkaWNhbCByZXNlYXJjaCBzdHVkaWVzLjxicj48YnI+V2Ugd2FudCB0byBkZW1vbnN0cmF0ZSB0byBjbGluaWNpYW5zLCBhY2FkZW1pY3MgYW5kIHJlc2VhcmNoZXJzIHRoYXQgQ1VIIGhhcyBhIHRocml2aW5nIHJlc2VhcmNoIHBvcnRmb2xpbyB0byBhdHRyYWN0IHRoZW0gdG8gY29tZSBhbmQgd29yayBoZXJlLjxicj48YnI+V2Ugd2FudCB0byBkZW1vbnN0cmF0ZSB0byBwb3RlbnRpYWwgYmlvbWVkaWNhbCBpbmR1c3RyeSB0aGF0IENVSCBydW5zIGVmZmVjdGl2ZSBhbmQgZWZmaWNpZW50IHJlc2VhcmNoIHByb2dyYW1tZXMgYW5kIGlzIHRoZXJlZm9yZSBnb29kIHRvIHBhcnRuZXIgd2l0aC9pbnZlc3QgaW4uPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RWFybHkgbWFya2V0IGVuZ2FnZW1lbnQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldlIGhhdmUgaGFkIHNvbWUgaW5pdGlhbCBjb252ZXJzYXRpb25zIHdpdGggc3VwcGxpZXJzIG9mIG90aGVyIE5IUyB3ZWJzaXRlcyB0byBmaW5kIG91dCBtb3JlIGFib3V0IHdlYnNpdGVzIGFuZCBzcGVjaWZpY2FsbHkgdGhlIENvbnRlbnQgTWFuYWdlbWVudCBTeXN0ZW1zIHRoYXQgcG93ZXIgdGhlIHdlYnNpdGVzLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFueSB3b3JrIHRoYXTigJlzIGFscmVhZHkgYmVlbiBkb25lPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5XZSBoYXZlIHVuZGVydGFrZW4gYW4gaW5pdGlhbCB1c2VyIHJlc2VhcmNoIGFzIHBhcnQgb2YgdGhlIGRpc2NvdmVyeSBwaGFzZSBvZiB0aGlzIHByb2plY3QgdG8gdW5kZXJzdGFuZCB3aGF0IHR5cGUgb2Ygd2Vic2l0ZSB3ZSBuZWVkIHRvIGRlbGl2ZXIgdG8gYmVzdCBzZXJ2ZSBvdXIgYXVkaWVuY2VzLiBXZSBoYXZlIGVuZ2FnZWQgd2l0aCBwYXRpZW50cywgdmlzaXRvcnMsIGZhbWlsaWVzLCBpbnRlcm5hbCBzdGFrZWhvbGRlcnMgYW5kIHBhcnRuZXJzIHRocm91Z2ggYW4gb25saW5lIHN1cnZleSwgZmFjZS10by1mYWNlIHdvcmtzaG9wcyBhbmQgaW5kaXZpZHVhbCBjb252ZXJzYXRpb25zIHRvIGluZm9ybSB0aGUgc3BlY2lmaWNhdGlvbiBvZiBhIG5ldyBDVUggd2Vic2l0ZS4gSW4gYWRkaXRpb24sIHdlIGhhdmUgcmVzZWFyY2hlZCBvdGhlciBvcmdhbmlzYXRpb25zIGluY2x1ZGluZyBOSFMgYW5kIHB1YmxpYyBzZWN0b3Igb3JnYW5pc2F0aW9ucyB0byBkZXZlbG9wIGEgZ29vZCB1bmRlcnN0YW5kaW5nIG9mIHRoZSBsZXZlbCBvZiBvcHBvcnR1bml0eSBmb3IgVGhlIFRydXN0Ljwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV4aXN0aW5nIHRlYW08L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSB3ZWJzaXRlIGlzIG1hbmFnZWQgYnkgYSBzbWFsbCBpbi1ob3VzZSBEaWdpdGFsIGNvbW11bmljYXRpb25zIHRlYW0uIFRoZSBzdXBwbGllciB3aWxsIGJlIHdvcmtpbmcgd2l0aCB0aGlzIHRlYW0gdG8gY29tcGxldGUgdGhlIHByb2plY3QuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+Q3VycmVudCBwaGFzZTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5EaXNjb3Zlcnk8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTMiPgogICAgICAKICAgICAgV29yayBzZXR1cAogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgV29yayBzZXR1cAogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QWRkcmVzcyB3aGVyZSB0aGUgd29yayB3aWxsIHRha2UgcGxhY2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkNhbWJyaWRnZSBVbml2ZXJzaXR5IEhvc3BpdGFscyBOSFMgRm91bmRhdGlvbiBUcnVzdCwgSGlsbHMgUm9hZCwgQ2FtYnJpZGdlLCBDQjIgMFFRPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V29ya2luZyBhcnJhbmdlbWVudHM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk1haW5seSBvZmYtc2l0ZSwgd2l0aCB2aXNpdHMgdG8gb3VyIG9mZmljZXMgYXMgcmVxdWlyZWQgYnkgdGhlIHByb2plY3QuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+U2VjdXJpdHkgY2xlYXJhbmNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Ob3QgcmVxdWlyZWQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTQiPgogICAgICAKICAgICAgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QWRkaXRpb25hbCB0ZXJtcyBhbmQgY29uZGl0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL3Rlcm1zLWFuZC1jb25kaXRpb25zLW9mLWRpZ2l0YWwtbWFya2V0cGxhY2UtZnJhbWV3b3JrcyIgY2xhc3M9ImJyZWFrLWxpbmsiIHJlbD0iZXh0ZXJuYWwiPmh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS90ZXJtcy1hbmQtY29uZGl0aW9ucy1vZi1kaWdpdGFsLW1hcmtldHBsYWNlLWZyYW1ld29ya3M8L2E+PC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy01Ij4KICAgICAgCiAgICAgIFNraWxscyBhbmQgZXhwZXJpZW5jZQogIDwvaDI+CiAgICAgCiAgICAgICAgPHA+PHAgY2xhc3M9InN1bW1hcnktaXRlbS1kZXNjcmlwdGlvbiI+CiAgICBCdXllcnMgd2lsbCB1c2UgdGhlIGVzc2VudGlhbCBhbmQgbmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZSB0byBoZWxwIHRoZW0gZXZhbHVhdGUgc3VwcGxpZXJz4oCZIHRlY2huaWNhbCBjb21wZXRlbmNlLgogIDwvcD48L3A+CiAgICAgCiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgU2tpbGxzIGFuZCBleHBlcmllbmNlCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Fc3NlbnRpYWwgc2tpbGxzIGFuZCBleHBlcmllbmNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+RXhwZXJpZW5jZSBpbiBmdWxsIGxpZmUtY3ljbGUgb2YgdGhlIGRldmVsb3BtZW50IG9mIGxhcmdlLCBwdWJsaWMtZmFjaW5nLCByZXNwb25zaXZlIHdlYnNpdGVzIHVzaW5nIG9wZW4tc291cmNlIHRlY2hub2xvZ3kgYW5kIG9wZW4gc3RhbmRhcmRzIChkaXNjb3ZlcnksIHN0YWtlaG9sZGVyIG1hbmFnZW1lbnQsIGRlc2lnbiwgYnVpbGQsIGNvbnRlbnQgY3JlYXRpb24sIHNpdGUgbGF1bmNoLCBob3N0aW5nLCBtYWludGVuYW5jZSwgc3VwcG9ydCk8L2xpPgogICAgCiAgICAgIDxsaT5GdWxsIHNlcnZpY2UgZGlnaXRhbCBhZ2VuY3kgd2l0aCBhIGZ1bGwgcmFuZ2Ugb2Ygcm9sZXMgaW5jbHVkaW5nIElBLCBVWCwgdGVjaG5pY2FsLCBjb250ZW50IHN0cmF0ZWd5LCBwcm9qZWN0IG1hbmFnZW1lbnQsIGFuYWx5dGljcywgU0VPPC9saT4KICAgIAogICAgICA8bGk+RXhwZXJpZW5jZSBvZiBkZWxpdmVyaW5nIGlubm92YXRpdmUgd2Vic2l0ZSBwcm9qZWN0cyB0aGF0IGhhdmUgdHJhbnNmb3JtZWQgdGhlIG9ubGluZSBleHBlcmllbmNlIGZvciB1c2VycywgYmFsYW5jaW5nIGZ1bmN0aW9uIHdpdGggY3JlYXRpdml0eSBhbmQgbW9kZXJuIGRlc2lnbiB0byBzZXQgdGhlIHdlYnNpdGUgYXBhcnQgZnJvbSBvdGhlcnM8L2xpPgogICAgCiAgICAgIDxsaT5FdmlkZW5jZSBvZiBjcmVhdGluZyBjb250ZW50IGFuZCBpbWFnZXJ5IHRoYXQgc3VwcG9ydHMgYW5kIGVuaGFuY2VzIGRlc2lnbiBieSBjYXB0dXJpbmcgdGhlIGVtb3Rpb24gb2YgYSBwYXJ0aWN1bGFyIHN1YmplY3QsIHByb3ZpZGluZyByZWFzc3VyYW5jZSB0byB0aG9zZSBwZW9wbGUgdXNpbmcgaG9zcGl0YWwgc2VydmljZXMgb25saW5lPC9saT4KICAgIAogICAgICA8bGk+RXhwZXJpZW5jZSBvZiB3b3JraW5nIHdpdGggbGFyZ2UgTkhTIG9yIHB1YmxpYy1zZWN0b3Igb3JnYW5pc2F0aW9ucyBhbmQga25vd2xlZGdlIG9mIHRoZSBoZWFsdGggdGVjaG5vbG9neSBlbnZpcm9ubWVudDwvbGk+CiAgICAKICAgICAgPGxpPkRlbW9uc3RyYWJsZSBleGFtcGxlcyBvZiBsb25nLXRlcm0gKDMrIHllYXJzKSByZWxhdGlvbnNoaXBzIHdpdGggc2F0aXNmaWVkIGNsaWVudHM8L2xpPgogICAgCiAgICAgIDxsaT5FeGNlbGxlbnQga25vd2xlZGdlIG9mIHRoZSAmIzM5O29wZW4gc291cmNlJiMzOTsgY29udGVudCBtYW5hZ2VtZW50IHN5c3RlbSBtYXJrZXQgd2l0aCBhIGNsaWVudC1jZW50ZXJlZCBhcHByb2FjaCB0byBDTVMgc2VsZWN0aW9uPC9saT4KICAgIAogICAgICA8bGk+RXZpZGVuY2Ugb2YgZGV2ZWxvcGluZyBzaXRlcyB3aGljaCBjb21wbHkgd2l0aCBXQ0FHIDIuMCBhbmQgR0RQUiByZWd1bGF0aW9ucywgdG9nZXRoZXIgd2l0aCBrbm93bGVkZ2Ugb2YgV0NBRyAyLjEgYW5kIEVVIHJlZ3VsYXRpb25zIGZvciBwdWJsaWMgc2VjdG9yIHdlYnNpdGVzPC9saT4KICAgIAogICAgICA8bGk+RXZpZGVuY2Ugb2YgZGVzaWduaW5nIHdlYnNpdGVzIHdoaWNoIHN1cHBvcnQgZGlnaXRhbCBpbmNsdXNpb248L2xpPgogICAgCiAgICAgIDxsaT5FdmlkZW5jZSBvZiBjcmVhdGluZyBjb250ZW50IHdoaWNoIG9wdGltaXNlcyBlbmdhZ2VtZW50IGFuZCBtZWV0cyBlZmZlY3RpdmUgc3RhbmRhcmRzIG9mIHVzYWJpbGl0eSBhbmQgYWNjZXNzaWJpbGl0eTwvbGk+CiAgICAKICAgICAgPGxpPkV4cGVyaWVuY2Ugb2YgY3JlYXRpbmcgd2Vic2l0ZSBicmFuZCBndWlkZWxpbmVzIHRoYXQgc2V0IHRvbmUgb2Ygdm9pY2UsIGNvbnRlbnQgYW5kIGltYWdlIHN0eWxlIHRoYXQgZml0cyB3aXRoIGFuIG9yZ2FuaXNhdGlvbnMgY29ycG9yYXRlIGlkZW50aXR5PC9saT4KICAgIAogICAgICA8bGk+RXhwZXJ0IGluIHNldHRpbmcgdXAgYW5kIG9wdGltaXNpbmcgc2l0ZXMgZm9yIGNvbnRpbnVlZCBpbXByb3ZlbWVudCB1c2luZyBHb29nbGUgYW5hbHl0aWNzLCBoZWF0IG1hcHBpbmcgYW5kIG90aGVyIHRvb2xzIGFuZCBpbiBhbmFseXNpbmcgcmVzdWx0cyB0byBkZWxpdmVyIGFjdGlvbmFibGUgaW5zaWdodHM8L2xpPgogICAgCiAgICAgIDxsaT5FeHBlcnQgU0VPIHNraWxscyBhbmQgdGhlIGFiaWxpdHkgdG8gYWR2aXNlIG9uIGJlc3QgcHJhY3RpY2UsIHBhcnRpY3VsYXJseSBhcm91bmQgbmV3IHNlYXJjaCB0ZWNobm9sb2dpZXMgZS5nLiBjb252ZXJzYXRpb25hbCBBSTwvbGk+CiAgICAKICAgICAgPGxpPkFiaWxpdHkgdG8gZGVsaXZlciBoaWdoIHF1YWxpdHkgYnV0IGxvdyB0ZWNobmljYWwgbWFpbnRlbmFuY2Ugd2Vic2l0ZXM8L2xpPgogICAgCiAgICAgIDxsaT5FeHBlcnRzIGluIGNvbmZpZ3VyaW5nIGFuZCBpbXBsZW1lbnRpbmcgZWZmZWN0aXZlIG9uLXNpdGUgc2VhcmNoIHRvb2xzPC9saT4KICAgIAogICAgICA8bGk+RXZpZGVuY2Ugb2YgZGVsaXZlcmluZyBlZmZlY3RpdmUgdHJhaW5pbmcgb24gdGhlIHVzZSBvZiB0aGUgQ01TPC9saT4KICAgIAogICAgICA8bGk+RXZpZGVuY2Ugb2Ygc3VjY2Vzc2Z1bCBpbnRlZ3JhdGlvbnMgb2Ygd2Vic2l0ZXMgd2l0aCBvdGhlciBhcHBsaWNhdGlvbnM8L2xpPgogICAgCiAgICAgIDxsaT5FdmlkZW5jZSBvZiBob3N0aW5nLCBzdXBwb3J0aW5nIGFuZCBtYWludGFpbmluZyB3ZWJzaXRlcywgaW5jbHVkaW5nIG9mZmVyaW5nIGEgZnVsbHkgcmVwbGljYXRlZCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudCBmb3IgdGVzdGluZyB1cGdyYWRlcyBhbmQgY29uZmlndXJhdGlvbiBjaGFuZ2VzPC9saT4KICAgIAogICAgICA8bGk+RXZpZGVuY2Ugb2YgZGV2ZWxvcGluZyB3ZWJzaXRlcyB0aGF0IGZvbGxvdyB0aGUgcHJpbmNpcGxlcyBvZiBHRFMgYW5kIE5IUyBEaWdpdGFsIFNlcnZpY2UgTWFudWFsPC9saT4KICAgIAogICAgICA8bGk+RXZpZGVuY2Ugb2YgY3JlYXRpdmUgYW5kIG1vZGVybiB3ZWJzaXRlIGRlc2lnbiBzdXBwb3J0ZWQgYnkgYSBtb2JpbGUgZmlyc3QgYXBwcm9hY2g8L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5OaWNlLXRvLWhhdmUgc2tpbGxzIGFuZCBleHBlcmllbmNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+S25vd2xlZGdlIG9mIE5IUyBpZGVudGl0eSBndWlkZWxpbmVzIGFuZCBldm9sdmluZyB0ZWNobmljYWwgc3RhbmRhcmRzIGZyb20gTkhTIERpZ2l0YWw8L2xpPgogICAgCiAgICAgIDxsaT5FeHBlcmllbmNlIG9mIGRlbGl2ZXJpbmcgaW50cmFuZXQgcHJvamVjdHMgb2YgYSBzaW1pbGFyIHNjYWxlPC9saT4KICAgIAogICAgICA8bGk+RXhwZXJ0aXNlIGluIHRoZSB1c2Ugb2Ygd2Vic2l0ZXMgYW5kIGRpZ2l0YWwgY2hhbm5lbHMgdG8gc3VwcG9ydCByZWNydWl0bWVudDwvbGk+CiAgICAKICAgICAgPGxpPkV4cGVyaWVuY2Ugb2YgYWR2aXNpbmcgb24gYW5kIGRldmVsb3BpbmcgbWljcm8gc2l0ZXMgYWxpZ25lZCB0byBhIHBhcmVudCBzaXRlPC9saT4KICAgIAogICAgICA8bGk+RXhwZXJpZW5jZSBvZiBkZWxpdmVyaW5nIHJldXNhYmxlIHRlbXBsYXRlcyB0aGF0IGNhbiBiZSByZS1wdXJwb3NlZCBhbmQgdXNlZCBvbiBzcGVjaWZpYyBhcmVhcyBvZiBhIHdlYnNpdGU8L2xpPgogICAgCiAgICAgIDxsaT5FeHBlcmllbmNlIG9mIGltcGxlbWVudGluZyB0aGlyZCBwYXJ0eSBhY2Nlc3NpYmlsaXR5IGFuZCB3ZWJzaXRlIGdvdmVybmFuY2Ugc29mdHdhcmU8L2xpPgogICAgCiAgICAgIDxsaT5FeHBlcmllbmNlIG9mIHVzaW5nIHZpZGVvLCBpbWFnZXMgYW5kIG90aGVyIG1lZGlhIHRvIGVuaGFuY2Ugd2Vic2l0ZXM8L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKICAgIDxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTYiPgogICAgICAKICAgICAgSG93IHN1cHBsaWVycyB3aWxsIGJlIGV2YWx1YXRlZAogIDwvaDI+CiAgICAgCiAgICAgICAgPHA+QWxsIHN1cHBsaWVycyB3aWxsIGJlIGFza2VkIHRvIHByb3ZpZGUgYSB3cml0dGVuIHByb3Bvc2FsLjwvcD4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBIb3cgc3VwcGxpZXJzIHdpbGwgYmUgZXZhbHVhdGVkCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Ib3cgbWFueSBzdXBwbGllcnMgdG8gZXZhbHVhdGU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjU8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Qcm9wb3NhbCBjcml0ZXJpYTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPkhvdyB0aGUgYXBwcm9hY2ggbWVldHMgb3VyIG5lZWRzIGFuZCB0aG9zZSBvZiBvdXIgdXNlcnM8L2xpPgogICAgCiAgICAgIDxsaT5QcmV2aW91cyBleHBlcmllbmNlIG9mIHNpbWlsYXIgcHJvamVjdHM8L2xpPgogICAgCiAgICAgIDxsaT5QcmV2aW91cyBleHBlcmllbmNlIG9mIHdvcmtpbmcgd2l0aCBOSFMgb3IgcHVibGljIHNlY3RvciBvcmdhbmlzYXRpb25zPC9saT4KICAgIAogICAgICA8bGk+VGVhbSBzdHJ1Y3R1cmUsIHJvbGVzIGFuZCByZXNwb25zaWJpbGl0aWVzLCBrbm93bGVkZ2UgYW5kIGV4cGVyaWVuY2U8L2xpPgogICAgCiAgICAgIDxsaT5Db3N0cyBhbmQgdmFsdWUgZm9yIG1vbmV5PC9saT4KICAgIAogICAgICA8bGk+UHJvcG9zZWQgdGltZXNjYWxlcyBhbmQgaW5kaWNhdGl2ZSBwcm9qZWN0IHBsYW48L2xpPgogICAgCiAgICAgIDxsaT5Qcm9qZWN0IG1hbmFnZW1lbnQgYXBwcm9hY2gvbWV0aG9kb2xvZ3ksIGluY2x1ZGluZyBtYW5hZ2VtZW50IG9mIHJpc2tzPC9saT4KICAgIAogICAgICA8bGk+SG9zdGluZywgbWFpbnRlbmFuY2UgYW5kIHN1cHBvcnQgYXJyYW5nZW1lbnRzPC9saT4KICAgIAogIDwvdWw+CiAgPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+Q3VsdHVyYWwgZml0IGNyaXRlcmlhPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+V29ya3MgYXMgYSB0ZWFtIHdpdGggb3VyIG9yZ2FuaXNhdGlvbiBhbmQgb3RoZXIgc3VwcGxpZXJzIHdoZXJlIG5lY2Vzc2FyeTwvbGk+CiAgICAKICAgICAgPGxpPlJlYWR5IHRvIGNoYWxsZW5nZSB0aGUgc3RhdHVzIHF1bzwvbGk+CiAgICAKICAgICAgPGxpPkNoYW1waW9ucyBlcXVhbGl0eSwgZGl2ZXJzaXR5IGFuZCBkaWdpdGFsIGluY2x1c2lvbjwvbGk+CiAgICAKICAgICAgPGxpPklzIGlubm92YXRpdmUsIGNyZWF0aXZlIGFuZCBmb3J3YXJkIHRoaW5raW5nPC9saT4KICAgIAogICAgICA8bGk+U2hhcmVzIGtub3dsZWRnZSBhbmQgZXhwZXJpZW5jZSB3aXRoIGNsaWVudHM8L2xpPgogICAgCiAgICAgIDxsaT5Qcm92aWRlcyBob25lc3QgYW5kIGV4cGVydCBmZWVkYmFjazwvbGk+CiAgICAKICAgICAgPGxpPlVzZXMgaW5ub3ZhdGl2ZSwgY29zdCBlZmZlY3RpdmUgdGVjaG5pcXVlcyB0byBlbmdhZ2Ugd2Vic2l0ZSB1c2VyczwvbGk+CiAgICAKICAgICAgPGxpPlRha2VzIHJlc3BvbnNpYmlsaXR5IGZvciB0aGUgcXVhbGl0eSBvZiB0aGVpciB3b3JrPC9saT4KICAgIAogICAgICA8bGk+VHJhbnNwYXJlbnQgYW5kIGNvbGxhYm9yYXRpdmUgd2hlbiBtYWtpbmcgZGVjaXNpb25zPC9saT4KICAgIAogICAgICA8bGk+V29ya3Mgd2VsbCB3aXRoIGNsaWVudHMgb2YgdmFyeWluZyB0ZWNobmljYWwgZXhwZXJ0aXNlPC9saT4KICAgIAogICAgICA8bGk+QWJsZSB0byBkZW1vbnN0cmF0ZSB0aGUgdmFsdWUgb2YgdGhlaXIgYXBwcm9hY2ggYW5kIHVuZGVyc3RhbmRzIHRoZSB2YWx1ZSBvZiBkYXRhIGFuZCBhbmFseXRpY3M8L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5QYXltZW50IGFwcHJvYWNoPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkNhcHBlZCB0aW1lIGFuZCBtYXRlcmlhbHM8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5BZGRpdGlvbmFsIGFzc2Vzc21lbnQgbWV0aG9kczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPkNhc2Ugc3R1ZHk8L2xpPgogICAgCiAgICAgIDxsaT5Xb3JrIGhpc3Rvcnk8L2xpPgogICAgCiAgICAgIDxsaT5SZWZlcmVuY2U8L2xpPgogICAgCiAgICAgIDxsaT5QcmVzZW50YXRpb248L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5FdmFsdWF0aW9uIHdlaWdodGluZzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5UZWNobmljYWwgY29tcGV0ZW5jZTwvcD4KICAgICAgICAgIDxkaXY+NTUlPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im11bHRpcXVlc3Rpb24iPgogICAgICAgICAgPHA+Q3VsdHVyYWwgZml0PC9wPgogICAgICAgICAgPGRpdj4xNSU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5QcmljZTwvcD4KICAgICAgICAgIDxkaXY+MzAlPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImNvbHVtbi1vbmUtd2hvbGUiPgogICAgCgoKCjxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJjbGFyaWZpY2F0aW9uLXF1ZXN0aW9ucyI+CiAgICAgIAogICAgICBRdWVzdGlvbnMgYXNrZWQgYnkgc3VwcGxpZXJzCiAgPC9oMj4KCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIFF1ZXN0aW9ucyBhc2tlZCBieSBzdXBwbGllcnMKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlN1cHBsaWVyIHF1ZXN0aW9uPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+QnV5ZXIgYW5zd2VyPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+MS48L3NwYW4+CiAgICAgIERvIHlvdSBoYXZlIGEgcHJlZmVyZW5jZSBvZiBhIENNUz8gSSBjYW4gc2VlIHlvdXIgY3VycmVudCB3ZWJzaXRlIGlzIGluIERydXBhbC4gV291bGQgeW91IGZhdm91ciBhbiBhcHBsaWNhdGlvbiB1c2luZyBEcnVwYWw/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+VGhlcmUgaXMgbm8gcHJlZmVyZW5jZSBmb3IgdGhlIENNUy4gV2Ugd291bGQgcHJlZmVyIGFuIE9wZW4gU291cmNlIHBsYXRmb3JtLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIAoKCiAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9zdXBwbGllcnMvb3Bwb3J0dW5pdGllcy8xMTM0OC9hc2stYS1xdWVzdGlvbiI+CiAgICAKICAgICAgTG9nIGluIHRvIGFzayBhIHF1ZXN0aW9uCiAgICAKICA8L2E+CgogIDwvZGl2Pgo8L2Rpdj4KCgogIDxici8+PCEtLSA8LSByZW1vdmUgb25jZSBncmlkIGFuZCBib2R5IGVsZW1lbnRzIGhhdmUgYmVlbiBjb252ZXJ0ZWQgdG8gZ292dWsgZnJvbnRlbmQgLS0+CiAgPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogICAgPGRpdiBjbGFzcz0iY29sdW1uLXR3by10aGlyZHMiPgogICAgICA8Zm9ybSBhY3Rpb249Ii9zdXBwbGllcnMvb3Bwb3J0dW5pdGllcy8xMTM0OC9yZXNwb25zZXMvc3RhcnQiIG1ldGhvZD0iZ2V0Ij4KICAgICAgICAKICAKICAgIAogIAoKPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJnb3Z1ay1idXR0b24iPgogIEFwcGx5IGZvciB0aGlzIG9wcG9ydHVuaXR5CjwvYnV0dG9uPgogICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCgoKICAgIDwvbWFpbj4KICA8L2Rpdj4KCgogICAgPGZvb3RlciBjbGFzcz0iZ3JvdXAganMtZm9vdGVyIiBpZD0iZm9vdGVyIiByb2xlPSJjb250ZW50aW5mbyI+CgogICAgICA8ZGl2IGNsYXNzPSJmb290ZXItd3JhcHBlciI+CiAgICAgICAgCiAgPGRpdiBjbGFzcz0iZm9vdGVyLWNhdGVnb3JpZXMiPgogIDxkaXYgY2xhc3M9ImZvb3Rlci1hYm91dCI+CiAgICA8aDI+CiAgICAgIENvbnRhY3QKICAgIDwvaDI+CiAgICA8dWw+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIvaGVscCI+RGlnaXRhbCBNYXJrZXRwbGFjZSBoZWxwPC9hPgogICAgICA8L2xpPgogICAgPC91bD4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJmb290ZXItYnV5ZXJzIj4KICAgIDxoMj4KICAgICAgQWJvdXQgdGhlIERpZ2l0YWwgTWFya2V0cGxhY2UKICAgIDwvaDI+CiAgICA8dWw+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1tYXJrZXRwbGFjZS1idXllcnMtZ3VpZGUiPlNlcnZpY2VzIHlvdSBjYW4gYnV5PC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2Utc3VwcGxpZXJzLWd1aWRlIj5TZXJ2aWNlcyB5b3UgY2FuIHNlbGw8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2Nyb3duLWNvbW1lcmNpYWwtc2VydmljZSI+QWJvdXQgQ3Jvd24gQ29tbWVyY2lhbCBTZXJ2aWNlPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSI+QWJvdXQgR292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2U8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSIvZy1jbG91ZC9zdXBwbGllcnMiPkctQ2xvdWQgc3VwcGxpZXIgQeKAk1o8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgogIDxkaXYgY2xhc3M9ImZvb3Rlci1zdXBwbGllcnMiPgogICAgPGgyPgogICAgICAgIEd1aWRhbmNlCiAgICA8L2gyPgogICAgPHVsPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtc3VwcGxpZXJzLWd1aWRlIj5BcHBseWluZyB0byBzZWxsIG9uIHRoZSBHLUNsb3VkIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zdXBwbGllcnMtZ3VpZGUiPkFwcGx5aW5nIHRvIHNlbGwgb24gdGhlIERpZ2l0YWwgT3V0Y29tZXMgYW5kIFNwZWNpYWxpc3RzIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9ob3ctdG8tc2VsbC15b3VyLWRpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLXNlcnZpY2VzIj5SZXNwb25kaW5nIHRvIGJ1eWVyIHJlcXVpcmVtZW50cyBvbiB0aGUgRGlnaXRhbCBPdXRjb21lcyBhbmQgU3BlY2lhbGlzdHMgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtYnV5ZXJzLWd1aWRlIj5CdXlpbmcgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLWJ1eWVycy1ndWlkZSI+QnV5aW5nIG9uIHRoZSBEaWdpdGFsIE91dGNvbWVzIGFuZCBTcGVjaWFsaXN0cyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvdGhlLWNyb3duLWhvc3RpbmctZGF0YS1jZW50cmVzLWZyYW1ld29yay1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+QnV5aW5nIG9uIHRoZSBDcm93biBIb3N0aW5nIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9kaXY+CiAgPGhyLz4KPC9kaXY+CgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbWV0YSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJmb290ZXItbWV0YS1pbm5lciI+CiAgICAgICAgICAgIAogICAgPGgyIGNsYXNzPSJ2aXN1YWxseWhpZGRlbiI+U3VwcG9ydCBsaW5rczwvaDI+CiAgICA8dWw+CiAgICAgICAgPGxpPjxhIGhyZWY9Ii90ZXJtcy1hbmQtY29uZGl0aW9ucyIgY2xhc3M9InRlcm1zLWFuZC1jb25kaXRpb25zIj5UZXJtcyBhbmQgY29uZGl0aW9uczwvYT48L2xpPgogICAgICAgIDxsaT48YSBocmVmPSIvY29va2llcyI+Q29va2llczwvYT48L2xpPgogICAgICAgIDxsaT48YSBocmVmPSIvcHJpdmFjeS1ub3RpY2UiPlByaXZhY3kgbm90aWNlPC9hPjwvbGk+CiAgICAgICAgPGxpPkJ1aWx0IGJ5IHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIj5Hb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZTwvYT48L2xpPgogICAgPC91bD4KCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJvcGVuLWdvdmVybm1lbnQtbGljZW5jZSI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9ImxvZ28iPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIiByZWw9ImxpY2Vuc2UiPk9wZW4gR292ZXJubWVudCBMaWNlbmNlPC9hPjwvcD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxwPkFsbCBjb250ZW50IGlzIGF2YWlsYWJsZSB1bmRlciB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvZG9jL29wZW4tZ292ZXJubWVudC1saWNlbmNlL3ZlcnNpb24vMy8iIHJlbD0ibGljZW5zZSI+T3BlbiBHb3Zlcm5tZW50IExpY2VuY2UgdjMuMDwvYT4sIGV4Y2VwdCB3aGVyZSBvdGhlcndpc2Ugc3RhdGVkPC9wPgogICAgICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvcHlyaWdodCI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvaW5mb3JtYXRpb24tbWFuYWdlbWVudC9yZS11c2luZy1wdWJsaWMtc2VjdG9yLWluZm9ybWF0aW9uL2NvcHlyaWdodC1hbmQtcmUtdXNlL2Nyb3duLWNvcHlyaWdodC8iPiZjb3B5OyBDcm93biBjb3B5cmlnaHQ8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Zvb3Rlcj4KCiAgICA8ZGl2IGlkPSJnbG9iYWwtYXBwLWVycm9yIiBjbGFzcz0iYXBwLWVycm9yIGhpZGRlbiI+PC9kaXY+CgogICAgPHNjcmlwdCBzcmM9Ii9zdGF0aWMvamF2YXNjcmlwdHMvZ292dWstdGVtcGxhdGUuanM/MC4xOS4yIj48L3NjcmlwdD4KCiAgICAKICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2FwcGxpY2F0aW9uLmpzP2Y4NGJlYTEzMWJiODhjY2JhOGQ5YWRkMDQ0N2I5NTRiIj48L3NjcmlwdD4KICAKCgogICAgCiAgICA8c2NyaXB0PmlmICh0eXBlb2Ygd2luZG93LkdPVlVLID09PSAndW5kZWZpbmVkJykgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBkb2N1bWVudC5ib2R5LmNsYXNzTmFtZS5yZXBsYWNlKCdqcy1lbmFibGVkJywgJycpOzwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPg==
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:18 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11342
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjg.NJ6v3-dma2R5e3WE4r1J90jwepU
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '32747'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:18 GMT
      Dm-Request-Id:
      - 4174e3b172e68a18
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:18 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjg.NJ6v3-dma2R5e3WE4r1J90jwepU;
        Expires=Tue, 10-Dec-2019 11:57:18 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 4174e3b172e68a18
      X-B3-Traceid:
      - 4174e3b172e68a18
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 4ec44680-9cec-429a-5b2d-07c4c8fcecac
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 d96c6a517450b169095d23aff6d646a4.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - iUtQd7J9A7CuOooWes0mw1OgXgiRJhzHOaefXEKOjVm7gmLVMaSbyg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:19 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11336
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjg.NJ6v3-dma2R5e3WE4r1J90jwepU
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '35049'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:19 GMT
      Dm-Request-Id:
      - df5513f40e71ecb4
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:19 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjw.8n5O0oY1LuSgXZZnM2F0NqpyL_k;
        Expires=Tue, 10-Dec-2019 11:57:19 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - df5513f40e71ecb4
      X-B3-Traceid:
      - df5513f40e71ecb4
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 9279a14c-0c4a-4132-710a-42c39f2e7e2b
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f5f83db1a84a10ea220332d32f95e38b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - J8nO2CMcZR5vEKr1u_c8JSOi7_PDQCq3LWqcvzPcQlKHrhzvS9yRrg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:19 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11329
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjw.8n5O0oY1LuSgXZZnM2F0NqpyL_k
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31351'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:19 GMT
      Dm-Request-Id:
      - a1d516c03cc75e08
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:19 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjw.8n5O0oY1LuSgXZZnM2F0NqpyL_k;
        Expires=Tue, 10-Dec-2019 11:57:19 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - a1d516c03cc75e08
      X-B3-Traceid:
      - a1d516c03cc75e08
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b06631ec-5741-44ed-628a-644a9f348731
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 a1f249a9bf642aa76e446956825f42a6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - tTCx34-Y4NNDOsKnIDs78aKHK3UX7bUwWyXlPu65SeZ8onbKFZscUQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:19 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11324
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjw.8n5O0oY1LuSgXZZnM2F0NqpyL_k
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34851'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:19 GMT
      Dm-Request-Id:
      - a6e8461c6fea3476
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:19 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjw.8n5O0oY1LuSgXZZnM2F0NqpyL_k;
        Expires=Tue, 10-Dec-2019 11:57:19 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - a6e8461c6fea3476
      X-B3-Traceid:
      - a6e8461c6fea3476
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - ecb3af29-2d24-47d6-5ab8-98cc69ec1b00
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0d28fd7b073340c78cdcd5a3e2e0fe5b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - XJN_rA5om34zmkSA0y6i3fCUut4bafs3a19nyD5MFI97oCOsmszdaw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:20 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11305
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELjw.8n5O0oY1LuSgXZZnM2F0NqpyL_k
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36264'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:20 GMT
      Dm-Request-Id:
      - 506322a4ae758716
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:20 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkA.FRFmfV_sImT_VV7iAv5R-Fchohw;
        Expires=Tue, 10-Dec-2019 11:57:20 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 506322a4ae758716
      X-B3-Traceid:
      - 506322a4ae758716
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - f1a4c711-43d7-4723-7be5-ab071a6c0e6f
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 1d01c9eafefacaa6322fccd6199f781c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - aRADWmSdw97Eco0LpG7NZZ6aRYsnnxRM8EwaogV9aHkaEAuCmyLeGQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:20 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11258
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkA.FRFmfV_sImT_VV7iAv5R-Fchohw
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '40590'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:20 GMT
      Dm-Request-Id:
      - 055eb612d1cbf49e
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:20 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkA.FRFmfV_sImT_VV7iAv5R-Fchohw;
        Expires=Tue, 10-Dec-2019 11:57:20 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 055eb612d1cbf49e
      X-B3-Traceid:
      - 055eb612d1cbf49e
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b621e885-1746-4ba6-6bf4-3a54fb504382
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ab76bbd6b801f08301c49a66004b9188.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - S7eCeSYGQnW86ixeRpE7Gsv4wzageWHad5wZFKU3q-a5I2lPqfsb7g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:20 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11267
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkA.FRFmfV_sImT_VV7iAv5R-Fchohw
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '35878'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:21 GMT
      Dm-Request-Id:
      - 5ce376edf7a98798
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:21 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkQ.-olrSg_aiv6vVoEwMX-FDFFBWDE;
        Expires=Tue, 10-Dec-2019 11:57:21 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 5ce376edf7a98798
      X-B3-Traceid:
      - 5ce376edf7a98798
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - bd3b5a2b-9339-4c91-5da3-e09973025085
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f715245c12dc1f6bdadc387db50e442c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - y-9qRYvXHtVDhREqfOwHSMVkjcY98uZ_qXBGcktLWPEJafBwRwrYNA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:21 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/10966
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkQ.-olrSg_aiv6vVoEwMX-FDFFBWDE
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36383'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:21 GMT
      Dm-Request-Id:
      - 6c6c604c933f36b2
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:21 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkQ.-olrSg_aiv6vVoEwMX-FDFFBWDE;
        Expires=Tue, 10-Dec-2019 11:57:21 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 6c6c604c933f36b2
      X-B3-Traceid:
      - 6c6c604c933f36b2
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 31cf93a1-a108-4f10-5256-8ace2af6c82c
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f715245c12dc1f6bdadc387db50e442c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - oZ7LpzUe2jltoq8IxZz30OYjuFp8a8_kqVnRAt9E-xXkMJc4B90GwA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        Cgo8IURPQ1RZUEUgaHRtbD4KPCEtLVtpZiBsdCBJRSA5XT48aHRtbCBjbGFzcz0ibHRlLWllOCIgbGFuZz0iZW4iPjwhW2VuZGlmXS0tPgo8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGh0bWwgbGFuZz0iZW4iPjwhLS08IVtlbmRpZl0tLT4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPHRpdGxlPgogIEMxNjk3NSBVc2VyIENlbnRyZWQgRGVzaWduIFBhcnRuZXIgMSAtIERpZ2l0YWwgTWFya2V0cGxhY2UKPC90aXRsZT4KCiAgICA8IS0tW2lmIGd0IElFIDhdPjwhLS0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCEtLTwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBJRSA2XT48bGluayBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2dvdnVrLXRlbXBsYXRlLWllNi5jc3M/MC4xOS4yIiBtZWRpYT0ic2NyZWVuIiByZWw9InN0eWxlc2hlZXQiIC8+PCFbZW5kaWZdLS0+CiAgICA8IS0tW2lmIElFIDddPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZ292dWstdGVtcGxhdGUtaWU3LmNzcz8wLjE5LjIiIG1lZGlhPSJzY3JlZW4iIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgSUUgOF0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1pZTguY3NzPzAuMTkuMiIgbWVkaWE9InNjcmVlbiIgcmVsPSJzdHlsZXNoZWV0IiAvPjwhW2VuZGlmXS0tPgogICAgPGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9nb3Z1ay10ZW1wbGF0ZS1wcmludC5jc3M/MC4xOS4yIiBtZWRpYT0icHJpbnQiIHJlbD0ic3R5bGVzaGVldCIgLz4KCiAgICA8IS0tW2lmIElFIDhdPjxsaW5rIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvZm9udHMtaWU4LmNzcz8wLjE5LjIiIG1lZGlhPSJhbGwiIHJlbD0ic3R5bGVzaGVldCIgLz48IVtlbmRpZl0tLT4KICAgIDwhLS1baWYgZ3RlIElFIDldPjwhLS0+PGxpbmsgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9mb250cy5jc3M/MC4xOS4yIiBtZWRpYT0iYWxsIiByZWw9InN0eWxlc2hlZXQiIC8+PCEtLTwhW2VuZGlmXS0tPgogICAgPCEtLVtpZiBsdCBJRSA5XT48c2NyaXB0IHNyYz0iL3N0YXRpYy9qYXZhc2NyaXB0cy9pZS5qcz8wLjE5LjIiPjwvc2NyaXB0PjwhW2VuZGlmXS0tPgoKICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZmF2aWNvbi5pY28/MC4xOS4yIiB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICA8bGluayByZWw9Im1hc2staWNvbiIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292LnVrX2xvZ290eXBlX2Nyb3duLnN2Zz8wLjE5LjIiIGNvbG9yPSIjMGIwYzBjIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2FwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9IjEyMHgxMjAiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2FwcGxlLXRvdWNoLWljb24tMTIweDEyMC5wbmc/MC4xOS4yIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCIgc2l6ZXM9Ijc2eDc2IiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTc2eDc2LnBuZz8wLjE5LjIiPgogICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkIiBocmVmPSIvc3RhdGljL2ltYWdlcy9hcHBsZS10b3VjaC1pY29uLTYweDYwLnBuZz8wLjE5LjIiPgoKICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Ii9zdGF0aWMvaW1hZ2VzL29wZW5ncmFwaC1pbWFnZS5wbmc/MC4xOS4yIj4KCiAgICAKICAKCgoKCgoKCiAgPG1ldGEgbmFtZT0iZ2FfY3VzdG9tRGltZW5zaW9uIiBkYXRhLWlkPSIxMiIgZGF0YS12YWx1ZT0iVXNlciByZXNlYXJjaCBiYW5uZXIiPgoKCgoKCiAgPCEtLVtpZiBndCBJRSA4XT48IS0tPgogIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJzY3JlZW4iIGhyZWY9Ii9zdGF0aWMvc3R5bGVzaGVldHMvYXBwbGljYXRpb24uY3NzPzBmOWJhNTIzNTYzZDUyYzMzNmQxZmUyOWU3OTBjM2U1IiAvPgo8IS0tPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+CiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9InNjcmVlbiIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi1pZTcuY3NzPzM4MzhlNzVjNmIxODU5NDhlNzM5NDdhOWJjMmU1NjEyIiAvPgo8IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4KICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ic2NyZWVuIiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLWllOC5jc3M/YTM3M2FhMWI3MzlmNTM4NmQ3YTkwM2VkNjg2MmQ2YzgiIC8+CjwhW2VuZGlmXS0tPgogIAogICAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSJUS0dTR1puZkhweDEtbEtPdGhJMTdBTnR3azdmejNGNFNicjc3STBwcE8wIiAvPgoKCiAgPC9oZWFkPgoKICA8Ym9keSBjbGFzcz0iIj4KICAgIDxzY3JpcHQ+ZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAoKGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lKSA/IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lICsgJyBqcy1lbmFibGVkJyA6ICdqcy1lbmFibGVkJyk7PC9zY3JpcHQ+CgogICAgCgogICAgPGRpdiBpZD0ic2tpcGxpbmstY29udGFpbmVyIj4KICAgICAgPGRpdj4KICAgICAgICA8YSBocmVmPSIjY29udGVudCIgY2xhc3M9InNraXBsaW5rIj5Ta2lwIHRvIG1haW4gY29udGVudDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGlkPSJnbG9iYWwtY29va2llLW1lc3NhZ2UiPgogICAgICAKICAgICAgICAKICA8cD5HT1YuVUsgdXNlcyBjb29raWVzIHRvIG1ha2UgdGhlIHNpdGUgc2ltcGxlci4gPGEgaHJlZj0iL2Nvb2tpZXMiPkZpbmQgb3V0IG1vcmUgYWJvdXQgY29va2llczwvYT48L3A+CgoKICAgICAgCiAgICA8L2Rpdj4KCiAgICAKICAgIDxoZWFkZXIgcm9sZT0iYmFubmVyIiBpZD0iZ2xvYmFsLWhlYWRlciIgY2xhc3M9IndpdGgtcHJvcG9zaXRpb24iPgogICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItd3JhcHBlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iaGVhZGVyLWdsb2JhbCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJoZWFkZXItbG9nbyI+CiAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ayIgdGl0bGU9IkdvIHRvIHRoZSBHT1YuVUsgaG9tZXBhZ2UiIGlkPSJsb2dvIiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgPGltZyBzcmM9Ii9zdGF0aWMvaW1hZ2VzL2dvdi51a19sb2dvdHlwZV9jcm93bl9pbnZlcnRfdHJhbnMucG5nPzAuMTkuMiIgd2lkdGg9IjM2IiBoZWlnaHQ9IjMyIiBhbHQ9IiI+IEdPVi5VSwogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogIDxkaXYgY2xhc3M9ImhlYWRlci10aXRsZSI+CiAgICA8YSBocmVmPSIvIj5EaWdpdGFsIE1hcmtldHBsYWNlPC9hPgogICAgPHN0cm9uZyBjbGFzcz0icGhhc2UtdGFnIj5CRVRBPC9zdHJvbmc+CjwvZGl2PgoKICAgICAgICA8L2Rpdj4KICAgICAgICAKICA8ZGl2IGNsYXNzPSJoZWFkZXItcHJvcG9zaXRpb24iPgogIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgPGEgaHJlZj0iI3Byb3Bvc2l0aW9uLWxpbmtzIiBjbGFzcz0ianMtaGVhZGVyLXRvZ2dsZSBtZW51Ij5NZW51PC9hPgogICAgPG5hdiBpZD0icHJvcG9zaXRpb24tbWVudSI+CiAgICAgIDx1bCBpZD0icHJvcG9zaXRpb24tbGlua3MiPgogICAgICAgIDxsaT4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9idXlpbmctYW5kLXNlbGxpbmctb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPkd1aWRhbmNlPC9hPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL2hlbHAiPkhlbHA8L2E+CiAgICAgICAgPC9saT4KICAgICAgICAKCiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAKCiAgICAgICAgCiAgICAgICAgPGxpPgogICAgICAgICAgPGEgaHJlZj0iL3VzZXIvbG9naW4iPkxvZyBpbjwvYT4KICAgICAgICA8L2xpPgogICAgICAgIAogICAgICA8L3VsPgogICAgPC9uYXY+CiAgPC9kaXY+CjwvZGl2PgoKICAgICAgPC9kaXY+CiAgICA8L2hlYWRlcj4KICAgIAoKICAgIAogIAogIAogIAoKICAKICAgIDxkaXYgY2xhc3M9InVzZXItcmVzZWFyY2gtYmFubmVyIj4KICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgIDxwPgogICAgICA8c3Ryb25nIGNsYXNzPSJiYW5uZXItaGVhZGluZyI+SGVscCB1cyBpbXByb3ZlIHRoZSBEaWdpdGFsIE1hcmtldHBsYWNlPC9zdHJvbmc+CiAgICAgIDxhIAogICAgICAgIGhyZWY9IiMiIAogICAgICAgIGNsYXNzPSJ1c2VyLXJlc2VhcmNoLWJhbm5lci1jbG9zZS1idG4iCiAgICAgICAgZGF0YS1hbmFseXRpY3M9InRyYWNrRXZlbnQiCiAgICAgICAgZGF0YS1hbmFseXRpY3MtY2F0ZWdvcnk9InVzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJDbG9zZSBiYW5uZXIiCiAgICAgID5DbG9zZTwvYT4KICAgIDwvcD4KICAgIDxwPgogICAgICA8YSAKICAgICAgICBocmVmPSIvdXNlci9ub3RpZmljYXRpb25zL3VzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3M9InRyYWNrRXZlbnQiCiAgICAgICAgZGF0YS1hbmFseXRpY3MtY2F0ZWdvcnk9InVzZXItcmVzZWFyY2giCiAgICAgICAgZGF0YS1hbmFseXRpY3MtYWN0aW9uPSJWaWV3IHNpZ24gdXAgdG8gdXNlciByZXNlYXJjaCBzY3JlZW4iCiAgICAgID5TaWduIHVwIHRvIGJlIGEgcG90ZW50aWFsIHVzZXIgcmVzZWFyY2ggcGFydGljaXBhbnQ8L2E+CiAgICA8L3A+CiAgPC9kaXY+CjwvZGl2PgogIAoKCiAgICA8ZGl2IGlkPSJnbG9iYWwtaGVhZGVyLWJhciI+PC9kaXY+CgogICAgCiAgICAKICAgIAogIAogIAogICAgPGRpdiBpZD0iZ2xvYmFsLWJyZWFkY3J1bWIiIGNsYXNzPSJoZWFkZXItY29udGV4dCI+CiAgPG5hdj4KICAgIDxvbCBjbGFzcz0iZ3JvdXAiIHJvbGU9ImJyZWFkY3J1bWJzIj4KICAgICAgICA8bGk+PGEgaHJlZj0iLyI+RGlnaXRhbCBNYXJrZXRwbGFjZTwvYT48L2xpPgogICAgICAgIAogICAgICAKICAgICAgICA8bGk+PGEgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMiPlN1cHBsaWVyIG9wcG9ydHVuaXRpZXM8L2E+PC9saT4KICAgICAgICAKICAgICAgCiAgICA8L29sPgogIDwvbmF2Pgo8L2Rpdj4KICAKCiAgPGRpdiBpZD0id3JhcHBlciI+CiAgICA8bWFpbiBpZD0iY29udGVudCIgcm9sZT0ibWFpbiI+CiAgICAgIAogIAoKICAgICAgCgoKCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tdHdvLXRoaXJkcyI+CiAgICA8aGVhZGVyIGNsYXNzPSJwYWdlLWhlYWRpbmctc21hbGxlciI+CiAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1jYXB0aW9uLWwiPkhvbWUgT2ZmaWNlPC9zcGFuPgogICAgICA8aDEgY2xhc3M9ImdvdnVrLWhlYWRpbmctbCI+QzE2OTc1IFVzZXIgQ2VudHJlZCBEZXNpZ24gUGFydG5lciAxPC9oMT4KICAgICAgPHNwYW4gZGF0YS1sb3Q9ImRpZ2l0YWwtb3V0Y29tZXMiPjwvc3Bhbj4KICAgIDwvaGVhZGVyPgogIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJjb2x1bW4tb25lLXdob2xlIj4KICAgIAoKPGRpdiBjbGFzcz0ic3RhdGlzdGljLWNvbnRhaW5lciIgaWQ9ImluY29tcGxldGUtYXBwbGljYXRpb25zIj4KICAgIDxoMyBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5JbmNvbXBsZXRlIGFwcGxpY2F0aW9uczwvaDM+CiAgICA8ZGl2IGNsYXNzPSJiaWctc3RhdGlzdGljIj4zMTwvZGl2PgogICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLW5hbWUiPkluY29tcGxldGUgYXBwbGljYXRpb25zPC9kaXY+CiAgICAKICAgICAgPGRpdiBjbGFzcz0ic3RhdGlzdGljLWRlc2NyaXB0aW9uIj4yNiBTTUUsIDUgbGFyZ2U8L2Rpdj4KICAgIAogIDwvZGl2Pgo8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtY29udGFpbmVyIiBpZD0iY29tcGxldGVkLWFwcGxpY2F0aW9ucyI+CiAgICA8aDMgY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+Q29tcGxldGVkIGFwcGxpY2F0aW9uczwvaDM+CiAgICA8ZGl2IGNsYXNzPSJiaWctc3RhdGlzdGljIj4wPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJzdGF0aXN0aWMtbmFtZSI+Q29tcGxldGVkIGFwcGxpY2F0aW9uczwvZGl2PgogICAgCiAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImNvbHVtbi1vbmUtd2hvbGUiPgogICAgCgogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBJbXBvcnRhbnQgZGF0ZXMKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5QdWJsaXNoZWQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5GcmlkYXkgMjkgTm92ZW1iZXIgMjAxOTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5GcmlkYXkgNiBEZWNlbWJlciAyMDE5IGF0IDExOjU5cG0gR01UPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5DbG9zaW5nIGRhdGUgZm9yIGFwcGxpY2F0aW9uczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkZyaWRheSAxMyBEZWNlbWJlciAyMDE5IGF0IDExOjU5cG0gR01UPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtMSI+CiAgICAgIAogICAgICBPdmVydmlldwogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgT3ZlcnZpZXcKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPlN1bW1hcnkgb2YgdGhlIHdvcms8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPldl4oCZcmUgbG9va2luZyBmb3IgYSBzdXBwbGllciB3aG8gY2FuIHByb3ZpZGUgdGhlIG5lY2Vzc2FyeSBrbm93bGVkZ2UsIHNraWxscyBhbmQgZXhwZXJpZW5jZSB0byBoZWxwIG1lZXQgZGVtYW5kIGZvciB1c2VyLWNlbnRyZWQgZGVzaWduIGNhcGFiaWxpdHkgd2l0aGluIHRoZSBIb21lIE9mZmljZeKAmXMgRGlnaXRhbCwgRGF0YSBhbmQgVGVjaG5vbG9neSBkaXJlY3RvcmF0ZSwgb24gYSByYW5nZSBvZiBpbnRlcm5hbCBhbmQgcHVibGljIGZhY2luZyBzZXJ2aWNlcyBmcm9tIGRpc2NvdmVyeSB0byBsaXZlLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkxhdGVzdCBzdGFydCBkYXRlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Nb25kYXkgMTAgRmVicnVhcnkgMjAyMDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkV4cGVjdGVkIGNvbnRyYWN0IGxlbmd0aDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+MiB5ZWFyczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkxvY2F0aW9uPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkxvbmRvbjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPk9yZ2FuaXNhdGlvbiB0aGUgd29yayBpcyBmb3I8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkhvbWUgT2ZmaWNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QnVkZ2V0IHJhbmdlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtMiI+CiAgICAgIAogICAgICBBYm91dCB0aGUgd29yawogIDwvaDI+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgQWJvdXQgdGhlIHdvcmsKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPldoeSB0aGUgd29yayBpcyBiZWluZyBkb25lPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Ib21lIE9mZmljZSBjdXN0b21lcnMgYW5kIGVtcGxveWVlcyByaWdodGx5IGV4cGVjdCBtb2Rlcm4gdGVjaG5vbG9neSB3aGljaCBoZWxwcyBjdXN0b21lcnMgcmVjZWl2ZSB0aGUgc2VydmljZSB0aGV5IHJlcXVpcmUgYW5kIHN1cHBvcnRzIGVtcGxveWVlcyBpbiBwcm90ZWN0aW5nIHRoZSBwdWJsaWMuIFdlIGFyZSBpbmNyZWFzaW5nbHkgcmVsaWFudCBvbiB0ZWNobm9sb2d5IHRvIHN1cHBvcnQgdGhlIEhvbWUgT2ZmaWNlIGluIGl0cyByb2xlIHRvIGxlYWQgb24gaW1taWdyYXRpb24gYW5kIHBhc3Nwb3J0cywgZHJ1Z3MgcG9saWN5LCBjcmltZSBwb2xpY3kgYW5kIGNvdW50ZXItdGVycm9yaXNtLCBhbmQgdG8gZW5zdXJlIHZpc2libGUsIHJlc3BvbnNpdmUgYW5kIGFjY291bnRhYmxlIHBvbGljaW5nIGluIHRoZSBVSy4gV2UgbmVlZCB0byBkZXNpZ24gYW5kIGRlbGl2ZXIgdGVjaG5vbG9neSB3aGljaCBzdXBwb3J0cyB0aGUgdHJhbnNmb3JtYXRpb24gb2YgdGhlIEhvbWUgT2ZmaWNlIGFuZCB0aGUgbW9kZXJuaXNhdGlvbiBvZiBvdXIgcHJvY2Vzc2VzIG1ha2luZyB0aGVtIGZpdCBmb3IgYSBkaWdpdGFsIGZ1dHVyZS48YnI+PGJyPlRoZSB3aWRlIHJhbmdlIG9mIERpZ2l0YWwgYW5kIFRlY2hub2xvZ3kgUHJvZ3JhbW1lcyByZXF1aXJlZCB0byBzdXBwb3J0IHRoZSB3b3JrIG9mIEhvbWUgT2ZmaWNlIERpZ2l0YWwsIERhdGEgYW5kIFRlY2hub2xvZ3kgKEhPRERhVCkgbmVlZCBzdXBwbGllcnMgd2hvIGNhbiBwcm92aWRlIHRoZSBuZWNlc3Nhcnkga25vd2xlZGdlLCBza2lsbHMgYW5kIGV4cGVyaWVuY2UgdG8gaGVscCBtZWV0IGRlbWFuZCBmb3IgdXNlci1jZW50cmVkIGRlc2lnbiBjYXBhYmlsaXR5ICBvbiBhIHJhbmdlIG9mIGludGVybmFsIGFuZCBwdWJsaWMgZmFjaW5nIHNlcnZpY2VzIGZyb20gZGlzY292ZXJ5IHRvIGxpdmUuIFRoaXMgcmVxdWlyZW1lbnQgaXMgdGhlIGZpcnN0IG9mIHR3byByZXF1aXJlbWVudHMgZm9yIGEgY2VudHJhbCBERGFUIFVzZXIgQ2VudHJlZCBEZXNpZ24gU2VydmljZSBQcm92aWRlci48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Qcm9ibGVtIHRvIGJlIHNvbHZlZDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+R292ZXJubWVudCBzZXJ2aWNlcyBuZWVkIHRvIG1lZXQgdXNlciBuZWVkcy4gSG93ZXZlciwgYSBsYXJnZSBwcm9wb3J0aW9uIHN0aWxsIGZhaWwgdG8gbWVldCB0aGUgZ292ZXJubWVudCBTZXJ2aWNlIFN0YW5kYXJkIGR1ZSB0byBwYXJ0aWN1bGFyIGlzc3VlcyBhcm91bmQgdGhlIGZvbGxvd2luZyBwb2ludHM6PGJyPjxicj7il48JdW5kZXJzdGFuZGluZyB1c2VycyBhbmQgdGhlaXIgbmVlZHM8YnI+4pePCXNvbHZpbmcgYSB3aG9sZSBwcm9ibGVtIGZvciB1c2Vyczxicj7il48JbWFraW5nIHRoZSBzZXJ2aWNlIHNpbXBsZSB0byB1c2U8YnI+4pePCW1ha2luZyBzdXJlIGV2ZXJ5b25lIGNhbiB1c2UgdGhlIHNlcnZpY2U8YnI+PGJyPkdyb3dpbmcgZGVtYW5kIGZvciB1c2VyLWNlbnRyZWQgZGVzaWduIGNhcGFiaWxpdHkgbWVhbnMgd2UgbmVlZCBleHBlcnRzIGluIGNvbnRlbnQgZGVzaWduLCBpbnRlcmFjdGlvbiBkZXNpZ24sIHVzZXIgcmVzZWFyY2gsIHNlcnZpY2UgZGVzaWduIGFuZCBhY2Nlc3NpYmlsaXR5IHRvIGluY3JlYXNlIG91ciBjYXBhY2l0eSBhbmQgc3VwcG9ydCBlZmZvcnRzIHRvIGRlbGl2ZXIgdXNlci1jZW50cmVkIHNlcnZpY2VzIHRoYXQgbWVldCBTZXJ2aWNlIFN0YW5kYXJkIHJlcXVpcmVtZW50cy48YnI+PGJyPldlIG5lZWQgYW4gYWx0ZXJuYXRpdmUgcHJvY3VyZW1lbnQgcm91dGUgdG8gYXZvaWQgYSBzaG9ydGZhbGwgb2YgdGhlc2UgZXNzZW50aWFsIHNraWxscywgd2hpY2ggd291bGQgcHV0IGRlbGl2ZXJ5IHRpbWVsaW5lcyBhbmQgc3RhbmRhcmRzIGF0IHJpc2suPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V2hvIHRoZSB1c2VycyBhcmUgYW5kIHdoYXQgdGhleSBuZWVkIHRvIGRvPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Ib21lIE9mZmljZSBjdXN0b21lcnMgYW5kIHN0YWZmPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RWFybHkgbWFya2V0IGVuZ2FnZW1lbnQ8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+QW55IHdvcmsgdGhhdOKAmXMgYWxyZWFkeSBiZWVuIGRvbmU8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+RXhpc3RpbmcgdGVhbTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+QSBjaXZpbCBzZXJ2aWNlIGxlZCBtaXhlZCB0ZWFtIG9mIGNvbnRyYWN0b3JzIGFuZCBjaXZpbCBzZXJ2YW50cy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5DdXJyZW50IHBoYXNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPk5vdCBhcHBsaWNhYmxlPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0zIj4KICAgICAgCiAgICAgIFdvcmsgc2V0dXAKICA8L2gyPgogICAgIAogICAgCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIFdvcmsgc2V0dXAKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSBuYW1lPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIHZhbHVlPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkFkZHJlc3Mgd2hlcmUgdGhlIHdvcmsgd2lsbCB0YWtlIHBsYWNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGUgbWFqb3JpdHkgb2YgdGhlIHByb2dyYW1tZXMgYW5kIHByb2plY3RzIGFyZSBsb2NhdGVkIHdpdGhpbiB0aGUgTTI1IGJ1dCB0aGUgc3VjY2Vzc2Z1bCBzdXBwbGllciBtdXN0IGJlIGNhcGFibGUgb2YgcHJvdmlkaW5nIHRoZSBzZXJ2aWNlIG5hdGlvbndpZGUuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+V29ya2luZyBhcnJhbmdlbWVudHM8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkEgZmxleGlibGUgYXBwcm9hY2ggaXMgcmVxdWlyZWQgdG8gbWVldCB0aGUgbmVlZHMgb2YgZWFjaCBpbmRpdmlkdWFsIHByb2plY3QgYW5kIHByb2dyYW1tZSBvbiBhIFNPVyBiYXNpcy48L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5TZWN1cml0eSBjbGVhcmFuY2U8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlVwIHRvIFNDLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogICAgPGgyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0taGVhZGluZyIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNCI+CiAgICAgIAogICAgICBBZGRpdGlvbmFsIGluZm9ybWF0aW9uCiAgPC9oMj4KICAgICAKICAgIAogICAgCiAgICA8dGFibGUgY2xhc3M9InN1bW1hcnktaXRlbS1ib2R5Ij4KICAgIDxjYXB0aW9uIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPgogICAgICBBZGRpdGlvbmFsIGluZm9ybWF0aW9uCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5BZGRpdGlvbmFsIHRlcm1zIGFuZCBjb25kaXRpb25zPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj4xLlRyYXZlbCBleHBlbnNlcyBhcmUgcGF5YWJsZSBmb3Igam91cm5leXMgb3V0c2lkZSB0aGUgTTI1IChmb3IgR3JlYXRlciBMb25kb24gYmFzZWQgU09Xcykgb3IgZm9yIGpvdXJuZXlzIGdyZWF0ZXIgdGhhbiAxMCBtaWxlcyBvZiBvdGhlciBTT1cgYmFzZSBsb2NhdGlvbnMsIHdoZXJlIGFwcHJvdmVkIGluIGFkdmFuY2UgYnkgdGhlIGN1c3RvbWVyIGFuZCBpbiBsaW5lIHdpdGggSE8gVHJhdmVsIHBvbGljeSAoc3Vic2lzdGVuY2UgaXMgbm90IHBheWFibGUpLjxicj48YnI+Mi4gUHJvZmVzc2lvbnMgcmF0ZSBjYXBzIHdpbGwgIGJlIGFwcGxpZWQgdG8gYWxsIHJvbGVzIGF0IGFsbCBTRklBIGxldmVscy4gVGhlc2UgY2FwcyB3aWxsIGJlIHByb3ZpZGVkIHRvIHNob3J0bGlzdGVkIHN1cHBsaWVycyBidXQgdGhlIGhpZ2hlc3QgYWxsb3dhYmxlIHJhdGUgaXMgwqM2NzUgKGZvciBzZXJ2aWNlIGRlc2lnbmVycykuPGJyPjxicj4zLiBTZWFzb25hbCBmdXJsb3VnaHMgbWF5IGJlIHJlcXVpcmVkLjxicj48YnI+NC4gTWF4aW11bSBzdWItY29udHJhY3RvciBtYXJnaW4gY2FwcyB3aWxsIGJlIGFwcGxpZWQuPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy01Ij4KICAgICAgCiAgICAgIFNraWxscyBhbmQgZXhwZXJpZW5jZQogIDwvaDI+CiAgICAgCiAgICAgICAgPHA+PHAgY2xhc3M9InN1bW1hcnktaXRlbS1kZXNjcmlwdGlvbiI+CiAgICBCdXllcnMgd2lsbCB1c2UgdGhlIGVzc2VudGlhbCBhbmQgbmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZSB0byBoZWxwIHRoZW0gZXZhbHVhdGUgc3VwcGxpZXJz4oCZIHRlY2huaWNhbCBjb21wZXRlbmNlLgogIDwvcD48L3A+CiAgICAgCiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgU2tpbGxzIGFuZCBleHBlcmllbmNlCiAgICA8L2NhcHRpb24+CiAgICA8dGhlYWQgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5ncyI+CiAgICAgIDx0cj4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmctZmlyc3QiPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgbmFtZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPk9wcG9ydHVuaXR5IGF0dHJpYnV0ZSB2YWx1ZTwvc3Bhbj4KICAgICAgICAgICAgCiAgICAgICAgICA8L3RoPgogICAgICAgIAogICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5Fc3NlbnRpYWwgc2tpbGxzIGFuZCBleHBlcmllbmNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPjx1bD4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGFuZCByZWNlbnQgKHdpdGhpbiB0aGUgbGFzdCAyIHllYXJzKSBleHBlcmllbmNlIG9mICBidWlsZGluZyBzZXJ2aWNlcyB0byBtZWV0IHRoZSBnb3Zlcm5tZW504oCZcyBTZXJ2aWNlIFN0YW5kYXJkPC9saT4KICAgIAogICAgICA8bGk+UmVjZW50IGV4cGVyaWVuY2Ugb2YgcGxhY2luZyBjb250ZW50IGRlc2lnbmVycywgaW50ZXJhY3Rpb24gZGVzaWduZXJzLCB1c2VyIHJlc2VhcmNoZXJzLCBzZXJ2aWNlIGRlc2lnbmVycyBhbmQgYWNjZXNzaWJpbGl0eSBjb25zdWx0YW50cyBpbnRvIGFnaWxlIGRlbGl2ZXJ5IHRlYW1zIGluIGdvdmVybm1lbnQsIGFuZCB1bmRlcnN0YW5kaW5nIGhvdyB0aG9zZSByb2xlcyB3b3JrIHRvZ2V0aGVyPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGFuZCByZWNlbnQgKHdpdGhpbiB0aGUgbGFzdCAyIHllYXJzKSBleHBlcmllbmNlIG9mICBwcm92aW5nIHRoZSBiZW5lZml0cyBvZiBhIHVzZXItbGVkIGFwcHJvYWNoIGluIGEgZGVhZGxpbmUtZHJpdmVuIGVudmlyb25tZW50PC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGFuZCByZWNlbnQgKHdpdGhpbiB0aGUgbGFzdCAyIHllYXJzKSBleHBlcmllbmNlIG9mIGRlc2lnbmluZyBzZXJ2aWNlcyB0aGF0IG1lZXQgYm90aCB1c2VyIG5lZWRzIGFuZCBidXNpbmVzcyBvYmplY3RpdmVzPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGFuZCByZWNlbnQgKHdpdGhpbiB0aGUgbGFzdCAyIHllYXJzKSBleHBlcmllbmNlIG9mIGRlbGl2ZXJpbmcgZGlnaXRhbCBzb2x1dGlvbnMgdGhhdCBtZWV0IExldmVsIEFBIG9mIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRykgMi4xPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGFuZCByZWNlbnQgKHdpdGhpbiB0aGUgbGFzdCAyIHllYXJzKSBleHBlcmllbmNlIG9mICByZXNlYXJjaGluZyBhbmQgdW5kZXJzdGFuZGluZyB1c2VyIG5lZWRzLCBhbmQgZGVzaWduaW5nIHNlcnZpY2VzIHRvIHN1cHBvcnQgdGhlbTwvbGk+CiAgICAKICAgICAgPGxpPkRlbW9uc3RyYWJsZSBhbmQgcmVjZW50ICh3aXRoaW4gdGhlIGxhc3QgMiB5ZWFycykgZXhwZXJpZW5jZSBvZiAgYXR0cmFjdGluZyByZXNlYXJjaCBhbmQgZGVzaWduIHByb2Zlc3Npb25hbHMgd2l0aCB0aGUgZXhwZXJ0aXNlIHRvIHN1Y2Nlc3NmdWxseSB1bmRlcnN0YW5kIHVzZXIgbmVlZHMgYW5kIGRlc2lnbiBzZXJ2aWNlcyB0byBtZWV0IHRoZW08L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmFibGUgYW5kIHJlY2VudCAod2l0aGluIHRoZSBsYXN0IDIgeWVhcnMpIGV4cGVyaWVuY2Ugb2YgY29uc2lkZXJpbmcgYW5kIGluY2x1ZGluZyBwYXJ0aWNpcGFudHMgd2hvIGFyZSBkaWdpdGFsbHkgZXhjbHVkZWQgb3IgaGF2ZSBhY2Nlc3MgbmVlZHMgaW4gcmVzZWFyY2ggYW5kIGRlc2lnbiBhY3Rpdml0aWVzPC9saT4KICAgIAogICAgICA8bGk+RGVtb25zdHJhYmxlIGFuZCByZWNlbnQgKHdpdGhpbiB0aGUgbGFzdCAyIHllYXJzKSBleHBlcmllbmNlIG9mIGVuZ2FnaW5nIHRoZSB3aG9sZSBtdWx0aS1kaXNjaXBsaW5hcnkgdGVhbSB3aXRoIGEgZ29vZCB1c2VyLWNlbnRyZWQgZGVzaWduIHByb2Nlc3MgdG8gaW5jcmVhc2UgY29uc2Vuc3VzIGFuZCBjaGFsbGVuZ2UgYXNzdW1wdGlvbnM8L2xpPgogICAgCiAgICAgIDxsaT5EZW1vbnN0cmFibGUgYW5kIHJlY2VudCAod2l0aGluIHRoZSBsYXN0IDIgeWVhcnMpIGV4cGVyaWVuY2Ugb2YgIHJlY3J1aXRpbmcgYSBkaXZlcnNlIHdvcmtmb3JjZSBhbmQgcHJvbW90aW5nIGEgc3VwcG9ydGl2ZSBhbmQgaW5jbHVzaXZlIGN1bHR1cmU8L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5OaWNlLXRvLWhhdmUgc2tpbGxzIGFuZCBleHBlcmllbmNlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCiAgICA8aDIgY2xhc3M9InN1bW1hcnktaXRlbS1oZWFkaW5nIiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy02Ij4KICAgICAgCiAgICAgIEhvdyBzdXBwbGllcnMgd2lsbCBiZSBldmFsdWF0ZWQKICA8L2gyPgogICAgIAogICAgICAgIDxwPkFsbCBzdXBwbGllcnMgd2lsbCBiZSBhc2tlZCB0byBwcm92aWRlIGEgd3JpdHRlbiBwcm9wb3NhbC48L3A+CiAgICAgCiAgICAKICAgIAogICAgPHRhYmxlIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tYm9keSI+CiAgICA8Y2FwdGlvbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj4KICAgICAgSG93IHN1cHBsaWVycyB3aWxsIGJlIGV2YWx1YXRlZAogICAgPC9jYXB0aW9uPgogICAgPHRoZWFkIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZ3MiPgogICAgICA8dHI+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nLWZpcnN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+T3Bwb3J0dW5pdHkgYXR0cmlidXRlIG5hbWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgICAgIDx0aCBzY29wZT0iY29sIiBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmciPgogICAgICAgICAgICAKICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5PcHBvcnR1bml0eSBhdHRyaWJ1dGUgdmFsdWU8L3NwYW4+CiAgICAgICAgICAgIAogICAgICAgICAgPC90aD4KICAgICAgICAKICAgICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+SG93IG1hbnkgc3VwcGxpZXJzIHRvIGV2YWx1YXRlPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj40PC9zcGFuPgogICAgCiAgPC90ZD4KICAKICAgICAgICAKICAgICAgCiAgPC90cj4KICAgIAogICAgICAKICAgICAgICAKICAgICAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+UHJvcG9zYWwgY3JpdGVyaWE8L3NwYW4+CiAgICAKICA8L3RkPgogICAgICAgIAogICAgICAgICAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+PHVsPgogICAgCiAgICAgIDxsaT5Fc3NlbnRpYWwgc2tpbGxzIChmcm9tIHN0YWdlIDEpPC9saT4KICAgIAogICAgICA8bGk+QXBwcm9hY2ggYW5kIG1ldGhvZG9sb2d5PC9saT4KICAgIAogICAgICA8bGk+SG93IHRoZSBhcHByb2FjaCBtZWV0cyB0aGUgcmVxdXJpZW1lbnRzPC9saT4KICAgIAogICAgICA8bGk+T3JnYW5pc2F0aW9uIGNhcGFiaWxpdHkgdG8gcHJvdmlkZSBzcGVjaWFsaXN0IHN1cHBvcnQ8L2xpPgogICAgCiAgICAgIDxsaT5SZXBvcnRpbmcgYW5kIEdvdmVybmFuY2UgYXBwcm9hY2g8L2xpPgogICAgCiAgICAgIDxsaT5BZGRlZCBWYWx1ZTwvbGk+CiAgICAKICAgICAgPGxpPlByYWN0aWNhbCBTY2VuYXJpbzwvbGk+CiAgICAKICA8L3VsPgogIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICAgICAgCiAgICAgIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgICAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPkN1bHR1cmFsIGZpdCBjcml0ZXJpYTwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPldvcmsgYXMgYSB0ZWFtIHdpdGggb3VyIG9yZ2FuaXNhdGlvbiBhbmQgb3RoZXIgc3VwcGxpZXJzPC9saT4KICAgIAogICAgICA8bGk+U2hhcmUga25vd2xlZGdlIGFuZCBleHBlcmllbmNlIHdpdGggdGVhbSBtZW1iZXJzIGFuZCByZXBsYWNlbWVudCB0ZWFtcy48L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5QYXltZW50IGFwcHJvYWNoPC9zcGFuPgogICAgCiAgPC90ZD4KICAgICAgICAKICAgICAgICAgICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkNhcHBlZCB0aW1lIGFuZCBtYXRlcmlhbHM8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5BZGRpdGlvbmFsIGFzc2Vzc21lbnQgbWV0aG9kczwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj48dWw+CiAgICAKICAgICAgPGxpPkNhc2Ugc3R1ZHk8L2xpPgogICAgCiAgICAgIDxsaT5QcmVzZW50YXRpb248L2xpPgogICAgCiAgPC91bD4KICA8L3NwYW4+CiAgICAKICA8L3RkPgogIAogICAgICAgIAogICAgICAKICA8L3RyPgogICAgCiAgICAgIAogICAgICAgIAogICAgICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAgICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj5FdmFsdWF0aW9uIHdlaWdodGluZzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgICAgICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5UZWNobmljYWwgY29tcGV0ZW5jZTwvcD4KICAgICAgICAgIDxkaXY+NjAlPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIAogICAgICAgIAogICAgICAgIDxkaXYgY2xhc3M9Im11bHRpcXVlc3Rpb24iPgogICAgICAgICAgPHA+Q3VsdHVyYWwgZml0PC9wPgogICAgICAgICAgPGRpdj4xMCU8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgCiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibXVsdGlxdWVzdGlvbiI+CiAgICAgICAgICA8cD5QcmljZTwvcD4KICAgICAgICAgIDxkaXY+MzAlPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAgICAgCiAgICAgIAogIDwvdHI+CiAgICAKICAgICAgCiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgCgogIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImNvbHVtbi1vbmUtd2hvbGUiPgogICAgCgoKCjxoMiBjbGFzcz0ic3VtbWFyeS1pdGVtLWhlYWRpbmciIGlkPSJjbGFyaWZpY2F0aW9uLXF1ZXN0aW9ucyI+CiAgICAgIAogICAgICBRdWVzdGlvbnMgYXNrZWQgYnkgc3VwcGxpZXJzCiAgPC9oMj4KCiAgICAKICAgIDx0YWJsZSBjbGFzcz0ic3VtbWFyeS1pdGVtLWJvZHkiPgogICAgPGNhcHRpb24gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+CiAgICAgIFF1ZXN0aW9ucyBhc2tlZCBieSBzdXBwbGllcnMKICAgIDwvY2FwdGlvbj4KICAgIDx0aGVhZCBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWhlYWRpbmdzIj4KICAgICAgPHRyPgogICAgICAgIAogICAgICAgICAgPHRoIHNjb3BlPSJjb2wiIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtaGVhZGluZy1maXJzdCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aXN1YWxseS1oaWRkZW4iPlN1cHBsaWVyIHF1ZXN0aW9uPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgICAgICA8dGggc2NvcGU9ImNvbCIgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1oZWFkaW5nIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+QnV5ZXIgYW5zd2VyPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICAgIDwvdGg+CiAgICAgICAgCiAgICAgIDwvdHI+CiAgICA8L3RoZWFkPgogICAgPHRib2R5PgogICAgICAKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+MS48L3NwYW4+CiAgICAgIFRvIG5vdGU6PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+RXNzZW50aWFsIHNraWxscyByZXNwb25zZXMgd2lsbCBiZSBldmFsdWF0ZWQgYWZ0ZXIgdGhlIHdvcmQgY291bnQgaGFzIGJlZW4gY2hlY2tlZC4gSWYgdW5kZXJzY29yZXMgb3Igb3RoZXIgbWV0aG9kcyBhcmUgZW1wbG95ZWQgdG8gZmFjaWxpdGF0ZSBhIHJlc3BvbnNlIHdpdGggbW9yZSB0aGFuIDEwMCB3b3JkcywgdGhlIGV4Y2VzcyB3aWxsIGJlIHJlZGFjdGVkIGJlZm9yZSBiZWluZyBldmFsdWF0ZWQuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+Mi48L3NwYW4+CiAgICAgIElzIHRoZXJlIGFuIGluY3VtYmVudCBzdXBwbGllcj88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Oby4gVGhlcmUgaXMgYSBudW1iZXIgb2Ygc3VwcGxpZXJzIHByb3ZpZGluZyBzaW1pbGFyIHNlcnZpY2VzIHRvIGluZGl2aXVkYWwgcHJvamVjdHMgYW5kIHByb2dyYW1tZXMgYnV0IG5vIGNyb3NzIEREYVQgcGFydG5lci48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj4zLjwvc3Bhbj4KICAgICAgQ2FuIHlvdSBwbGVhc2UgY29uZmlybSB0aGUgSVIzNSBzdGF0dXMgb2YgdGhpcyB3b3JrLjwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlRoZSBET1MgZ3VpZGFuY2Ugc3RhdGVzICYjMzQ7WW91IGNhbiBvbmx5IHVzZSB0aGUgRGlnaXRhbCBPdXRjb21lcyBhbmQgU3BlY2lhbGlzdHMgZnJhbWV3b3JrIGZvciB3b3JrZXJzIHdobyBtZWV0IHRoZSBydWxlcyBmb3Igd29ya2luZyBvZmYtcGF5cm9sbCAoa25vd24gYXMg4oCYb3V0c2lkZSBJUjM14oCZKS4gJiMzNDsgVGhpcyByZXF1aXJlbWVudCBpcyB0aGVyZWZvcmUgb3V0c2lkZSBJUjM1Ljwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjQuPC9zcGFuPgogICAgICBJcyB0aGUgcmVxdWlyZW1lbnQgZm9yIGEgVVggRGVzaWduZXIgKG9yIGRlc2lnbmVycykgdG8gam9pbiBhbiBleGlzdGluZyB0ZWFtIHRvIHdvcmsgb24gY3VycmVudCBhbmQgZnV0dXJlIEhvbWUgT2ZmaWNlIGRpZ2l0YWwgcHJvamVjdHM/IElmIHNvLCBkbyB5b3UgcmVxdWlyZSB0aGUgVVggdGVhbSB0byB3b3JrIG9uLXNpdGUgd2l0aCB0aGUgZXhpc3RpbmcgdGVhbSBvciBpcyByZW1vdGUgd29yayBhY2NlcHRhYmxlPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPkFzIGRlc2NyaWJlZCBpbiB0aGUgYWR2ZXJ0LCB0aGlzIGlzIGEgcmVxdWlyZW1lbnQgZm9yIGEgcGFydG5lciB0byBoZWxwIG1lZXQgdGhlIGRlbWFuZCBmb3IgdXNlci1jZW50cmVkIGRlc2lnbiBjYXBhYmlsaXR5IHdpdGhpbiB0aGUgSG9tZSBPZmZpY2XigJlzIERpZ2l0YWwsIERhdGEgYW5kIFRlY2hub2xvZ3kgZGlyZWN0b3JhdGUsIG9uIGEgcmFuZ2Ugb2YgaW50ZXJuYWwgYW5kIHB1YmxpYyBmYWNpbmcgc2VydmljZXMgZnJvbSBkaXNjb3ZlcnkgdG8gbGl2ZS4gVGhlIGV4cGVjdGF0aW9uIGlzIHRoYXQgdGhlIG1ham9yaXR5IG9mIHRoZSB3b3JrIHdpbGwgYmUgb24tc2l0ZSAgYnV0IHNvbWUgU3RhdGVtZW50cyBvZiBXb3JrIG1heSBhbGxvdyBmb3IgcmVtb3RlIHdvcmtpbmc8L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj41Ljwvc3Bhbj4KICAgICAgV2lsbCB5b3Ugc3BvbnNvciBzdXBwbGllcnMgdGVhbSBmb3IgU0MgY2xlYXJhbmNlPzwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQiPgogICAgCiAgICAgIDxzcGFuPlllcy48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgICAgICAKICA8dHIgY2xhc3M9InN1bW1hcnktaXRlbS1yb3ciPgogICAgCiAgICAKICA8dGQgIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tZmllbGQtZmlyc3QiPgogICAgCiAgICAgIDxzcGFuPjxzcGFuIGFyaWEtbGFiZWw9InF1ZXN0aW9uIj42Ljwvc3Bhbj4KICAgICAgVGhlIHJlcXVpcmVtZW50IGFwcGVhcnMgdG8gYmUgZm9yIFVYIGRpZ2l0YWwgd29yayBhY3Jvc3MgYSB0d28teWVhciBwZXJpb2QuIERvIHlvdSBoYXZlIGFueSBlc3RpbWF0ZSBmb3IgdGhlIHZvbHVtZSBvZiB3b3JrIGFjcm9zcyB0aGlzIHBlcmlvZD88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5XZSBjdXJyZW50bHkgaGF2ZSAyNCBzdXBwbGllciByZXNvdXJjZXMgcHJvdmlkaW5nIFVDRCBzZXJ2aWNlcyBhY3Jvc3MgRERBVCBwcm9qZWN0cyBhbmQgcHJvZ3JhbW1lcywgd2hpY2ggaXMgaW5kaWNhdGl2ZSBvZiB0aGUgbGlrZWx5IHZvbHVtZSBvdmVyIHRpbWUuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+Ny48L3NwYW4+CiAgICAgIFdoYXQgaXMgdGhlIHByb2N1cmVtZW50IHRpbWV0YWJsZT88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5UaGUgdGltZXRhYmxlIGlzIHN1YmplY3QgdG8gY2hhbmdlIGJ1dCB0aGVyZSB3aWxsIGJlIGEgYnJlYWsgb3ZlciB0aGUgQ2hyaXN0bWFzIGFuZCBOZXcgWWVhciBwZXJpb2QuIFdlIHBsYW4gdG8gaXNzdWUgc3RhZ2UgMSByZXN1bHRzIG9uIDEzdGggSmFudWFyeS4gVGhlIFJlcXVlc3QgZm9yIFByb3Bvc2FsIHdpbGwgYmUgc2VudCB0byBzaG9ydGxpc3RlZCBzdXBwbGllcnMgb24gdGhlIDEzdGggSmFudWFyeSBhbmQgc2hvcnRsaXN0ZWQgc3VwcGxpZXJzIHdpbGwgaGF2ZSB0aHJlZSB3ZWVrcyB0byBzdWJtaXQgdGhlaXIgcHJvcG9zYWwuPC9zcGFuPgogICAgCiAgPC90ZD4KICAKICA8L3RyPgoKICAgICAgCiAgICAgICAgCiAgPHRyIGNsYXNzPSJzdW1tYXJ5LWl0ZW0tcm93Ij4KICAgIAogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkLWZpcnN0Ij4KICAgIAogICAgICA8c3Bhbj48c3BhbiBhcmlhLWxhYmVsPSJxdWVzdGlvbiI+OC48L3NwYW4+CiAgICAgIFdvdWxkIHlvdSBsaWtlIHRoZSBleGFtcGxlIGZvciBRNyB0byBkZW1vbnN0cmF0ZSBleHBlcmllbmNlIGluIGhlbHBpbmcgY2xpZW50cyB0byByZWNydWl0IHJlc2VhcmNoIGFuZCBkZXNpZ24gcHJvZmVzc2lvbmFscyBvciBvdXIgb3duIGV4cGVyaWVuY2VzIHdpdGggcmVjcnVpdG1lbnQ/PC9zcGFuPgogICAgCiAgPC90ZD4KICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZCI+CiAgICAKICAgICAgPHNwYW4+UGxlYXNlIHJlZmVyZW5jZSB5b3VyIG93biBleHBlcmllbmNlcyB3aXRoIHJlY3J1aXRtZW50Ljwvc3Bhbj4KICAgIAogIDwvdGQ+CiAgCiAgPC90cj4KCiAgICAgIAogICAgICAgIAogIDx0ciBjbGFzcz0ic3VtbWFyeS1pdGVtLXJvdyI+CiAgICAKICAgIAogIDx0ZCAgY2xhc3M9InN1bW1hcnktaXRlbS1maWVsZC1maXJzdCI+CiAgICAKICAgICAgPHNwYW4+PHNwYW4gYXJpYS1sYWJlbD0icXVlc3Rpb24iPjkuPC9zcGFuPgogICAgICBEbyB5b3Ugd2FudCB1cyB0byBnaXZlIG1vcmUgdGhhbiBvbmUgZXhhbXBsZSBpbiByZXNwb25zZSB0byBRMz88L3NwYW4+CiAgICAKICA8L3RkPgogICAgCiAgPHRkICBjbGFzcz0ic3VtbWFyeS1pdGVtLWZpZWxkIj4KICAgIAogICAgICA8c3Bhbj5Zb3UgbWF5IHByb3ZpZGUgb25lIG9yIG1vcmUgZXhhbXBsZXMgd2l0aGluIHRoZSAxMDAgd29yZCBjb3VudCBsaW1pdC48L3NwYW4+CiAgICAKICA8L3RkPgogIAogIDwvdHI+CgogICAgICAKICAgIDwvdGJvZHk+CiAgPC90YWJsZT4KICAKCgogIFRoZSBkZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9ucyBhYm91dCB0aGlzIG9wcG9ydHVuaXR5IHdhcyBGcmlkYXkgNiBEZWNlbWJlciAyMDE5LgoKICA8L2Rpdj4KPC9kaXY+CgoKICA8YnIvPjwhLS0gPC0gcmVtb3ZlIG9uY2UgZ3JpZCBhbmQgYm9keSBlbGVtZW50cyBoYXZlIGJlZW4gY29udmVydGVkIHRvIGdvdnVrIGZyb250ZW5kIC0tPgogIDxkaXYgY2xhc3M9ImdyaWQtcm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbHVtbi10d28tdGhpcmRzIj4KICAgICAgPGZvcm0gYWN0aW9uPSIvc3VwcGxpZXJzL29wcG9ydHVuaXRpZXMvMTA5NjYvcmVzcG9uc2VzL3N0YXJ0IiBtZXRob2Q9ImdldCI+CiAgICAgICAgCiAgCiAgICAKICAKCjxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iZ292dWstYnV0dG9uIj4KICBBcHBseSBmb3IgdGhpcyBvcHBvcnR1bml0eQo8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgPC9kaXY+CiAgPC9kaXY+CgoKCiAgICA8L21haW4+CiAgPC9kaXY+CgoKICAgIDxmb290ZXIgY2xhc3M9Imdyb3VwIGpzLWZvb3RlciIgaWQ9ImZvb3RlciIgcm9sZT0iY29udGVudGluZm8iPgoKICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXdyYXBwZXIiPgogICAgICAgIAogIDxkaXYgY2xhc3M9ImZvb3Rlci1jYXRlZ29yaWVzIj4KICA8ZGl2IGNsYXNzPSJmb290ZXItYWJvdXQiPgogICAgPGgyPgogICAgICBDb250YWN0CiAgICA8L2gyPgogICAgPHVsPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iL2hlbHAiPkRpZ2l0YWwgTWFya2V0cGxhY2UgaGVscDwvYT4KICAgICAgPC9saT4KICAgIDwvdWw+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWJ1eWVycyI+CiAgICA8aDI+CiAgICAgIEFib3V0IHRoZSBEaWdpdGFsIE1hcmtldHBsYWNlCiAgICA8L2gyPgogICAgPHVsPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2UtYnV5ZXJzLWd1aWRlIj5TZXJ2aWNlcyB5b3UgY2FuIGJ1eTwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLXN1cHBsaWVycy1ndWlkZSI+U2VydmljZXMgeW91IGNhbiBzZWxsPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9jcm93bi1jb21tZXJjaWFsLXNlcnZpY2UiPkFib3V0IENyb3duIENvbW1lcmNpYWwgU2VydmljZTwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvZ292ZXJubWVudC1kaWdpdGFsLXNlcnZpY2UiPkFib3V0IEdvdmVybm1lbnQgRGlnaXRhbCBTZXJ2aWNlPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iL2ctY2xvdWQvc3VwcGxpZXJzIj5HLUNsb3VkIHN1cHBsaWVyIEHigJNaPC9hPgogICAgICA8L2xpPgogICAgPC91bD4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJmb290ZXItc3VwcGxpZXJzIj4KICAgIDxoMj4KICAgICAgICBHdWlkYW5jZQogICAgPC9oMj4KICAgIDx1bD4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLXN1cHBsaWVycy1ndWlkZSI+QXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc3VwcGxpZXJzLWd1aWRlIj5BcHBseWluZyB0byBzZWxsIG9uIHRoZSBEaWdpdGFsIE91dGNvbWVzIGFuZCBTcGVjaWFsaXN0cyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvaG93LXRvLXNlbGwteW91ci1kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zZXJ2aWNlcyI+UmVzcG9uZGluZyB0byBidXllciByZXF1aXJlbWVudHMgb24gdGhlIERpZ2l0YWwgT3V0Y29tZXMgYW5kIFNwZWNpYWxpc3RzIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLWJ1eWVycy1ndWlkZSI+QnV5aW5nIG9uIHRoZSBHLUNsb3VkIGZyYW1ld29yazwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1idXllcnMtZ3VpZGUiPkJ1eWluZyBvbiB0aGUgRGlnaXRhbCBPdXRjb21lcyBhbmQgU3BlY2lhbGlzdHMgZnJhbWV3b3JrPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL3RoZS1jcm93bi1ob3N0aW5nLWRhdGEtY2VudHJlcy1mcmFtZXdvcmstb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPkJ1eWluZyBvbiB0aGUgQ3Jvd24gSG9zdGluZyBmcmFtZXdvcms8L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgogIDxoci8+CjwvZGl2PgoKCiAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLW1ldGEiPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLW1ldGEtaW5uZXIiPgogICAgICAgICAgICAKICAgIDxoMiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPlN1cHBvcnQgbGlua3M8L2gyPgogICAgPHVsPgogICAgICAgIDxsaT48YSBocmVmPSIvdGVybXMtYW5kLWNvbmRpdGlvbnMiIGNsYXNzPSJ0ZXJtcy1hbmQtY29uZGl0aW9ucyI+VGVybXMgYW5kIGNvbmRpdGlvbnM8L2E+PC9saT4KICAgICAgICA8bGk+PGEgaHJlZj0iL2Nvb2tpZXMiPkNvb2tpZXM8L2E+PC9saT4KICAgICAgICA8bGk+PGEgaHJlZj0iL3ByaXZhY3ktbm90aWNlIj5Qcml2YWN5IG5vdGljZTwvYT48L2xpPgogICAgICAgIDxsaT5CdWlsdCBieSB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSI+R292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2U8L2E+PC9saT4KICAgIDwvdWw+CgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ib3Blbi1nb3Zlcm5tZW50LWxpY2VuY2UiPgogICAgICAgICAgICAgIDxwIGNsYXNzPSJsb2dvIj48YSBocmVmPSJodHRwczovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9kb2Mvb3Blbi1nb3Zlcm5tZW50LWxpY2VuY2UvdmVyc2lvbi8zLyIgcmVsPSJsaWNlbnNlIj5PcGVuIEdvdmVybm1lbnQgTGljZW5jZTwvYT48L3A+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8cD5BbGwgY29udGVudCBpcyBhdmFpbGFibGUgdW5kZXIgdGhlIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIiByZWw9ImxpY2Vuc2UiPk9wZW4gR292ZXJubWVudCBMaWNlbmNlIHYzLjA8L2E+LCBleGNlcHQgd2hlcmUgb3RoZXJ3aXNlIHN0YXRlZDwvcD4KICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb3B5cmlnaHQiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2luZm9ybWF0aW9uLW1hbmFnZW1lbnQvcmUtdXNpbmctcHVibGljLXNlY3Rvci1pbmZvcm1hdGlvbi9jb3B5cmlnaHQtYW5kLXJlLXVzZS9jcm93bi1jb3B5cmlnaHQvIj4mY29weTsgQ3Jvd24gY29weXJpZ2h0PC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9mb290ZXI+CgogICAgPGRpdiBpZD0iZ2xvYmFsLWFwcC1lcnJvciIgY2xhc3M9ImFwcC1lcnJvciBoaWRkZW4iPjwvZGl2PgoKICAgIDxzY3JpcHQgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2dvdnVrLXRlbXBsYXRlLmpzPzAuMTkuMiI+PC9zY3JpcHQ+CgogICAgCiAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL3N0YXRpYy9qYXZhc2NyaXB0cy9hcHBsaWNhdGlvbi5qcz9mODRiZWExMzFiYjg4Y2NiYThkOWFkZDA0NDdiOTU0YiI+PC9zY3JpcHQ+CiAgCgoKICAgIAogICAgPHNjcmlwdD5pZiAodHlwZW9mIHdpbmRvdy5HT1ZVSyA9PT0gJ3VuZGVmaW5lZCcpIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUucmVwbGFjZSgnanMtZW5hYmxlZCcsICcnKTs8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4=
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:21 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11268
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkQ.-olrSg_aiv6vVoEwMX-FDFFBWDE
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36598'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:21 GMT
      Dm-Request-Id:
      - 52894a88a6411c77
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:21 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkQ.-olrSg_aiv6vVoEwMX-FDFFBWDE;
        Expires=Tue, 10-Dec-2019 11:57:21 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 52894a88a6411c77
      X-B3-Traceid:
      - 52894a88a6411c77
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 6baaa691-5275-43a4-4003-ec7ae5090f5d
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 a1f249a9bf642aa76e446956825f42a6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - ePdM8S0mVjEP76LAVD2Vr7ZtoXa2Ap-3gX1WLqkZRpPdm9QFQ23UAg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:21 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11290
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkQ.-olrSg_aiv6vVoEwMX-FDFFBWDE
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39430'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:22 GMT
      Dm-Request-Id:
      - 0e47b4a93fa9d37d
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:22 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkg.xPlrkPpXoxfre6w2SzD5OnUN2a8;
        Expires=Tue, 10-Dec-2019 11:57:22 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 0e47b4a93fa9d37d
      X-B3-Traceid:
      - 0e47b4a93fa9d37d
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 62fd1834-1052-4064-6640-97a5737f1f13
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 b61e218bc35668646b673c626203e5d5.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - wAwW7Bk-rzAQ4vV8zF2z6mxX199YUB_UjX7-IpAOWYtqXzOn27PVWA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:22 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11284
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkg.xPlrkPpXoxfre6w2SzD5OnUN2a8
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '42912'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:22 GMT
      Dm-Request-Id:
      - 9e456bfb1b9d3727
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:22 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkg.xPlrkPpXoxfre6w2SzD5OnUN2a8;
        Expires=Tue, 10-Dec-2019 11:57:22 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 9e456bfb1b9d3727
      X-B3-Traceid:
      - 9e456bfb1b9d3727
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b6b2aa97-f1da-4d38-5161-3bf11d6b5304
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 042fd4ca41bdb9d4d6e284c22463e309.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - 6IhWTcjaizOVfGxU09ljXQckWTxMJpMZYTaGrLVSuqjmPC7xeDWH2g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:22 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11279
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkg.xPlrkPpXoxfre6w2SzD5OnUN2a8
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '42040'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:22 GMT
      Dm-Request-Id:
      - 7aa6910462c50078
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:22 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkg.xPlrkPpXoxfre6w2SzD5OnUN2a8;
        Expires=Tue, 10-Dec-2019 11:57:22 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7aa6910462c50078
      X-B3-Traceid:
      - 7aa6910462c50078
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 38fc50bc-c48e-4091-647e-4763a466cfd1
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 83ec53fe63944bed8681c782a9a0dc49.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - Z6hlDZ_xyz49w-my_0ZfKZs1Zi5OmQDNCgzqjNSyeC-aTitIvM8O-Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:22 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11264
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkg.xPlrkPpXoxfre6w2SzD5OnUN2a8
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39455'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:23 GMT
      Dm-Request-Id:
      - f29e6efebf6a8c18
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:23 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkw.o9NBzY3O1Dr7LJyKS-tn5GJg9VM;
        Expires=Tue, 10-Dec-2019 11:57:23 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - f29e6efebf6a8c18
      X-B3-Traceid:
      - f29e6efebf6a8c18
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - d3003de7-2108-4bca-4464-db3d029fbe02
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 d96c6a517450b169095d23aff6d646a4.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - U-OU7ust3cLAubD9wiRjXuyBgDC0mCpwUYk3ngpaOxVSi1vsR-QxXQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:23 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11244
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkw.o9NBzY3O1Dr7LJyKS-tn5GJg9VM
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '37607'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 10:57:23 GMT
      Dm-Request-Id:
      - 7d860c9543ee31cb
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 10:57:23 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELkw.o9NBzY3O1Dr7LJyKS-tn5GJg9VM;
        Expires=Tue, 10-Dec-2019 11:57:23 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7d860c9543ee31cb
      X-B3-Traceid:
      - 7d860c9543ee31cb
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 2261b250-714a-4b87-61a6-36951b0f13e3
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 a1cb6e97bccd4899987b343ae5d4c252.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR3-C2
      X-Amz-Cf-Id:
      - ymhVWLz88jZCVNfA1ktIIhD8cqjhRktRby8SOINYln90bPRSkp_h1A==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 10:57:23 GMT
recorded_with: VCR 4.0.0
