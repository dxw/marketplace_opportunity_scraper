---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities?statusOpenClosed=open
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '68130'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:07 GMT
      Dm-Request-Id:
      - fcd1e9760d4b6ead
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:07 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7sw.e2fh1OU-XhBrc0FOC1xh1zz7lbk;
        Expires=Wed, 17-Jun-2020 12:17:07 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - fcd1e9760d4b6ead
      X-B3-Traceid:
      - fcd1e9760d4b6ead
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - '09e0d1d3-644d-4cf9-419b-6af4a0d2c13d'
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 b0f20dc7ed973df2db1883bc7d5fcb24.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - wEj0aOEekKzgTtY-HErSbiarlN21w1x3cihpNS2cCfZU-4hOdGttcQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIiBjbGFzcz0iZ292dWstdGVtcGxhdGUgIj4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgogICAgPHRpdGxlPgogIFN1cHBsaWVyIG9wcG9ydHVuaXRpZXMg4oCTIERpZ2l0YWwgT3V0Y29tZXMgYW5kIFNwZWNpYWxpc3RzIOKAkyBEaWdpdGFsIE1hcmtldHBsYWNlCjwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIHZpZXdwb3J0LWZpdD1jb3ZlciI+CiAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iIzBiMGMwYyIgLz4gCiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIgLz4KCiAgICAKICAgICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBzaXplcz0iMTZ4MTYgMzJ4MzIgNDh4NDgiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2Zhdmljb24uaWNvIiB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICAgIDxsaW5rIHJlbD0ibWFzay1pY29uIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1tYXNrLWljb24uc3ZnIiBjb2xvcj0iIzBiMGMwYyI+IAogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxODB4MTgwIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1hcHBsZS10b3VjaC1pY29uLTE4MHgxODAucG5nIj4KICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTY3eDE2NyIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstYXBwbGUtdG91Y2gtaWNvbi0xNjd4MTY3LnBuZyI+CiAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi5wbmciPgogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24ucG5nIj4KICAgIAoKICAgIAogIDxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0ibm9pbmRleCI+CiAgCiAgCgoKCgoKCgoKICAKICA8bWV0YSBuYW1lPSJnb29nbGUtc2l0ZS12ZXJpZmljYXRpb24iIGNvbnRlbnQ9IlRLR1NHWm5mSHB4MS1sS090aEkxN0FOdHdrN2Z6M0Y0U2JyNzdJMHBwTzAiPgoKICA8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc3RhdGljL3N0eWxlc2hlZXRzL2FwcGxpY2F0aW9uLmNzcz82Zjk3MWI0ZDdmNTNhMmU4MTY2YjNlNmE0OTdmOGYwYyIgLz4KICAKCgogICAgCiAgICAKICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iL3N0YXRpYy9pbWFnZXMvZ292dWstb3BlbmdyYXBoLWltYWdlLnBuZyI+CiAgPC9oZWFkPgogIDxib2R5IGNsYXNzPSJnb3Z1ay10ZW1wbGF0ZV9fYm9keSAiPgogICAgPHNjcmlwdD5kb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9ICgoZG9jdW1lbnQuYm9keS5jbGFzc05hbWUpID8gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgKyAnIGpzLWVuYWJsZWQnIDogJ2pzLWVuYWJsZWQnKTs8L3NjcmlwdD4KICAgIAoKICAgIAogICAgICA8YSBocmVmPSIjbWFpbi1jb250ZW50IiBjbGFzcz0iZ292dWstc2tpcC1saW5rIj5Ta2lwIHRvIG1haW4gY29udGVudDwvYT4KICAgIAoKICAgIAogIAogIAoKCgoKPGRpdiBpZD0iZG0tY29va2llLWJhbm5lciIgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXIgZ292dWstd2lkdGgtY29udGFpbmVyIiBkYXRhLW1vZHVsZT0iZG0tY29va2llLWJhbm5lciIgcm9sZT0icmVnaW9uIiBhcmlhLWRlc2NyaWJlZGJ5PSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICA8ZGl2IGNsYXNzPSJkbS1jb29raWUtYmFubmVyX193cmFwcGVyIj4KICAgIDxoMiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyBnb3Z1ay1oZWFkaW5nLW0iIGlkPSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICAgICAgQ2FuIHdlIHN0b3JlIGFuYWx5dGljcyBjb29raWVzIG9uIHlvdXIgZGV2aWNlPwogICAgPC9oMj4KICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5Ij4KICAgICAgQW5hbHl0aWNzIGNvb2tpZXMgaGVscCB1cyB1bmRlcnN0YW5kIGhvdyBvdXIgd2Vic2l0ZSBpcyBiZWluZyB1c2VkLgogICAgPC9wPgogICAgPGRpdiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fYnV0dG9ucyI+CiAgICAgIDxidXR0b24gY2xhc3M9ImdvdnVrLWJ1dHRvbiBkbS1jb29raWUtYmFubmVyX19idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uLS1hY2NlcHQiIHR5cGU9InN1Ym1pdCIgZGF0YS1hY2NlcHQtY29va2llcz0idHJ1ZSIgYXJpYS1kZXNjcmliZWRieT0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyI+CiAgICAgICAgWWVzPHNwYW4gY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+LCBEaWdpdGFsIE1hcmtldHBsYWNlIGNhbiBzdG9yZSBhbmFseXRpY3MgY29va2llcyBvbiB5b3VyIGRldmljZTwvc3Bhbj4KICAgICAgPC9idXR0b24+CiAgICAgIDxidXR0b24gY2xhc3M9ImdvdnVrLWJ1dHRvbiBkbS1jb29raWUtYmFubmVyX19idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uLS1yZWplY3QiIHR5cGU9InN1Ym1pdCIgZGF0YS1hY2NlcHQtY29va2llcz0iZmFsc2UiIGFyaWEtZGVzY3JpYmVkYnk9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmciPgogICAgICAgIE5vPHNwYW4gY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+LCBEaWdpdGFsIE1hcmtldHBsYWNlIGNhbm5vdCBzdG9yZSBhbmFseXRpY3MgY29va2llcyBvbiB5b3VyIGRldmljZTwvc3Bhbj4KICAgICAgPC9idXR0b24+CiAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIGRtLWNvb2tpZS1iYW5uZXJfX2xpbmsiIGhyZWY9Ii9jb29raWVzIj5Ib3cgRGlnaXRhbCBNYXJrZXRwbGFjZSB1c2VzIGNvb2tpZXM8L2E+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPGRpdiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fY29uZmlybWF0aW9uIiB0YWJpbmRleD0iLTEiPgogICAgPHAgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2NvbmZpcm1hdGlvbi1tZXNzYWdlIGdvdnVrLWJvZHkiPgogICAgICBZb3UgY2FuIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvdXNlci9jb29raWUtc2V0dGluZ3MiPmNoYW5nZSB5b3VyIGNvb2tpZSBzZXR0aW5nczwvYT4gYXQgYW55IHRpbWUuCiAgICA8L3A+CiAgICA8YnV0dG9uIGNsYXNzPSJkbS1jb29raWUtYmFubmVyX19oaWRlLWJ1dHRvbiBnb3Z1ay1saW5rIiBkYXRhLWhpZGUtY29va2llLWJhbm5lcj0idHJ1ZSIgcm9sZT0ibGluayI+SGlkZTwvYnV0dG9uPgogIDwvZGl2Pgo8L2Rpdj4KCiAgCgoKCgoKICAKICAKCgoKICAKCjxoZWFkZXIgY2xhc3M9ImdvdnVrLWhlYWRlciAiIHJvbGU9ImJhbm5lciIgZGF0YS1tb2R1bGU9ImhlYWRlciI+CiAgPGRpdiBjbGFzcz0iZ292dWstaGVhZGVyX19jb250YWluZXIgZ292dWstd2lkdGgtY29udGFpbmVyIj4KCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ28iPgogICAgICA8YSBocmVmPSIvIiBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIGdvdnVrLWhlYWRlcl9fbGluay0taG9tZXBhZ2UiPgogICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlIj4KICAgICAgICAgIAogICAgICAgICAgPHN2ZwogICAgICAgICAgICByb2xlPSJwcmVzZW50YXRpb24iCiAgICAgICAgICAgIGZvY3VzYWJsZT0iZmFsc2UiCiAgICAgICAgICAgIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLWNyb3duIgogICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgIHZpZXdib3g9IjAgMCAxMzIgOTciCiAgICAgICAgICAgIGhlaWdodD0iMzIiCiAgICAgICAgICAgIHdpZHRoPSIzNiIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICBkPSJNMjUgMzAuMmMzLjUgMS41IDcuNy0uMiA5LjEtMy43IDEuNS0zLjYtLjItNy44LTMuOS05LjItMy42LTEuNC03LjYuMy05LjEgMy45LTEuNCAzLjUuMyA3LjUgMy45IDl6TTkgMzkuNWMzLjYgMS41IDcuOC0uMiA5LjItMy43IDEuNS0zLjYtLjItNy44LTMuOS05LjEtMy42LTEuNS03LjYuMi05LjEgMy44LTEuNCAzLjUuMyA3LjUgMy44IDl6TTQuNCA1Ny4yYzMuNSAxLjUgNy43LS4yIDkuMS0zLjggMS41LTMuNi0uMi03LjctMy45LTkuMS0zLjUtMS41LTcuNi4zLTkuMSAzLjgtMS40IDMuNS4zIDcuNiAzLjkgOS4xem0zOC4zLTIxLjRjMy41IDEuNSA3LjctLjIgOS4xLTMuOCAxLjUtMy42LS4yLTcuNy0zLjktOS4xLTMuNi0xLjUtNy42LjMtOS4xIDMuOC0xLjMgMy42LjQgNy43IDMuOSA5LjF6bTY0LjQtNS42Yy0zLjYgMS41LTcuOC0uMi05LjEtMy43LTEuNS0zLjYuMi03LjggMy44LTkuMiAzLjYtMS40IDcuNy4zIDkuMiAzLjkgMS4zIDMuNS0uNCA3LjUtMy45IDl6bTE1LjkgOS4zYy0zLjYgMS41LTcuNy0uMi05LjEtMy43LTEuNS0zLjYuMi03LjggMy43LTkuMSAzLjYtMS41IDcuNy4yIDkuMiAzLjggMS41IDMuNS0uMyA3LjUtMy44IDl6bTQuNyAxNy43Yy0zLjYgMS41LTcuOC0uMi05LjItMy44LTEuNS0zLjYuMi03LjcgMy45LTkuMSAzLjYtMS41IDcuNy4zIDkuMiAzLjggMS4zIDMuNS0uNCA3LjYtMy45IDkuMXpNODkuMyAzNS44Yy0zLjYgMS41LTcuOC0uMi05LjItMy44LTEuNC0zLjYuMi03LjcgMy45LTkuMSAzLjYtMS41IDcuNy4zIDkuMiAzLjggMS40IDMuNi0uMyA3LjctMy45IDkuMXpNNjkuNyAxNy43bDguOSA0LjdWOS4zbC04LjkgMi44Yy0uMi0uMy0uNS0uNi0uOS0uOUw3Mi40IDBINTkuNmwzLjUgMTEuMmMtLjMuMy0uNi41LS45LjlsLTguOC0yLjh2MTMuMWw4LjgtNC43Yy4zLjMuNi43LjkuOWwtNSAxNS40di4xYy0uMi44LS40IDEuNi0uNCAyLjQgMCA0LjEgMy4xIDcuNSA3IDguMWguMmMuMyAwIC43LjEgMSAuMS40IDAgLjcgMCAxLS4xaC4yYzQtLjYgNy4xLTQuMSA3LjEtOC4xIDAtLjgtLjEtMS43LS40LTIuNFYzNGwtNS4xLTE1LjRjLjQtLjIuNy0uNiAxLS45ek02NiA5Mi44YzE2LjkgMCAzMi44IDEuMSA0Ny4xIDMuMiA0LTE2LjkgOC45LTI2LjcgMTQtMzMuNWwtOS42LTMuNGMxIDQuOSAxLjEgNy4yIDAgMTAuMi0xLjUtMS40LTMtNC4zLTQuMi04LjdMMTA4LjYgNzZjMi44LTIgNS0zLjIgNy41LTMuMy00LjQgOS40LTEwIDExLjktMTMuNiAxMS4yLTQuMy0uOC02LjMtNC42LTUuNi03LjkgMS00LjcgNS43LTUuOSA4LS41IDQuMy04LjctMy0xMS40LTcuNi04LjggNy4xLTcuMiA3LjktMTMuNSAyLjEtMjEuMS04IDYuMS04LjEgMTIuMy00LjUgMjAuOC00LjctNS40LTEyLjEtMi41LTkuNSA2LjIgMy40LTUuMiA3LjktMiA3LjIgMy4xLS42IDQuMy02LjQgNy44LTEzLjUgNy4yLTEwLjMtLjktMTAuOS04LTExLjItMTMuOCAyLjUtLjUgNy4xIDEuOCAxMSA3LjNMODAuMiA2MGMtNC4xIDQuNC04IDUuMy0xMi4zIDUuNCAxLjQtNC40IDgtMTEuNiA4LTExLjZINTUuNXM2LjQgNy4yIDcuOSAxMS42Yy00LjItLjEtOC0xLTEyLjMtNS40bDEuNCAxNi40YzMuOS01LjUgOC41LTcuNyAxMC45LTcuMy0uMyA1LjgtLjkgMTIuOC0xMS4xIDEzLjgtNy4yLjYtMTIuOS0yLjktMTMuNS03LjItLjctNSAzLjgtOC4zIDcuMS0zLjEgMi43LTguNy00LjYtMTEuNi05LjQtNi4yIDMuNy04LjUgMy42LTE0LjctNC42LTIwLjgtNS44IDcuNi01IDEzLjkgMi4yIDIxLjEtNC43LTIuNi0xMS45LjEtNy43IDguOCAyLjMtNS41IDcuMS00LjIgOC4xLjUuNyAzLjMtMS4zIDcuMS01LjcgNy45LTMuNS43LTktMS44LTEzLjUtMTEuMiAyLjUuMSA0LjcgMS4zIDcuNSAzLjNsLTQuNy0xNS40Yy0xLjIgNC40LTIuNyA3LjItNC4zIDguNy0xLjEtMy0uOS01LjMgMC0xMC4ybC05LjUgMy40YzUgNi45IDkuOSAxNi43IDE0IDMzLjUgMTQuOC0yLjEgMzAuOC0zLjIgNDcuNy0zLjJ6IgogICAgICAgICAgICA+PC9wYXRoPgogICAgICAgICAgICAKICAgICAgICAgICAgPGltYWdlIHNyYz0iL2Fzc2V0cy9pbWFnZXMvZ292dWstbG9nb3R5cGUtY3Jvd24ucG5nIiB4bGluazpocmVmPSIiIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLWNyb3duLWZhbGxiYWNrLWltYWdlIiB3aWR0aD0iMzYiIGhlaWdodD0iMzIiPjwvaW1hZ2U+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLXRleHQiPgogICAgICAgICAgICBHT1YuVUsKICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImdvdnVrLWhlYWRlcl9fcHJvZHVjdC1uYW1lIj4KICAgICAgICAgIERpZ2l0YWwgTWFya2V0cGxhY2UKICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgIDwvYT4KICAgIDwvZGl2PgogICAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2NvbnRlbnQiPgoKICAgIAoKICAgIAogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbWVudS1idXR0b24ganMtaGVhZGVyLXRvZ2dsZSIgYXJpYS1jb250cm9scz0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iU2hvdyBvciBoaWRlIFRvcCBMZXZlbCBOYXZpZ2F0aW9uIj5NZW51PC9idXR0b24+CiAgICA8bmF2PgogICAgICA8dWwgaWQ9Im5hdmlnYXRpb24iIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24gIiBhcmlhLWxhYmVsPSJUb3AgTGV2ZWwgTmF2aWdhdGlvbiI+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24taXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2J1eWluZy1hbmQtc2VsbGluZy1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+CiAgICAgICAgICAgICAgICBHdWlkYW5jZQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstaGVhZGVyX19uYXZpZ2F0aW9uLWl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xpbmsiIGhyZWY9Ii9oZWxwIj4KICAgICAgICAgICAgICAgIEhlbHAKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbmF2aWdhdGlvbi1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIiBocmVmPSIvdXNlci9sb2dpbiI+CiAgICAgICAgICAgICAgICBMb2cgaW4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAKICAgICAgPC91bD4KICAgIDwvbmF2PgogICAgCiAgICA8L2Rpdj4KICAgIAogIDwvZGl2Pgo8L2hlYWRlcj4KCgogICAgCiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLXdpZHRoLWNvbnRhaW5lciI+CiAgICAgICAgCiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1waGFzZS1iYW5uZXIiPgogIDxwIGNsYXNzPSJnb3Z1ay1waGFzZS1iYW5uZXJfX2NvbnRlbnQiPjxzdHJvbmcgY2xhc3M9ImdvdnVrLXRhZyBnb3Z1ay1waGFzZS1iYW5uZXJfX2NvbnRlbnRfX3RhZyAiPgogIGJldGEKPC9zdHJvbmc+PHNwYW4gY2xhc3M9ImdvdnVrLXBoYXNlLWJhbm5lcl9fdGV4dCI+CiAgICAgIEhlbHAgdXMgaW1wcm92ZSB0aGUgRGlnaXRhbCBNYXJrZXRwbGFjZSAtIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvaGVscCI+c2VuZCB5b3VyIGZlZWRiYWNrPC9hPgogICAgPC9zcGFuPgogIDwvcD4KPC9kaXY+CiAgCiAgCjxkaXYgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzIj4KICA8b2wgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0Ij4KICAKICAgIAogICAgPGxpIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdC1pdGVtIj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saW5rIiBocmVmPSIvIj5EaWdpdGFsIE1hcmtldHBsYWNlPC9hPgogICAgPC9saT4KICAgIAogIAogICAgCiAgICA8bGkgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0LWl0ZW0iIGFyaWEtY3VycmVudD0icGFnZSI+U3VwcGxpZXIgb3Bwb3J0dW5pdGllczwvbGk+CiAgICAKICAKICA8L29sPgo8L2Rpdj4KCgogICAgICAgIDxtYWluIGNsYXNzPSJnb3Z1ay1tYWluLXdyYXBwZXIgIiBpZD0ibWFpbi1jb250ZW50IiByb2xlPSJtYWluIj4KICAgICAgICAgIAogIAogIAoKICAKICAgIAogIAogIAoKPHNlY3Rpb24gaWQ9InNlYXJjaC1wYWdlLWhlYWRpbmciPgoKPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLXR3by10aGlyZHMiPgogICAgPGgxIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLXhsIj5EaWdpdGFsIE91dGNvbWVzIGFuZCBTcGVjaWFsaXN0cyBvcHBvcnR1bml0aWVzPC9oMT4KICAgIDxkaXYgY2xhc3M9Im1hcmtldHBsYWNlLXBhcmFncmFwaCI+CiAgICAgIDxwPlZpZXcgYnV5ZXIgcmVxdWlyZW1lbnRzIGZvciBkaWdpdGFsIG91dGNvbWVzLCBkaWdpdGFsIHNwZWNpYWxpc3RzIGFuZCB1c2VyIHJlc2VhcmNoIHBhcnRpY2lwYW50cy48L3A+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+Cgo8L3NlY3Rpb24+Cgo8ZGl2IGlkPSJqcy1kbS1saXZlLXNlYXJjaC13cmFwcGVyIiBjbGFzcz0iZ292dWstZ3JpZC1yb3cgc2VhcmNoLXJlc3VsdHMtcGFnZSI+CiAgCgogIDxmb3JtIGFjdGlvbj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMiIG1ldGhvZD0iZ2V0IiBpZD0ianMtZG0tbGl2ZS1zZWFyY2gtZm9ybSI+CiAgICA8c2VjdGlvbiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tb25lLXRoaXJkIHNlYXJjaC1wYWdlLWZpbHRlcnMiIGFyaWEtbGFiZWw9IlNlYXJjaCBmaWx0ZXJzIj4KICAgICAgICAgIAogIDxkaXYgY2xhc3M9ImdvdnVrLW9wdGlvbi1zZWxlY3QgZmlsdGVyLWZpZWxkLXRleHQiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1oZWFkIj4KICAgIDxsYWJlbCBjbGFzcz0ib3B0aW9uLXNlbGVjdC1sYWJlbCIgZm9yPSJrZXl3b3JkcyI+CiAgICAgIEtleXdvcmQgc2VhcmNoCiAgICA8L2xhYmVsPgogIDwvZGl2PgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1zZWFyY2giPgogICAgPGlucHV0IHR5cGU9InNlYXJjaCIgbmFtZT0icSIgaWQ9ImtleXdvcmRzIiB2YWx1ZT0iIiBtYXhsZW5ndGg9IjIwMCI+CiAgICA8aW5wdXQgY2xhc3M9InN1Ym1pdCIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iU2VhcmNoIj4KICA8L2Rpdj4KPC9kaXY+CgoKPGRpdiBpZD0ianMtZG0tbGl2ZS1zZWFyY2gtY2F0ZWdvcmllcyIgY2xhc3M9ImpzLWRtLWxpdmUtc2VhcmNoLWZhZGUiPgogIDxkaXYgY2xhc3M9ImxvdC1maWx0ZXJzIj4KICAgIDxoMj5DaG9vc2UgYSBjYXRlZ29yeTwvaDI+CiAgICAKICAgIAogIAoKICAKICAKICAKCiAgPHVsID4KICAgIAogICAgICAKICAgICAgICAgCiAgCiAgICA8bGkgYXJpYS1jdXJyZW50PSJwYWdlIj48c3Ryb25nPkFsbCBjYXRlZ29yaWVzPC9zdHJvbmc+CiAgCgogIAogICAgCiAgCgogIAogIAogIAoKICA8dWwgY2xhc3M9ImxvdC1maWx0ZXJzLS1sYXN0LWxpc3QiPgogICAgCiAgICAgIAogICAgICAgIDxsaT48YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXM/c3RhdHVzT3BlbkNsb3NlZD1vcGVuJmFtcDtsb3Q9ZGlnaXRhbC1vdXRjb21lcyI+RGlnaXRhbCBvdXRjb21lcyAoMTUpPC9hPjwvbGk+CiAgICAgIAogICAgCiAgICAgIAogICAgICAgIDxsaT48YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXM/c3RhdHVzT3BlbkNsb3NlZD1vcGVuJmFtcDtsb3Q9ZGlnaXRhbC1zcGVjaWFsaXN0cyI+RGlnaXRhbCBzcGVjaWFsaXN0cyAoMTMpPC9hPjwvbGk+CiAgICAgIAogICAgCiAgICAgIAogICAgICAgIDxsaT48YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXM/c3RhdHVzT3BlbkNsb3NlZD1vcGVuJmFtcDtsb3Q9dXNlci1yZXNlYXJjaC1wYXJ0aWNpcGFudHMiPlVzZXIgcmVzZWFyY2ggcGFydGljaXBhbnRzICgxKTwvYT48L2xpPgogICAgICAKICAgIAogIDwvdWw+CiAgCiAgPC9saT4KICAgICAgCiAgICAKICA8L3VsPgogIDwvZGl2Pgo8L2Rpdj4KCgoKPGRpdiBjbGFzcz0iZG0tZmlsdGVycyI+CiAgICA8ZGl2IGlkPSJqcy1kbS1saXZlLWZpbHRlci10aXRsZSIgY2xhc3M9ImRtLWZpbHRlci10aXRsZSBqcy1kbS1saXZlLXNlYXJjaC1mYWRlIj4KICAgIDxoMiBjbGFzcz0iYXBwbHktZmlsdGVycy10aXRsZSI+QXBwbHkgZmlsdGVyczwvaDI+CiAgICA8YSBpZD0iZG0tY2xlYXItYWxsLWZpbHRlcnMiIGNsYXNzPSJjbGVhci1maWx0ZXJzLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzIiByb2xlPSJidXR0b24iPkNsZWFyIGZpbHRlcnM8L2E+CiAgPC9kaXY+CiAgPGRpdj4KICAgIAogICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1vcHRpb24tc2VsZWN0IiA+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWhlYWQganMtY29udGFpbmVyLWhlYWQiPgogICAgPGRpdiBjbGFzcz0ib3B0aW9uLXNlbGVjdC1sYWJlbCI+U3RhdHVzPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0ib3B0aW9ucy1jb250YWluZXIiIGlkPSJzdGF0dXMiIGRhdGEtZnJhbWV3b3JrPSJkaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cyIgPgogICAgPGRpdiBjbGFzcz0ianMtYXV0by1oZWlnaHQtaW5uZXIiPgogICAgICAKICAgICAgICA8bGFiZWwgZm9yPSJzdGF0dXNPcGVuQ2xvc2VkLW9wZW4iPgogICAgICAgICAgPGlucHV0IG5hbWU9InN0YXR1c09wZW5DbG9zZWQiIHZhbHVlPSJvcGVuIiBpZD0ic3RhdHVzT3BlbkNsb3NlZC1vcGVuIiB0eXBlPSJjaGVja2JveCIgYXJpYS1jb250cm9scz0ic2VhcmNoLXN1bW1hcnktYWNjZXNzaWJsZS1oaW50LXdyYXBwZXIiIGNoZWNrZWQ9ImNoZWNrZWQiPgogICAgICAgICAgT3BlbgogICAgICAgIDwvbGFiZWw+CiAgICAgIAogICAgICAgIDxsYWJlbCBmb3I9InN0YXR1c09wZW5DbG9zZWQtY2xvc2VkIj4KICAgICAgICAgIDxpbnB1dCBuYW1lPSJzdGF0dXNPcGVuQ2xvc2VkIiB2YWx1ZT0iY2xvc2VkIiBpZD0ic3RhdHVzT3BlbkNsb3NlZC1jbG9zZWQiIHR5cGU9ImNoZWNrYm94IiBhcmlhLWNvbnRyb2xzPSJzZWFyY2gtc3VtbWFyeS1hY2Nlc3NpYmxlLWhpbnQtd3JhcHBlciI+CiAgICAgICAgICBDbG9zZWQKICAgICAgICA8L2xhYmVsPgogICAgICAKICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KICAgICAgCiAgICAKICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZ292dWstb3B0aW9uLXNlbGVjdCIgPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1oZWFkIGpzLWNvbnRhaW5lci1oZWFkIj4KICAgIDxkaXYgY2xhc3M9Im9wdGlvbi1zZWxlY3QtbGFiZWwiPkxvY2F0aW9uPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0ib3B0aW9ucy1jb250YWluZXIiIGlkPSJsb2NhdGlvbiIgZGF0YS1mcmFtZXdvcms9ImRpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzIiA+CiAgICA8ZGl2IGNsYXNzPSJqcy1hdXRvLWhlaWdodC1pbm5lciI+CiAgICAgIAogICAgICAgIDxsYWJlbCBmb3I9ImxvY2F0aW9uLXNjb3RsYW5kIj4KICAgICAgICAgIDxpbnB1dCBuYW1lPSJsb2NhdGlvbiIgdmFsdWU9InNjb3RsYW5kIiBpZD0ibG9jYXRpb24tc2NvdGxhbmQiIHR5cGU9ImNoZWNrYm94IiBhcmlhLWNvbnRyb2xzPSJzZWFyY2gtc3VtbWFyeS1hY2Nlc3NpYmxlLWhpbnQtd3JhcHBlciI+CiAgICAgICAgICBTY290bGFuZAogICAgICAgIDwvbGFiZWw+CiAgICAgIAogICAgICAgIDxsYWJlbCBmb3I9ImxvY2F0aW9uLW5vcnRoLWVhc3QtZW5nbGFuZCI+CiAgICAgICAgICA8aW5wdXQgbmFtZT0ibG9jYXRpb24iIHZhbHVlPSJub3J0aCBlYXN0IGVuZ2xhbmQiIGlkPSJsb2NhdGlvbi1ub3J0aC1lYXN0LWVuZ2xhbmQiIHR5cGU9ImNoZWNrYm94IiBhcmlhLWNvbnRyb2xzPSJzZWFyY2gtc3VtbWFyeS1hY2Nlc3NpYmxlLWhpbnQtd3JhcHBlciI+CiAgICAgICAgICBOb3J0aCBFYXN0IEVuZ2xhbmQKICAgICAgICA8L2xhYmVsPgogICAgICAKICAgICAgICA8bGFiZWwgZm9yPSJsb2NhdGlvbi1ub3J0aC13ZXN0LWVuZ2xhbmQiPgogICAgICAgICAgPGlucHV0IG5hbWU9ImxvY2F0aW9uIiB2YWx1ZT0ibm9ydGggd2VzdCBlbmdsYW5kIiBpZD0ibG9jYXRpb24tbm9ydGgtd2VzdC1lbmdsYW5kIiB0eXBlPSJjaGVja2JveCIgYXJpYS1jb250cm9scz0ic2VhcmNoLXN1bW1hcnktYWNjZXNzaWJsZS1oaW50LXdyYXBwZXIiPgogICAgICAgICAgTm9ydGggV2VzdCBFbmdsYW5kCiAgICAgICAgPC9sYWJlbD4KICAgICAgCiAgICAgICAgPGxhYmVsIGZvcj0ibG9jYXRpb24teW9ya3NoaXJlLWFuZC10aGUtaHVtYmVyIj4KICAgICAgICAgIDxpbnB1dCBuYW1lPSJsb2NhdGlvbiIgdmFsdWU9InlvcmtzaGlyZSBhbmQgdGhlIGh1bWJlciIgaWQ9ImxvY2F0aW9uLXlvcmtzaGlyZS1hbmQtdGhlLWh1bWJlciIgdHlwZT0iY2hlY2tib3giIGFyaWEtY29udHJvbHM9InNlYXJjaC1zdW1tYXJ5LWFjY2Vzc2libGUtaGludC13cmFwcGVyIj4KICAgICAgICAgIFlvcmtzaGlyZSBhbmQgdGhlIEh1bWJlcgogICAgICAgIDwvbGFiZWw+CiAgICAgIAogICAgICAgIDxsYWJlbCBmb3I9ImxvY2F0aW9uLWVhc3QtbWlkbGFuZHMiPgogICAgICAgICAgPGlucHV0IG5hbWU9ImxvY2F0aW9uIiB2YWx1ZT0iZWFzdCBtaWRsYW5kcyIgaWQ9ImxvY2F0aW9uLWVhc3QtbWlkbGFuZHMiIHR5cGU9ImNoZWNrYm94IiBhcmlhLWNvbnRyb2xzPSJzZWFyY2gtc3VtbWFyeS1hY2Nlc3NpYmxlLWhpbnQtd3JhcHBlciI+CiAgICAgICAgICBFYXN0IE1pZGxhbmRzCiAgICAgICAgPC9sYWJlbD4KICAgICAgCiAgICAgICAgPGxhYmVsIGZvcj0ibG9jYXRpb24td2VzdC1taWRsYW5kcyI+CiAgICAgICAgICA8aW5wdXQgbmFtZT0ibG9jYXRpb24iIHZhbHVlPSJ3ZXN0IG1pZGxhbmRzIiBpZD0ibG9jYXRpb24td2VzdC1taWRsYW5kcyIgdHlwZT0iY2hlY2tib3giIGFyaWEtY29udHJvbHM9InNlYXJjaC1zdW1tYXJ5LWFjY2Vzc2libGUtaGludC13cmFwcGVyIj4KICAgICAgICAgIFdlc3QgTWlkbGFuZHMKICAgICAgICA8L2xhYmVsPgogICAgICAKICAgICAgICA8bGFiZWwgZm9yPSJsb2NhdGlvbi1lYXN0LW9mLWVuZ2xhbmQiPgogICAgICAgICAgPGlucHV0IG5hbWU9ImxvY2F0aW9uIiB2YWx1ZT0iZWFzdCBvZiBlbmdsYW5kIiBpZD0ibG9jYXRpb24tZWFzdC1vZi1lbmdsYW5kIiB0eXBlPSJjaGVja2JveCIgYXJpYS1jb250cm9scz0ic2VhcmNoLXN1bW1hcnktYWNjZXNzaWJsZS1oaW50LXdyYXBwZXIiPgogICAgICAgICAgRWFzdCBvZiBFbmdsYW5kCiAgICAgICAgPC9sYWJlbD4KICAgICAgCiAgICAgICAgPGxhYmVsIGZvcj0ibG9jYXRpb24td2FsZXMiPgogICAgICAgICAgPGlucHV0IG5hbWU9ImxvY2F0aW9uIiB2YWx1ZT0id2FsZXMiIGlkPSJsb2NhdGlvbi13YWxlcyIgdHlwZT0iY2hlY2tib3giIGFyaWEtY29udHJvbHM9InNlYXJjaC1zdW1tYXJ5LWFjY2Vzc2libGUtaGludC13cmFwcGVyIj4KICAgICAgICAgIFdhbGVzCiAgICAgICAgPC9sYWJlbD4KICAgICAgCiAgICAgICAgPGxhYmVsIGZvcj0ibG9jYXRpb24tbG9uZG9uIj4KICAgICAgICAgIDxpbnB1dCBuYW1lPSJsb2NhdGlvbiIgdmFsdWU9ImxvbmRvbiIgaWQ9ImxvY2F0aW9uLWxvbmRvbiIgdHlwZT0iY2hlY2tib3giIGFyaWEtY29udHJvbHM9InNlYXJjaC1zdW1tYXJ5LWFjY2Vzc2libGUtaGludC13cmFwcGVyIj4KICAgICAgICAgIExvbmRvbgogICAgICAgIDwvbGFiZWw+CiAgICAgIAogICAgICAgIDxsYWJlbCBmb3I9ImxvY2F0aW9uLXNvdXRoLWVhc3QtZW5nbGFuZCI+CiAgICAgICAgICA8aW5wdXQgbmFtZT0ibG9jYXRpb24iIHZhbHVlPSJzb3V0aCBlYXN0IGVuZ2xhbmQiIGlkPSJsb2NhdGlvbi1zb3V0aC1lYXN0LWVuZ2xhbmQiIHR5cGU9ImNoZWNrYm94IiBhcmlhLWNvbnRyb2xzPSJzZWFyY2gtc3VtbWFyeS1hY2Nlc3NpYmxlLWhpbnQtd3JhcHBlciI+CiAgICAgICAgICBTb3V0aCBFYXN0IEVuZ2xhbmQKICAgICAgICA8L2xhYmVsPgogICAgICAKICAgICAgICA8bGFiZWwgZm9yPSJsb2NhdGlvbi1zb3V0aC13ZXN0LWVuZ2xhbmQiPgogICAgICAgICAgPGlucHV0IG5hbWU9ImxvY2F0aW9uIiB2YWx1ZT0ic291dGggd2VzdCBlbmdsYW5kIiBpZD0ibG9jYXRpb24tc291dGgtd2VzdC1lbmdsYW5kIiB0eXBlPSJjaGVja2JveCIgYXJpYS1jb250cm9scz0ic2VhcmNoLXN1bW1hcnktYWNjZXNzaWJsZS1oaW50LXdyYXBwZXIiPgogICAgICAgICAgU291dGggV2VzdCBFbmdsYW5kCiAgICAgICAgPC9sYWJlbD4KICAgICAgCiAgICAgICAgPGxhYmVsIGZvcj0ibG9jYXRpb24tbm9ydGhlcm4taXJlbGFuZCI+CiAgICAgICAgICA8aW5wdXQgbmFtZT0ibG9jYXRpb24iIHZhbHVlPSJub3J0aGVybiBpcmVsYW5kIiBpZD0ibG9jYXRpb24tbm9ydGhlcm4taXJlbGFuZCIgdHlwZT0iY2hlY2tib3giIGFyaWEtY29udHJvbHM9InNlYXJjaC1zdW1tYXJ5LWFjY2Vzc2libGUtaGludC13cmFwcGVyIj4KICAgICAgICAgIE5vcnRoZXJuIElyZWxhbmQKICAgICAgICA8L2xhYmVsPgogICAgICAKICAgICAgICA8bGFiZWwgZm9yPSJsb2NhdGlvbi1pbnRlcm5hdGlvbmFsLShvdXRzaWRlLXRoZS11aykiPgogICAgICAgICAgPGlucHV0IG5hbWU9ImxvY2F0aW9uIiB2YWx1ZT0iaW50ZXJuYXRpb25hbCAob3V0c2lkZSB0aGUgdWspIiBpZD0ibG9jYXRpb24taW50ZXJuYXRpb25hbC0ob3V0c2lkZS10aGUtdWspIiB0eXBlPSJjaGVja2JveCIgYXJpYS1jb250cm9scz0ic2VhcmNoLXN1bW1hcnktYWNjZXNzaWJsZS1oaW50LXdyYXBwZXIiPgogICAgICAgICAgSW50ZXJuYXRpb25hbCAob3V0c2lkZSB0aGUgVUspCiAgICAgICAgPC9sYWJlbD4KICAgICAgCiAgICAgICAgPGxhYmVsIGZvcj0ibG9jYXRpb24tb2Zmc2l0ZSI+CiAgICAgICAgICA8aW5wdXQgbmFtZT0ibG9jYXRpb24iIHZhbHVlPSJvZmZzaXRlIiBpZD0ibG9jYXRpb24tb2Zmc2l0ZSIgdHlwZT0iY2hlY2tib3giIGFyaWEtY29udHJvbHM9InNlYXJjaC1zdW1tYXJ5LWFjY2Vzc2libGUtaGludC13cmFwcGVyIj4KICAgICAgICAgIE9mZi1zaXRlCiAgICAgICAgPC9sYWJlbD4KICAgICAgCiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+CiAgICAgIAogICAgCiAgPC9kaXY+CiAgCiAgCiAgICAKICAKCjxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iZ292dWstYnV0dG9uIGpzLWhpZGRlbiBqcy1kbS1saXZlLXNlYXJjaCIgYXJpYS1jb250cm9scz0ic2VhcmNoLXN1bW1hcnktYWNjZXNzaWJsZS1oaW50LXdyYXBwZXIiPgogIEZpbHRlcgo8L2J1dHRvbj4KPC9kaXY+CiAgICAgICAgICAKICA8ZGl2IGNsYXNzPSJkbXNwZWFrIj4KICA8aDIgY2xhc3M9ImhlYWRpbmctc21hbGwiIGlkPSJvcHBvcnR1bml0eS1kYXRhLWhlYWRlciI+T3Bwb3J0dW5pdHkgZGF0YTwvaDI+CiAgPHAgaWQ9Im9wcG9ydHVuaXR5LWRhdGEtZGVzY3JpcHRpb24iPkRvd25sb2FkIGRhdGEgYnV5ZXJzIGhhdmUgcHJvdmlkZWQgYWJvdXQgY2xvc2VkIG9wcG9ydHVuaXRpZXMuIFNvbWUgZGF0YSBtYXkgYmUgbWlzc2luZy48cD4KPC9kaXY+CjxhIGNsYXNzPSJnb3Z1ay1saW5rIiAKICAgIGhyZWY9Imh0dHBzOi8vYXNzZXRzLmRpZ2l0YWxtYXJrZXRwbGFjZS5zZXJ2aWNlLmdvdi51ay9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy00L2NvbW11bmljYXRpb25zL2RhdGEvb3Bwb3J0dW5pdHktZGF0YS5jc3YiCiAgICBkb3dubG9hZAogICAgZGF0YS1hbmFseXRpY3M9InRyYWNrRXZlbnQiCiAgICBkYXRhLWFuYWx5dGljcy1jYXRlZ29yeT0ib3Bwb3J0dW5pdHktZGF0YS1jc3YiCiAgICBkYXRhLWFuYWx5dGljcy1hY3Rpb249ImRvd25sb2FkIENTViIKICAgIGRhdGEtYW5hbHl0aWNzLWxhYmVsPSJPcHBvcnR1bml0eSBEYXRhIENTViIgICAgICAgIAo+RG93bmxvYWQgZGF0YSAoQ1NWKTwvYT4KCiAgICA8L3NlY3Rpb24+CiAgPC9mb3JtPgoKICA8c2VjdGlvbiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tdHdvLXRoaXJkcyIgYXJpYS1sYWJlbD0iU2VhcmNoIHJlc3VsdHMiPgogICAgCiAgICA8ZGl2IGlkPSJzZWFyY2gtc3VtbWFyeS1hY2Nlc3NpYmxlLWhpbnQtd3JhcHBlciIgY2xhc3M9InNlYXJjaC1zdW1tYXJ5LWFjY2Vzc2libGUtaGludC13cmFwcGVyIiBhcmlhLWF0b21pYz0idHJ1ZSIgYXJpYS1saXZlPSJwb2xpdGUiIGFyaWEtcmVsZXZhbnQ9ImFkZGl0aW9ucyB0ZXh0Ij4KICAgICAgPGRpdiBpZD0ianMtZG0tbGl2ZS1zZWFyY2gtc3VtbWFyeS1hY2Nlc3NpYmxlLWhpbnQiPgogIDI5IHJlc3VsdHMgZm91bmQKPC9kaXY+CiAgICA8L2Rpdj4KICAgIAogICAgICA8ZGl2IGlkPSJqcy1kbS1saXZlLXNlYXJjaC1zdW1tYXJ5IiBjbGFzcz0ianMtZG0tbGl2ZS1zZWFyY2gtZmFkZSI+CiAgPHAgY2xhc3M9InNlYXJjaC1zdW1tYXJ5Ij4KICAgIDxzcGFuIGNsYXNzPSJzZWFyY2gtc3VtbWFyeS1jb3VudCI+Mjk8L3NwYW4+IHJlc3VsdHMgZm91bmQgaW4gPGVtPkFsbCBjYXRlZ29yaWVzPC9lbT4KICA8L3A+CjwvZGl2PgogICAgCiAgICA8ZGl2IGlkPSJqcy1kbS1saXZlLXNlYXJjaC1yZXN1bHRzIiBjbGFzcz0ianMtZG0tbGl2ZS1zZWFyY2gtZmFkZSI+CiAgCiAgCjxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiPgogICAgPGgyIGNsYXNzPSJzZWFyY2gtcmVzdWx0LXRpdGxlIj4KICAgICAgICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMvMTI1NDQiPlByaW5jaXBhbCBEZXZlbG9wZXIvIFRlY2huaWNhbCBMZWFkIC0gTGF3IEVuZm9yY2VtZW50IGFuZCBTZWN1cml0eSBmb3IgRGF0YSBTZXJ2aWNlcyAmYW1wOyBBbmFseXRpY3M8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgRGF0YSBTZXJ2aWNlIGFuZCBBbmFseXRpY3MgKERTQSksIEhvbWUgT2ZmaWNlCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIExvbmRvbgogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBzcGVjaWFsaXN0cwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGV2ZWxvcGVyCiAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgUHVibGlzaGVkOiBXZWRuZXNkYXkgMTcgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBXZWRuZXNkYXkgMjQgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IFdlZG5lc2RheSAxIEp1bHkgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBBIHByaW5jaXBhbCBkZXZlbG9wZXImI3gyRjsgdGVjaG5pY2FsIGxlYWQgZm9yIGEgcHJvZHVjdCB0ZWFtIGRldmVsb3BpbmcgcHJvZHVjdHMgYW5kIHNlcnZpY2VzIHdpdGggb3BlcmF0aW9uYWwgaW1wYWN0LiBBIGxlYWRlcnNoaXAgcm9sZSB3b3JraW5nIHdpdGggc2VuaW9yIGNvbGxlYWd1ZXMgdG8gZGVzaWduIGFuZCBidWlsZCBzdXN0YWluYWJsZSB0ZWNobmljYWwgcHJvZHVjdHMuDQoNClN1cHBvcnRpbmcgZGVsaXZlcnkgb2YgYW4gZW5kLXRvLWVuZCBwcm9jZXNzIGF0IHRoZSBjb3JlIG9mIHRoZSBIb21lIE9mZmljZeKAmXMgZHV0eSB0byBrZWVwIGNpdGl6ZW5zIHNhZmUuCiAgICA8L3A+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiPgogICAgPGgyIGNsYXNzPSJzZWFyY2gtcmVzdWx0LXRpdGxlIj4KICAgICAgICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMvMTI1NDMiPkRldmVsb3BlciAtIExhdyBFbmZvcmNlbWVudCBhbmQgU2VjdXJpdHkgZm9yIERhdGEgU2VydmljZXMgJmFtcDsgQW5hbHl0aWNzICgyLzIpPC9hPgogICAgPC9oMj4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtaW1wb3J0YW50LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIERhdGEgU2VydmljZSBhbmQgQW5hbHl0aWNzIChEU0EpLCBIb21lIE9mZmljZQogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBMb25kb24KICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgc3BlY2lhbGlzdHMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERldmVsb3BlcgogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogV2VkbmVzZGF5IDE3IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczogV2VkbmVzZGF5IDI0IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBXZWRuZXNkYXkgMSBKdWx5IDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgQSBEZXZlbG9wZXIgdG8gYmUgcGFydCBvZiBhIGRlbGl2ZXJ5IHRlYW0gZGV2ZWxvcGluZyBwcm9kdWN0cyBhbmQgc2VydmljZXMgd2l0aCBvcGVyYXRpb25hbCBpbXBhY3QgZm9yIExhdyBFbmZvcmNlbWVudCBhbmQgU2VjdXJpdHkgdXNlcnMuIA0KU3VwcG9ydGluZyB0aGUgZGVsaXZlcnkgb2YgYW4gZW5kLXRvLWVuZCBwcm9jZXNzIGF0IHRoZSBjb3JlIG9mIHRoZSBIb21lIE9mZmljZeKAmXMgZHV0eSB0byBrZWVwIGNpdGl6ZW5zIHNhZmUgYW5kIHRoZSBjb3VudHJ5IHNlY3VyZS4KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjU0MSI+RGV2ZWxvcGVyIC0gTGF3IEVuZm9yY2VtZW50IGFuZCBTZWN1cml0eSBmb3IgRGF0YSBTZXJ2aWNlcyAmYW1wOyBBbmFseXRpY3MgKDEvMik8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgRGF0YSBTZXJ2aWNlIGFuZCBBbmFseXRpY3MgKERTQSksIEhvbWUgT2ZmaWNlCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIExvbmRvbgogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBzcGVjaWFsaXN0cwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGV2ZWxvcGVyCiAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgUHVibGlzaGVkOiBXZWRuZXNkYXkgMTcgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBXZWRuZXNkYXkgMjQgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IFdlZG5lc2RheSAxIEp1bHkgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBBIERldmVsb3BlciB0byBiZSBwYXJ0IG9mIGEgZGVsaXZlcnkgdGVhbSBkZXZlbG9waW5nIHByb2R1Y3RzIGFuZCBzZXJ2aWNlcyB3aXRoIG9wZXJhdGlvbmFsIGltcGFjdCBmb3IgTGF3IEVuZm9yY2VtZW50IGFuZCBTZWN1cml0eSB1c2Vycy4gDQpTdXBwb3J0aW5nIHRoZSBkZWxpdmVyeSBvZiBhbiBlbmQtdG8tZW5kIHByb2Nlc3MgYXQgdGhlIGNvcmUgb2YgdGhlIEhvbWUgT2ZmaWNl4oCZcyBkdXR5IHRvIGtlZXAgY2l0aXplbnMgc2FmZSBhbmQgdGhlIGNvdW50cnkgc2VjdXJlLgogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNTQwIj5NYXJrZXQgdGVzdGluZyBvZiBkZW1hbmQgZm9yIGFuIGUtcXVhbGlmaWNhdGlvbiBpbiBLbm93bGVkZ2UgTW9iaWxpc2F0aW9uIGFuZCBwb3RlbnRpYWwgcHJvdmlkZXJzLjwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBIZWFsdGggRWR1Y2F0aW9uIEVuZ2xhbmQgKEhFRSkKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgT2ZmLXNpdGUKICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgb3V0Y29tZXMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IFR1ZXNkYXkgMTYgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBUdWVzZGF5IDIzIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBUdWVzZGF5IDMwIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBUaGUgcHVycG9zZSBvZiB0aGUgd29yayBpcyB0byB0ZXN0IGRlbWFuZCBhbmQgbWFya2V0IHBvdGVudGlhbCBvZiBkZWxpdmVyaW5nIGFuIGUtcXVhbGlmaWNhdGlvbiBpbiBrbm93bGVkZ2UgbW9iaWxpc2F0aW9uIGF0IHNjYWxlLiBXb3JraW5nIHdpdGggIEhlYWx0aCBFZHVjYXRpb24gRW5nbGFuZCYjMzk7cyBMaWJyYXJ5IGFuZCBLbm93bGVkZ2UgU2VydmljZXMgdGVhbSB0byB0ZXN0IHRoZSBhcHBldGl0ZSBvZiBwb3RlbnRpYWwgbGVhcm5lcnMsIHBvdGVudGlhbCBIaWdoZXIgRWR1Y2F0aW9uIEluc3RpdHV0aW9ucywgYW50aWNpcGF0aW5nIHBvdGVudGlhbCBjaGFsbGVuZ2VzLCBpZGVudGlmeWluZyBwb3RlbnRpYWwgcHJvdmlkZXJzIGFuZCBzb2x1dGlvbnMuCiAgICA8L3A+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiPgogICAgPGgyIGNsYXNzPSJzZWFyY2gtcmVzdWx0LXRpdGxlIj4KICAgICAgICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMvMTI1MjYiPjcwMDcyMDM2OCAtIERFVkVMT1BJTkcgVEhFIFVOREVSU1RBTkRJTkcgVE8gT1BUSU1JU0UgREFUQSBMSU5LUyBJTiBMQU5EIElORk9STUFUSU9OIE1BTk9FVVZSRTwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBNaW5pc3RyeSBvZiBEZWZlbmNlLCBIUSBBcm15CiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIFNvdXRoIEVhc3QgRW5nbGFuZAogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBvdXRjb21lcwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogVHVlc2RheSAxNiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IFR1ZXNkYXkgMjMgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IFR1ZXNkYXkgMzAgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDxwIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWV4Y2VycHQiPgogICAgICAgIFByb2R1Y2UgIGEgc3R1ZHkgdGhhdCB3aWxsIGxvb2sgdG8gY2FwdHVyZSB0aGUgbmV0d29yayBpbnRlZ3JhdGlvbiBjaGFsbGVuZ2VzIGFuZCBvcHBvcnR1bml0aWVzIGZvciBkYXRhbGluay1lbmFibGVkIGNhcGFiaWxpdGllcyBpbiB0aGUgTGFuZCBEb21haW4uDQpBIENPUFkgT0YgVEhFIFNUQVRFTUVOVCBPRiBSRVFVSVJFTUVOVCBDQU4gQkUgUkVRVUVTVEVEIEZST00gcGF1bGluZS5oZXdpc2g2NjJAbW9kLmdvdi51aw0KQ3liZXIgUmlzayBBc3Nlc3NtZW50IFJlZmVyZW5jZSBpcyBSQVItQllYMzY0MkUgKFZlcnkgTG93KQogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNTMzIj5DQ1Q5MTUgLSBEZWZlbmNlIERpZ2l0YWwgU0RPIFNDSURBIEVuZ2luZWVyIChNaWRsYW5kcyk8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgTWluaXN0cnkgb2YgRGVmZW5jZSwgRGVmZW5jZSBEaWdpdGFsCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIFdlc3QgTWlkbGFuZHMKICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgc3BlY2lhbGlzdHMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERlbGl2ZXJ5IG1hbmFnZXIKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IFR1ZXNkYXkgMTYgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBUdWVzZGF5IDIzIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBUdWVzZGF5IDMwIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBBc3Nlc3NtZW50IG9mIElUIGFuZCBwaHlzaWNhbCBpbmZyYXN0cnVjdHVyZSwgYWNyb3NzIG11bHRpcGxlIGRlZmVuY2Ugc2l0ZXMsIGVuc3VyaW5nIGNvbXBsaWFuY2Ugd2l0aCBKU1AgNjA0IGFuZCBKU1AgNDQwLiBTdXBwb3J0aW5nIGNoYW5nZSByZXF1ZXN0cyBlbnN1cmluZyBpbnN0YWxsYXRpb25zIGFyZSB0byBzdGFuZGFyZCBmb2xsb3dpbmcgTW9EIHByb2Nlc3Nlcy4KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjUzNCI+Q0NUOTE2IC0gRGVmZW5jZSBEaWdpdGFsIFNETyBTQ0lEQSBFbmdpbmVlciAoU291dGggRWFzdCk8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgTWluaXN0cnkgb2YgRGVmZW5jZSwgRGVmZW5jZSBEaWdpdGFsCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIFNvdXRoIEVhc3QgRW5nbGFuZAogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBzcGVjaWFsaXN0cwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGVsaXZlcnkgbWFuYWdlcgogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogVHVlc2RheSAxNiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IFR1ZXNkYXkgMjMgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IFR1ZXNkYXkgMzAgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDxwIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWV4Y2VycHQiPgogICAgICAgIEFzc2Vzc21lbnQgb2YgSVQgYW5kIHBoeXNpY2FsIGluZnJhc3RydWN0dXJlLCBhY3Jvc3MgbXVsdGlwbGUgZGVmZW5jZSBzaXRlcywgZW5zdXJpbmcgY29tcGxpYW5jZSB3aXRoIEpTUCA2MDQgYW5kIEpTUCA0NDAuIFN1cHBvcnRpbmcgY2hhbmdlIHJlcXVlc3RzIGVuc3VyaW5nIGluc3RhbGxhdGlvbnMgYXJlIHRvIHN0YW5kYXJkIGZvbGxvd2luZyBNb0QgcHJvY2Vzc2VzLgogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNTM1Ij5DQ1Q5MTcgLSBEZWZlbmNlIERpZ2l0YWwgU0RPIFNDSURBIEVuZ2luZWVyIChTb3V0aCBXZXN0KTwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBNaW5pc3RyeSBvZiBEZWZlbmNlLCBEZWZlbmNlIERpZ2l0YWwKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgU291dGggV2VzdCBFbmdsYW5kCiAgICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEaWdpdGFsIHNwZWNpYWxpc3RzCiAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEZWxpdmVyeSBtYW5hZ2VyCiAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgUHVibGlzaGVkOiBUdWVzZGF5IDE2IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczogVHVlc2RheSAyMyBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgQ2xvc2luZzogVHVlc2RheSAzMCBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgQXNzZXNzbWVudCBvZiBJVCBhbmQgcGh5c2ljYWwgaW5mcmFzdHJ1Y3R1cmUsIGFjcm9zcyBtdWx0aXBsZSBkZWZlbmNlIHNpdGVzLCBlbnN1cmluZyBjb21wbGlhbmNlIHdpdGggSlNQIDYwNCBhbmQgSlNQIDQ0MC4gU3VwcG9ydGluZyBjaGFuZ2UgcmVxdWVzdHMgZW5zdXJpbmcgaW5zdGFsbGF0aW9ucyBhcmUgdG8gc3RhbmRhcmQgZm9sbG93aW5nIE1vRCBwcm9jZXNzZXMuCiAgICA8L3A+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiPgogICAgPGgyIGNsYXNzPSJzZWFyY2gtcmVzdWx0LXRpdGxlIj4KICAgICAgICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMvMTI0NjYiPkNDVDkxNCAtIERlZmVuY2UgRGlnaXRhbCBTRE8gU0NJREEgRW5naW5lZXIgKE5vcnRoKTwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBNaW5pc3RyeSBvZiBEZWZlbmNlLCBEZWZlbmNlIERpZ2l0YWwKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgT2ZmLXNpdGUKICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgc3BlY2lhbGlzdHMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERlbGl2ZXJ5IG1hbmFnZXIKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IFR1ZXNkYXkgMTYgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBUdWVzZGF5IDIzIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBUdWVzZGF5IDMwIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBBc3Nlc3NtZW50IG9mIElUIGFuZCBwaHlzaWNhbCBpbmZyYXN0cnVjdHVyZSwgYWNyb3NzIG11bHRpcGxlIGRlZmVuY2Ugc2l0ZXMsIGVuc3VyaW5nIGNvbXBsaWFuY2Ugd2l0aCBKU1AgNjA0IGFuZCBKU1AgNDQwLiBTdXBwb3J0aW5nIGNoYW5nZSByZXF1ZXN0cyBlbnN1cmluZyBpbnN0YWxsYXRpb25zIGFyZSB0byBzdGFuZGFyZCBmb2xsb3dpbmcgTW9EIHByb2Nlc3Nlcy4KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjUzMSI+UDIxLTAwMzYgTWljcm9zb2Z0IER5bmFtaWNzIERldmVsb3BlcjwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBTY290dGlzaCBFbnRlcnByaXNlCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIFNjb3RsYW5kCiAgICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEaWdpdGFsIHNwZWNpYWxpc3RzCiAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEZXZlbG9wZXIKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IE1vbmRheSAxNSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IFdlZG5lc2RheSAxNyBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgQ2xvc2luZzogTW9uZGF5IDIyIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBBbiBleGNpdGluZyBkaWdpdGFsIHRyYW5zZm9ybWF0aW9uIHByb2dyYW1tZSBwdXR0aW5nIE1pY3Jvc29mdCBEeW5hbWljcyBDUk0gYXQgdGhlIGhlYXJ0IG9mIG91ciBwcm9jZXNzZXMgYW5kIGludGVyYWN0aW9ucyB3aXRoIHVzZXJzLiBUaGUgcHJvZ3JhbW1lIGhhcyBzdGFydGVkIGFuZCB3aWxsIGNvbnRpbnVlIHRvIGRldmVsb3AgYSB3ZWIgZnJvbnQgZW5kIHRvIGludGVyYWN0IHdpdGggdXNlcnMgdGhyb3VnaCBhIHNlY3VyZSBhY2NvdW50IHNwYWNlIHRvIGFuZCBmcm9tIENSTSB0byBwb3dlciB0cmFuc2FjdGlvbnMgd2l0aCB1c2Vycy4KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjUyOSI+UHJvZ3JhbW1lIERlbGl2ZXJ5IE1hbmFnZXI8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgQ2VudHJlIGZvciBEaWdpdGFsIFB1YmxpYyBTZXJ2aWNlcwogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBXYWxlcwogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBzcGVjaWFsaXN0cwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgUHJvZ3JhbW1lIG1hbmFnZXIKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IE1vbmRheSAxNSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IFdlZG5lc2RheSAxNyBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgQ2xvc2luZzogTW9uZGF5IDIyIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBUaGUgbmV3bHkgZXN0YWJsaXNoZWQgQ2VudHJlIGZvciBEaWdpdGFsIFB1YmxpYyBzZXJ2aWNlcyBpcyBzZWVraW5nIGEgUHJvZ3JhbW1lIERlbGl2ZXJ5IE1hbmFnZXIgdG8gaGVscCBpdCBjb29yZGluYXRlIGFuZCBtYW5hZ2UgYSBwcm9ncmFtbWUgb2YgcmFwaWQgZGlzY292ZXJ5JiN4MkY7YWxwaGEgcHJvamVjdHMgdGhhdCBhaW0gdG8gZGVtb25zdHJhdGUsIGN1cmF0ZSBhbmQgc2hhcmUgYmVzdCBwcmFjdGljZSBpbiBzZXJ2aWNlIGRlbGl2ZXJ5LCBkZXZlbG9wIGFuZCBhZ3JlZSBzdGFuZGFyZHMgYW5kIGJ1aWxkIGRpZ2l0YWwgY2FwYWJpbGl0eSBpbiBXYWxlcy4KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjUwMCI+UmVwYWlycyBPbmxpbmUgLSBUZWNobmljYWwgQWxwaGE8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgQ2l0eSBvZiBMaW5jb2xuIENvdW5jaWwKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgT2ZmLXNpdGUKICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgb3V0Y29tZXMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IE1vbmRheSAxNSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IE1vbmRheSAyMiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgQ2xvc2luZzogTW9uZGF5IDI5IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBXZSB3YW50IHRvIHVuZGVyc3RhbmQgdGhlIGZlYXNpYmlsaXR5IG9mIGltcGxlbWVudGluZyB0aGUgY29tbW9uIHNlcnZpY2UgcGF0dGVybiBmb3IgZW5kLXRvLWVuZCBob3VzaW5nIHJlcGFpcnMgYXMgZGVmaW5lZCBmcm9tIG91ciBBbHBoYSByZXBvcnQuIEZvY3VzaW5nIG9uIHRoZSBpbnRlZ3JhdGlvbiBvcHRpb25zIHdpdGggbGVhZGluZyBzdXBwbGllcnMgb2YgaG91c2luZyByZXBhaXJzIHN5c3RlbXMuICBUaGlzIHdpbGwgaW5mb3JtIHRoZSBkZXZlbG9wbWVudCBvZiBvdXIgQmV0YSBwaGFzZS4KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjQ3OSI+TG9uZG9uIENvdW5jaWxzIC0gd2Vic2l0ZSBhY2Nlc3NpYmlsaXR5IGF1ZGl0cyBhbmQgcmVwb3J0czwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBMb25kb24gQ291bmNpbHMKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgTG9uZG9uCiAgICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEaWdpdGFsIG91dGNvbWVzCiAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgUHVibGlzaGVkOiBNb25kYXkgMTUgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBNb25kYXkgMjIgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IE1vbmRheSAyOSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgMS4JTWFudWFsIHRlc3RpbmcgYSBzYW1wbGUgb2Ygb3VyIG1vc3QgdXNlZCBjb250ZW50JiN4MkY7Y29udGVudCB0eXBlcyYjeDJGO3BhZ2VzIG9uIHRoZSB3ZWJzaXRlcywgcmVjb21tZW5kaW5nIHRoZSBiZXN0IHR5cGVzIG9mIHRlc3RpbmcgdG8gcmVhY2ggdGhlIHJlZ3VsYXRpb25zICANCg0KMi4JUHJvZHVjaW5nIHJlcG9ydHMgaWRlbnRpZnlpbmcgYW55IGFjY2Vzc2liaWxpdHkgaXNzdWVzIGFuZCBwcm92aWRpbmcgZ3VpZGFuY2UgYW5kIHN1cHBvcnQgZm9yIHByaW9yaXRpc2luZyBhbmQgZml4aW5nIHRoZXNlIGlzc3Vlcy4KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjUyNSI+QSBkaXNjb3ZlcnkgdG8gZGV0ZXJtaW5lIHRoZSBvcHRpbWFsIHRlbGVwaG9ueSBzb2x1dGlvbihzKSB0byBtZWV0IHVzZXIgbmVlZHM8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgSGFja25leSBDb3VuY2lsCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIExvbmRvbgogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBvdXRjb21lcwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogU2F0dXJkYXkgMTMgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBGcmlkYXkgMTkgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IFNhdHVyZGF5IDI3IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBBIGRpc2NvdmVyeSB0byBkZXRlcm1pbmUgdGhlIG9wdGltYWwgdGVsZXBob255IHNvbHV0aW9uKHMpIHRvIG1lZXQgdXNlciBuZWVkcwogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyMzU1Ij5PcHBvcnR1bml0aWVzIGFuZCBjaGFsbGVuZ2VzIGFyb3VuZCBqb2luaW5nLXVwIGVkdWNhdGlvbiBhbmQgY2hpbGRyZW5z4oCZIHNvY2lhbCBjYXJlIGRhdGE8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgSGFja25leSBDb3VuY2lsCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIExvbmRvbgogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBvdXRjb21lcwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogU2F0dXJkYXkgMTMgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBGcmlkYXkgMTkgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IFNhdHVyZGF5IDI3IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBBIHN1Y2Nlc3NmdWwgcHJvamVjdCB3aWxsIHByb3ZpZGUgdGFuZ2libGUgZXhhbXBsZXMgb2YgdGhlIGluc2lnaHRzIHRoYXQgbWlnaHQgYmUgYXZhaWxhYmxlLCBhIGhpZ2gtbGV2ZWwgYnVzaW5lc3MgY2FzZSBmb3IgdGhlIGNvc3RzIGFuZCBiZW5lZml0cyBvZiBhIGRpZmZlcmVudCBvcGVyYXRpbmcgbW9kZWwsIHRoZSBpbW1lZGlhdGUgc3RlcHMgbmVjZXNzYXJ5IHRvIGFjaGlldmUgdGhpcyBhbmQgdGhlIHR5cGVzIG9mIGNoYWxsZW5nZXMgdGhhdCBuZWVkIHRvIGJlIGV4cGxvcmVkIHRocm91Z2ggZnVydGhlciB3b3JrLgogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNTIwIj5Qcm92aXNpb24gb2YgQXBwIFYgU3BlY2lhbGlzdCAtIFBTLTIwLTEyNTwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBEcml2ZXIgYW5kIFZlaGljbGUgTGljZW5zaW5nIEFnZW5jeSAoRFZMQSkKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgV2FsZXMKICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgc3BlY2lhbGlzdHMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERldmVsb3BlcgogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogRnJpZGF5IDEyIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczogVHVlc2RheSAxNiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgQ2xvc2luZzogRnJpZGF5IDE5IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBGb3IgdGhlIFdpbmRvd3MxMCYjeDJGO09mZmljZSBVcGdyYWRlIFByb2plY3QgDQotICAgICAgIFBhY2thZ2UgYW5kIGRlbGl2ZXJ5IHZpYSBBUFAtdiBhbmQgU0NDTSBvZiBhbGwgcmVxdWlyZWQgRFZMQSANCiAgICAgICAgYXBwbGljYXRpb25zDQotCVRlc3RpbmcsIGRlZmVjdCBtYW5hZ2VtZW50LCBwcm9qZWN0IHJlcG9ydGluZyBmb3IgYWxsIGFwcGxpY2F0aW9ucw0KLQlEb2N1bWVudGF0aW9uIGFuZCBidWlsZCBzY3JpcHRzIHRvIHN1cHBvcnQgYWxsIGFwcGxpY2F0aW9ucw0KLQlLbm93bGVkZ2UgdHJhbnNmZXImI3gyRjt0cmFpbmluZyB0byBEVkxBIHN1cHBvcnQgc3RhZmYgdG8gYWxsb3cgdHJhbnNpdGlvbiANCiAgICAgICAgaW50byBzdXBwb3J0CiAgICA8L3A+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiPgogICAgPGgyIGNsYXNzPSJzZWFyY2gtcmVzdWx0LXRpdGxlIj4KICAgICAgICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMvMTI1MDEiPkNDVDg3OSAtIEFyY2hpdGVjdHVyYWwgRGVzaWduIFN1cHBvcnQgU3BlY2lhbGlzdHMgZm9yIElkQU0gYW5kIEREUyAtIFJFSVNTVUU8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgTWluaXN0cnkgb2YgRGVmZW5jZSAtIERlZmVuY2UgRGlnaXRhbAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBTb3V0aCBXZXN0IEVuZ2xhbmQKICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgb3V0Y29tZXMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IEZyaWRheSAxMiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IEZyaWRheSAxOSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgQ2xvc2luZzogRnJpZGF5IDI2IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBQcm9kdWN0aW9uIG9mIOKAnElkQU0gYW5kIERpcmVjdG9yeeKAnSBIaWdoIExldmVsIFNlcnZpY2UgRGVzaWduIChITFNEKSB0byBpbmNsdWRlIGJ1dCBub3QgbGltaXRlZCB0bzoNClNvbHV0aW9uIGRlc2lnbnMgKEhMKSwgaW5jbC4gcHJvZHVjdCBmYW1pbHkgc2VsZWN0aW9uIHdoZXJlIGFwcHJvcHJpYXRlDQpVc2VyIGNhc2VzIGFuZCB1c2VyIHN0b3JpZXMNCkZ1bmN0aW9uYWwgYW5kIG5vbi1mdW5jdGlvbmFsIHJlcXVpcmVtZW50cw0KVGVzdGluZyBhbmQgYWNjZXB0YW5jZSByZXF1aXJlbWVudHMNClNlY3VyaXR5IG1vZGVsDQpTb2x1dGlvbiYjeDJGO3NlcnZpY2UgaW50ZXJmYWNlcyBhbmQgZGVwZW5kZW5jaWVzDQpTdGFrZWhvbGRlciBtYXBzCiAgICA8L3A+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiPgogICAgPGgyIGNsYXNzPSJzZWFyY2gtcmVzdWx0LXRpdGxlIj4KICAgICAgICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMvMTI1MTkiPlByb3Zpc2lvbiBvZiBDQSBHRU4gRGV2ZWxvcGVyIFNwZWNpYWxpc3QgLSBQUy0yMC0xMjQ8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgRHJpdmVyIGFuZCBWZWhpY2xlIExpY2Vuc2luZyBBZ2VuY3kgKERWTEEpCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIFdhbGVzCiAgICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEaWdpdGFsIHNwZWNpYWxpc3RzCiAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEZXZlbG9wZXIKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IEZyaWRheSAxMiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IFR1ZXNkYXkgMTYgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IEZyaWRheSAxOSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgVGhpcyBpcyBhIHNwZWNpYWxpc3QgdGVjaG5pY2FsIGRldmVsb3BtZW50IHJvbGUgcmVxdWlyZWQgdG8gZGVsaXZlciBhbiBleGNlcHRpb25hbGx5IGhpZ2ggc3RhbmRhcmQgb2YgY29kZSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIERWTEFzIGJ1c2luZXNzIHJlcXVpcmVtZW50cy4gDQoNClRvIHVuZGVydGFrZSBkZXZlbG9wbWVudCB3b3JrIG9uIHRoZSBEVkxBcyBjZW50cmFsIHZlaGljbGVzIG1hbmFnZW1lbnQgc3lzdGVtIChWU1MpLg0KDQpUbyB3b3JrIG9uIHZhcmlvdXMgcHJvamVjdHMgdG8gZGVsaXZlciBtYW5kYXRvcnkgbGVnaXNsYXRpdmUgY2hhbmdlcyB0byB0aGUgY2VudHJhbCB2ZWhpY2xlcyBzeXN0ZW0uCiAgICA8L3A+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiPgogICAgPGgyIGNsYXNzPSJzZWFyY2gtcmVzdWx0LXRpdGxlIj4KICAgICAgICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMvMTI0MzQiPklUIENvbnN1bHRhbmN5ICBmb3IgT3B0aW9ucyBBcHByYWlzYWwgYW5kIHNwZWNpZmljYXRpb24gZm9yIHJlLXRlbmRlciBvZiBleGlzdGluZyBvdXRzb3VyY2VkIElUPC9hPgogICAgPC9oMj4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtaW1wb3J0YW50LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIFNvbGVudCBOSFMgVHJ1c3QKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgU291dGggRWFzdCBFbmdsYW5kCiAgICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEaWdpdGFsIG91dGNvbWVzCiAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgUHVibGlzaGVkOiBGcmlkYXkgMTIgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBGcmlkYXkgMTkgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IEZyaWRheSAyNiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgU29sZW50IE5IUyBUcnVzdCBpcyBsb29raW5nIGZvciBhbiBJVCBTcGVjaWFsaXN0IENvbnN1bHRhbmN5IHRvIGhlbHAgZGV2ZWxvcCBhbmQgY3JlYXRlIGFuIG9wdGlvbnMgYXBwcmFpc2FsIGZvciBvdXIgQm9hcmQgdG8gY29uc2lkZXIgdGhlIG9wdGlvbnMgZm9yIHRoZWlyIGZ1dHVyZSBJQ1Qgc2VydmljZSByZXF1aXJlbWVudHMgYW5kIGluIHRoZSBkZXZlbG9wbWVudCBvZiBhIHNlcnZpY2Ugc3BlY2lmaWNhdGlvbiBmb3IgdGhlIHByb2N1cmVtZW50Lg0KDQpUaGUgY3VycmVudCBJQ1QgY29udHJhY3QgZW5kcyBpbiBKdW5lIDIwMjIuCiAgICA8L3A+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InNlYXJjaC1yZXN1bHQiPgogICAgPGgyIGNsYXNzPSJzZWFyY2gtcmVzdWx0LXRpdGxlIj4KICAgICAgICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzL29wcG9ydHVuaXRpZXMvMTI0OTkiPlNhZmV0eSBDYXNlIE1hbmFnZW1lbnQgU3lzdGVtIERldmVsb3BtZW50IChSV00zNDgpPC9hPgogICAgPC9oMj4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtaW1wb3J0YW50LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIFJhZGlvYWN0aXZlIFdhc3RlIE1hbmFnZW1lbnQgTHRkIChSV00pCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIE9mZi1zaXRlCiAgICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEaWdpdGFsIG91dGNvbWVzCiAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgUHVibGlzaGVkOiBUaHVyc2RheSAxMSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IFRodXJzZGF5IDE4IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBUaHVyc2RheSAyNSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgUldNIHJlcXVpcmVzIGEgU1FFUCBwcm9qZWN0IHRlYW0gdG8gY2Fycnkgb3V0IGEgbnVtYmVyIG9mIGRldmVsb3BtZW50cyB0byBpdHMgZXhpc3RpbmcgZGlnaXRhbCBzYWZldHkgY2FzZSBtYW5hZ2VtZW50IHN5c3RlbSB0aHJvdWdoIGFnaWxlIGRldmVsb3BtZW50LiBUaGVzZSBkZXZlbG9wbWVudHMgY292ZXIgYXV0aGVudGljYXRpb24gYW5kIGF1dGhvcmlzYXRpb24sIHVwZGF0ZSB0byBhbiBPeHlnZW4gWE1MIHBsdWdpbiwgUHl0aG9uIEVUTCBwaXBlbGluZSBhZ2FpbnN0IE9wZW5UZXh0IENvbnRlbnQgU2VydmVyLCBVUkkgc2VydmljZSBhbmQgc2VhcmNoIFVJIGltcHJvdmVtZW50cy4KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjUxMyI+QWdpbGUgQnVzaW5lc3MgQW5hbHlzdCAtIEZvY3VzIE9uIEVTUjwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBIZWFsdGggRWR1Y2F0aW9uIEVuZ2xhbmQKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgT2ZmLXNpdGUKICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgc3BlY2lhbGlzdHMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIEJ1c2luZXNzIGFuYWx5c3QKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IFRodXJzZGF5IDExIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczogTW9uZGF5IDE1IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBUaHVyc2RheSAxOCBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgQW5hbHlzZSB1c2VyICYjeDJGO2J1c2luZXNzIG5lZWRzIGVuc3VyaW5nIG91dGNvbWVzIGFsaWduIHdpdGggc3RyYXRlZ3ksIGRlbGl2ZXJpbmcgdG8gdGhlIGJ1c2luZXNzIGFyY2hpdGVjdHVyZS4gUmVzcG9uc2libGUgZm9yIGRpc2NvdmVyeSBvZiB1c2VyIG5lZWRzLCBnYXAgYW5hbHlzaXMsIGltcGFjdCBhbmFseXNpcywgc3Rha2Vob2xkZXIgbWFuYWdlbWVudCwgYnVzaW5lc3Mgc29sdXRpb24gZGVzaWduLCBiYWNrbG9nIG1haW50ZW5hbmNlLCBTcHJpbnQgY29vcmRpbmF0aW9uLgogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNTEyIj5EZXZlbG9wZXIgLSBCYWNrIEVuZCBEZXZlbG9wZXIgLSBGb2N1cyBPbiBFU1I8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgSGVhbHRoIEVkdWNhdGlvbiBFbmdsYW5kCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIE9mZi1zaXRlCiAgICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEaWdpdGFsIHNwZWNpYWxpc3RzCiAgICAgICAgPC9saT4KICAgICAgICAKICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEZXZlbG9wZXIKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IFRodXJzZGF5IDExIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczogTW9uZGF5IDE1IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBUaHVyc2RheSAxOCBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgQmFjayBFbmQgSmF2YSBEZXZlbG9wZXIgdXNpbmcgb3BlbiBzb3VyY2UgYW5kIGNsb3VkIHRlY2hub2xvZ2llcyB0byBjcmVhdGUgYSBzZXJ2aWNlLWxlZCBzb2x1dGlvbiB3aXRoIGFuIGludGVncmF0aW9uIGxheWVyIHRvIGEgbGVnYWN5IHRlY2hub2xvZ3kgc3RhY2suIFdlIHdvcmsgaW4gYW4gQWdpbGUgZW52aXJvbm1lbnQgdXNpbmcgU2NydW0KICAgIDwvcD4KPC9kaXY+CgoKPGRpdiBjbGFzcz0ic2VhcmNoLXJlc3VsdCI+CiAgICA8aDIgY2xhc3M9InNlYXJjaC1yZXN1bHQtdGl0bGUiPgogICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMvb3Bwb3J0dW5pdGllcy8xMjQ5MiI+ZGlnaXRhbCwgYWNjZXNzaWJpbGl0eSwgZGlzYWJpbGl0eSB0ZXN0aW5nLCBzdGF0ZW1lbnRzLCBkZXZpY2UgdGVzdGluZywgdHJhaW5pbmcsIGF1ZGl0PC9hPgogICAgPC9oMj4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtaW1wb3J0YW50LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIE1vbmV5IGFuZCBQZW5zaW9ucyBTZXJ2aWNlCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIExvbmRvbgogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgVXNlciByZXNlYXJjaCBwYXJ0aWNpcGFudHMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IFR1ZXNkYXkgOSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IFR1ZXNkYXkgMTYgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IFR1ZXNkYXkgMjMgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDxwIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWV4Y2VycHQiPgogICAgICAgIEZ1bGwgYWNjZXNzaWJpbGl0eSBhdWRpdHMgb2YgMyBsaXZlIHdlYnNpdGVzIGFuZCAxIHdlYnNpdGUgY3VycmVudGx5IHVuZGVyIGNvbnN0cnVjdGlvbiBhbGwgd2l0aGluIHRoZSBQdWJsaWMgU2VjdG9yJiN4MkY7IEdvdmVybm1lbnQgYm9kaWVzLiBBY2Nlc3NpYmlsaXR5IHN0YXRlbWVudHMgZm9yIDQgd2Vic2l0ZXMsIEFjY2Vzc2liaWxpdHkgdGVzdGluZyBmb3Igb25saW5lIHRvb2xzIGFuZCBjYWxjdWxhdG9ycy4gUmVwb3J0cyBhbmQgYWR2aXNvcnkgZml4ZXMgZm9yIGFjY2Vzc2liaWxpdHkgaXNzdWVzLgogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNDg3Ij5UcmFuc2Zvcm1pbmcgSW5mcmFzdHJ1Y3R1cmUgUGVyZm9ybWFuY2UgKFRJUCkgcm9hZG1hcCB2aXN1YWxpc2F0aW9uPC9hPgogICAgPC9oMj4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtaW1wb3J0YW50LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIEluZnJhc3RydWN0dXJlICZhbXA7IFByb2plY3RzIEF1dGhvcml0eQogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBPZmYtc2l0ZQogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBvdXRjb21lcwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogVHVlc2RheSA5IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczogVHVlc2RheSAxNiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgQ2xvc2luZzogVHVlc2RheSAyMyBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgQWN0IGFzIG91ciBwYXJ0bmVyIHRvIHByb2R1Y2UgdmlzdWFsaXNhdGlvbnMgKGEg4oCccm9hZG1hcOKAnSkgd2hpY2ggd2lsbCBlc3RhYmxpc2ggYSB2aXN1YWwgZnJhbWV3b3JrIG9udG8gd2hpY2ggdGhlIGludGVydmVudGlvbnMgbmVjZXNzYXJ5IHRvIGRlbGl2ZXIgVElQIGFyZSBwbG90dGVkLCBzaG93aW5nIHByb2dyZXNzIG92ZXIgdGltZS4gVGhlIHZpc3VhbGlzYXRpb24gd2lsbCBiZSBwcmVwYXJlZCB0aHJvdWdoIHdpZGUgY29uc3VsdGF0aW9uIGFuZCBwdWJsaXNoZWQgaW4sIGFtb25nc3Qgb3RoZXIgcHVibGljYXRpb25zLCBhbiB1cGRhdGVkIEdvdmVybm1lbnQgQ29uc3RydWN0aW9uIHN0cmF0ZWd5LgogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNDc1Ij5FeHRlbmQgUmVwYWlycyBIdWIgZm9yIGNvbnRyYWN0b3JzPC9hPgogICAgPC9oMj4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtaW1wb3J0YW50LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIExvbmRvbiBCb3JvdWdoIG9mIEhhY2tuZXkgQ291bmNpbAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBMb25kb24KICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgb3V0Y29tZXMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IE1vbmRheSA4IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczogTW9uZGF5IDE1IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBNb25kYXkgMjIgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDxwIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWV4Y2VycHQiPgogICAgICAgIEV4dGVuZCBmdW5jdGlvbmFsaXR5IG9mICBSZXBhaXJzIEh1YiB0byBlbmFibGUgY29udGFjdCBjZW50cmUgYWdlbnRzIHRvIHJhaXNlIGNvbnRyYWN0b3IgcmVwYWlycwogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNDY3Ij5Vc2VyIEV4cGVyaWVuY2UgJmFtcDsgRGVzaWduIENhcGFiaWxpdHk8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgRGVwYXJ0bWVudCBmb3IgRWR1Y2F0aW9uCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIFNvdXRoIEVhc3QgRW5nbGFuZAogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBvdXRjb21lcwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogTW9uZGF5IDggSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBNb25kYXkgMTUgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IE1vbmRheSAyMiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgRGZFIGFyZSBsb29raW5nIGZvciBhIHN1cHBsaWVyIHRvIHdvcmsgYWxvbmdzaWRlIG91ciBkaWdpdGFsIGRldmVsb3BtZW50IHRlYW1zIGNvdmVyaW5nIFVzZXIgRXhwZXJpZW5jZSBhbmQgRGVzaWduIGNhcGFiaWxpdGllcyB0byBkcml2ZSB1c2VyIGNlbnRyZWQgZGVzaWduIG9mIGNvbW11bmljYXRpb24sIGNvbnRlbnQsIElBLCBpbnRlcmFjdGlvbnMsIHByb2R1Y3RzLCBwb2xpY3ksIG9wZXJhdGlvbiBhbmQgc2VydmljZXMuIA0KVGhlcmUgaXMgY3VycmVudGx5IG5vIGluY3VtYmVudCBkZWxpdmVyaW5nIHRoaXMgY2FwYWJpbGl0eSBpbiB0aGUgU291dGggb2YgRW5nbGFuZAogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNDUwIj5EZWxpdmVyeSBvZiBTZWN1cml0eSBGZWVkcyBpbnRvIHRoZSBDU09DPC9hPgogICAgPC9oMj4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtaW1wb3J0YW50LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIEhlYWx0aCBhbmQgU29jaWFsIENhcmUgSW5mb3JtYXRpb24gQ2VudHJlIChrbm93biBhcyBOSFMgRGlnaXRhbCkKICAgICAgICA8L2xpPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgWW9ya3NoaXJlIGFuZCB0aGUgSHVtYmVyCiAgICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbS1pbmxpbmUiPgogICAgICAgICAgICBEaWdpdGFsIG91dGNvbWVzCiAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhIj4KICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgUHVibGlzaGVkOiBGcmlkYXkgNSBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnM6IEZyaWRheSAxMiBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICAgICAgQ2xvc2luZzogRnJpZGF5IDE5IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8cCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1leGNlcnB0Ij4KICAgICAgICBOSFMgRGlnaXRhbCByZXF1aXJlIGEgc3VwcGxpZXIgdGhhdCBoYXMgc2lnbmlmaWNhbnQgZXhwZXJ0aXNlIGluIFNwbHVuayBFbnRlcnByaXNlIFNlY3VyaXR5IHRvIGVuaGFuY2UgdGhlIGNyaXRpY2FsIG9wZXJhdGlvbnMgb2YgdGhlIERhdGEgU2VjdXJpdHkgQ2VudHJlLCBDU09DLiANCg0KVGhlIHN1cHBsaWVycyB3aWxsIGJlIHJlcXVpcmVkIHRvIG9uYm9hcmQgbmV3IGZlZWRzLCBydWxlcyBhbmQgZGFzaGJvYXJkcywgd2hpbHN0IGRldmVsb3BpbmcgYW5kIHByb3ZpZGluZyBjb250aW51b3VzIGltcHJvdmVtZW50cyB0byB0aGUgQ1NPQyBvbmJvYXJkaW5nIHByb2Nlc3NlcyB0aHJvdWdoIHRvIG1hdHVyaXR5LgogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNDcwIj5wcmpfNDQyNyAtIENPVklELTE5IFRlc3RpbmcgU2VydmljZSBEZXZlbG9wbWVudCwgRGVsaXZlcnkgYW5kIFJ1bjwvYT4KICAgIDwvaDI+CgogICAgPHVsIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWltcG9ydGFudC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBOSFMgRGlnaXRhbAogICAgICAgIDwvbGk+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0iPgogICAgICAgICAgICBZb3Jrc2hpcmUgYW5kIHRoZSBIdW1iZXIKICAgICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtLWlubGluZSI+CiAgICAgICAgICAgIERpZ2l0YWwgb3V0Y29tZXMKICAgICAgICA8L2xpPgogICAgICAgIAogICAgPC91bD4KCiAgICA8dWwgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEiPgogICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBQdWJsaXNoZWQ6IEZyaWRheSA1IEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9uczogRnJpZGF5IDEyIEp1bmUgMjAyMAogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgICAgICBDbG9zaW5nOiBGcmlkYXkgMTkgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDxwIGNsYXNzPSJzZWFyY2gtcmVzdWx0LWV4Y2VycHQiPgogICAgICAgIE5IUyBEaWdpdGFsIGlzIHJlc3BvbnNpYmxlIGZvciBkZWxpdmVyaW5nIHRoZSBkaWdpdGFsIGVsZW1lbnRzIG9mIHRoZSBDT1ZJRC0xOSBUZXN0aW5nIFNlcnZpY2UuIFRoaXMgc2VydmljZSBpcyBhbHJlYWR5IGxpdmUgKGluIEFscGhhIHBoYXNlKSBhbmQgTkhTIERpZ2l0YWwgcmVxdWlyZXMgYSBzdXBwbGllciB0byBwZXJmb3JtIHRoZSBkZXZlbG9wbWVudCwgZGVsaXZlcnkgYW5kIHJ1bm5pbmcgb2YgdGhpcyBzZXJ2aWNlIGdvaW5nIGZvcndhcmRzLgogICAgPC9wPgo8L2Rpdj4KCgo8ZGl2IGNsYXNzPSJzZWFyY2gtcmVzdWx0Ij4KICAgIDxoMiBjbGFzcz0ic2VhcmNoLXJlc3VsdC10aXRsZSI+CiAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWxpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzLzEyNDM2Ij5CaS1ib3JvdWdoIFRlY2ggU3RyYXRlZ3kgQ29uc3VsdGFuY3k8L2E+CiAgICA8L2gyPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1pbXBvcnRhbnQtbWV0YWRhdGEiPgogICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgV2VzdG1pbnN0ZXIgQ2l0eSBDb3VuY2lsCiAgICAgICAgPC9saT4KICAgICAgICA8bGkgY2xhc3M9InNlYXJjaC1yZXN1bHQtbWV0YWRhdGEtaXRlbSI+CiAgICAgICAgICAgIExvbmRvbgogICAgICAgIDwvbGk+CiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgPGxpIGNsYXNzPSJzZWFyY2gtcmVzdWx0LW1ldGFkYXRhLWl0ZW0taW5saW5lIj4KICAgICAgICAgICAgRGlnaXRhbCBvdXRjb21lcwogICAgICAgIDwvbGk+CiAgICAgICAgCiAgICA8L3VsPgoKICAgIDx1bCBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YSI+CiAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIFB1Ymxpc2hlZDogV2VkbmVzZGF5IDMgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIERlYWRsaW5lIGZvciBhc2tpbmcgcXVlc3Rpb25zOiBXZWRuZXNkYXkgMTAgSnVuZSAyMDIwCiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VhcmNoLXJlc3VsdC1tZXRhZGF0YS1pdGVtIj4KICAgICAgICAgICAgICAgIENsb3Npbmc6IFdlZG5lc2RheSAxNyBKdW5lIDIwMjAKICAgICAgICAgICAgPC9saT4KICAgICAgICAKICAgIDwvdWw+CgogICAgPHAgY2xhc3M9InNlYXJjaC1yZXN1bHQtZXhjZXJwdCI+CiAgICAgICAgQXMtSXMgcmV2aWV3IGFjcm9zcyB0aGUgYmktYm9yb3VnaCB0ZWNobmljYWwgaW5mcmFzdHJ1Y3R1cmUsIHRlY2huaWNhbCBkdWUtZGlsaWdlbmNlIG9uIGJhY2sgJmFtcDsgZnJvbnQgb2ZmaWNlIGludGVncmF0aW9uIGNhcGFiaWxpdGllcy4NCg0KV2hlcmUgdGVjaG5pY2FsIHJlcXVpcmVtZW50cyBvciBidXNpbmVzcyBwcm9jZXNzZXMgYXJlIHVua25vd24sICBpbnZlc3RpZ2F0aW9uIGNhcnJpZWQgb3V0IGluIGNvbnN1bHRhdGlvbiB3aXRoIElULCBDRUQsIGFuZCAgb3RoZXIgIHN0YWtlaG9sZGVyLg0KDQrigK9PdXRwdXQgc2hvdWxkIGlkZW50aWZ5IGxpbWl0YXRpb25zLCBvcHBvcnR1bml0aWVzIGFuZCBnZW5lcmFsIG9ic2VydmF0aW9ucyB0aGF0IGFzc2lzdHMgd2l0aCBmdXR1cmUgaW52ZXN0aWdhdGlvbnMgYW5kIG9wdGlvbnMuCiAgICA8L3A+CjwvZGl2PgoKCiAgPG5hdiByb2xlPSJuYXZpZ2F0aW9uIj4KICAgIDx1bCBjbGFzcz0icHJldmlvdXMtbmV4dC1uYXZpZ2F0aW9uIj4KCiAgICAgICAgCgogICAgICAgIAogICAgPC91bD4KPC9uYXY+CjwvZGl2PgogIDwvc2VjdGlvbj4KCjwvZGl2PgoKCiAgICAgICAgPC9tYWluPgogICAgICA8L2Rpdj4KICAgIAoKICAgIAogIDxmb290ZXIgY2xhc3M9ImdvdnVrLWZvb3RlciAiIHJvbGU9ImNvbnRlbnRpbmZvIj4KICA8ZGl2IGNsYXNzPSJnb3Z1ay13aWR0aC1jb250YWluZXIgIj4KICAgIAogICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX25hdmlnYXRpb24iPgogICAgICAgIAogICAgICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19zZWN0aW9uIj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2hlYWRpbmcgZ292dWstaGVhZGluZy1tIj5BYm91dCBEaWdpdGFsIE1hcmtldHBsYWNlPC9oMj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QgIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9oZWxwIj4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdAogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2UtYnV5ZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgU2VydmljZXMgeW91IGNhbiBidXkKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLXN1cHBsaWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZpY2VzIHlvdSBjYW4gc2VsbAogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9jcm93bi1jb21tZXJjaWFsLXNlcnZpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICBBYm91dCBDcm93biBDb21tZXJjaWFsIFNlcnZpY2VzCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQWJvdXQgR292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2VzCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvZy1jbG91ZC9zdXBwbGllcnMiPgogICAgICAgICAgICAgICAgICAgICAgICBHLUNsb3VkIHN1cHBsaWVyIEEgdG8gWgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fc2VjdGlvbiI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iZ292dWstZm9vdGVyX19oZWFkaW5nIGdvdnVrLWhlYWRpbmctbSI+R3VpZGFuY2UgZm9yIHVzaW5nIERpZ2l0YWwgTWFya2V0cGxhY2U8L2gyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdCAiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtc3VwcGxpZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zdXBwbGllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBseWluZyB0byBzZWxsIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvaG93LXRvLXNlbGwteW91ci1kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zZXJ2aWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIFJlc3BvbmRpbmcgdG8gYnV5ZXIgcmVxdWlyZW1lbnRzIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZy1jbG91ZC1idXllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBCdXlpbmcgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtYnV5ZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQnV5aW5nIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvdGhlLWNyb3duLWhvc3RpbmctZGF0YS1jZW50cmVzLWZyYW1ld29yay1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEJ1eWluZyBvbiB0aGUgQ3Jvd24gSG9zdGluZyBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIAogICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgIDwvZGl2PgogICAgICA8aHIgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fc2VjdGlvbi1icmVhayI+CiAgICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YSI+CiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YS1pdGVtIGdvdnVrLWZvb3Rlcl9fbWV0YS1pdGVtLS1ncm93Ij4KICAgICAgICAKICAgICAgICAgIDxoMiBjbGFzcz0iZ292dWstdmlzdWFsbHktaGlkZGVuIj5TdXBwb3J0IGxpbmtzPC9oMj4KICAgICAgICAgIAogICAgICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QiPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvdGVybXMtYW5kLWNvbmRpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgIFRlcm1zIGFuZCBjb25kaXRpb25zCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9jb29raWVzIj4KICAgICAgICAgICAgICAgICAgICBDb29raWVzCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9wcml2YWN5LW5vdGljZSI+CiAgICAgICAgICAgICAgICAgICAgUHJpdmFjeSBub3RpY2UKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAKICAgICAgICAgICAgPC91bD4KICAgICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YS1jdXN0b20iPgogICAgICAgICAgICAgIEJ1aWx0IGJ5IHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIiBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIj5Hb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZTwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICAgICAgICAKICAgICAgICA8c3ZnCiAgICAgICAgICByb2xlPSJwcmVzZW50YXRpb24iCiAgICAgICAgICBmb2N1c2FibGU9ImZhbHNlIgogICAgICAgICAgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGljZW5jZS1sb2dvIgogICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgdmlld2JveD0iMCAwIDQ4My4yIDE5NS43IgogICAgICAgICAgaGVpZ2h0PSIxNyIKICAgICAgICAgIHdpZHRoPSI0MSIKICAgICAgICA+CiAgICAgICAgICA8cGF0aAogICAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgICAgIGQ9Ik00MjEuNSAxNDIuOFYuMWwtNTAuNyAzMi4zdjE2MS4xaDExMi40di01MC43em0tMTIyLjMtOS42QTQ3LjEyIDQ3LjEyIDAgMCAxIDIyMSA5Ny44YzAtMjYgMjEuMS00Ny4xIDQ3LjEtNDcuMSAxNi43IDAgMzEuNCA4LjcgMzkuNyAyMS44bDQyLjctMjcuMkE5Ny42MyA5Ny42MyAwIDAgMCAyNjguMSAwYy0zNi41IDAtNjguMyAyMC4xLTg1LjEgNDkuN0E5OCA5OCAwIDAgMCA5Ny44IDBDNDMuOSAwIDAgNDMuOSAwIDk3LjhzNDMuOSA5Ny44IDk3LjggOTcuOGMzNi41IDAgNjguMy0yMC4xIDg1LjEtNDkuN2E5Ny43NiA5Ny43NiAwIDAgMCAxNDkuNiAyNS40bDE5LjQgMjIuMmgzdi04Ny44aC04MGwyNC4zIDI3LjV6TTk3LjggMTQ1Yy0yNiAwLTQ3LjEtMjEuMS00Ny4xLTQ3LjFzMjEuMS00Ny4xIDQ3LjEtNDcuMSA0Ny4yIDIxIDQ3LjIgNDdTMTIzLjggMTQ1IDk3LjggMTQ1IgogICAgICAgICAgLz4KICAgICAgICA8L3N2Zz4KICAgICAgICA8c3BhbiBjbGFzcz0iZ292dWstZm9vdGVyX19saWNlbmNlLWRlc2NyaXB0aW9uIj4KICAgICAgICAgIEFsbCBjb250ZW50IGlzIGF2YWlsYWJsZSB1bmRlciB0aGUKICAgICAgICAgIDxhCiAgICAgICAgICAgIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiCiAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIgogICAgICAgICAgICByZWw9ImxpY2Vuc2UiCiAgICAgICAgICA+T3BlbiBHb3Zlcm5tZW50IExpY2VuY2UgdjMuMDwvYT4sIGV4Y2VwdCB3aGVyZSBvdGhlcndpc2Ugc3RhdGVkCiAgICAgICAgPC9zcGFuPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19tZXRhLWl0ZW0iPgogICAgICAgIDxhCiAgICAgICAgICBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIGdvdnVrLWZvb3Rlcl9fY29weXJpZ2h0LWxvZ28iCiAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9pbmZvcm1hdGlvbi1tYW5hZ2VtZW50L3JlLXVzaW5nLXB1YmxpYy1zZWN0b3ItaW5mb3JtYXRpb24vdWstZ292ZXJubWVudC1saWNlbnNpbmctZnJhbWV3b3JrL2Nyb3duLWNvcHlyaWdodC8iCiAgICAgICAgPsKpIENyb3duIGNvcHlyaWdodDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9mb290ZXI+CgoKICAgIAogIDxzY3JpcHQgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2FwcGxpY2F0aW9uLmpzPzA2NGMzYmY3ZDU5ZWM5NzIxNTkxOGU1NTNiMzBlMjQ5Ij48L3NjcmlwdD4KICAKCiAgPC9ib2R5Pgo8L2h0bWw+
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:07 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12544
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7sw.e2fh1OU-XhBrc0FOC1xh1zz7lbk
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30043'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:07 GMT
      Dm-Request-Id:
      - 7f7e970b9779fbdd
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:07 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7sw.e2fh1OU-XhBrc0FOC1xh1zz7lbk;
        Expires=Wed, 17-Jun-2020 12:17:07 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7f7e970b9779fbdd
      X-B3-Traceid:
      - 7f7e970b9779fbdd
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b7a894ac-c2e4-4c0e-75b1-7f8c9a51c04d
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ebcb649503fb1051ac327331110822d4.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - JR7dmUciXn46c_XhmtYf5O7Nshy4J0ZpH_YiOYDR7MZMCCJETttOLQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:07 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12543
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7sw.e2fh1OU-XhBrc0FOC1xh1zz7lbk
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29730'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:07 GMT
      Dm-Request-Id:
      - 13bce7c817ad1de1
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:07 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7sw.e2fh1OU-XhBrc0FOC1xh1zz7lbk;
        Expires=Wed, 17-Jun-2020 12:17:07 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 13bce7c817ad1de1
      X-B3-Traceid:
      - 13bce7c817ad1de1
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - ac312350-1a31-4455-6d57-bfa5381efe34
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 70d76b875ab8737a556c3b85a25964b6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - dGTq9Dwvjv1dT3n00_faJfl53554Pe4iyfLkTdaCaUNqg15xF_fECw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:08 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12541
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7sw.e2fh1OU-XhBrc0FOC1xh1zz7lbk
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29717'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:08 GMT
      Dm-Request-Id:
      - cd84917fbf626bc8
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:08 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tA.HyLdnFjtJ4NsYUtUNVeRBudtHE0;
        Expires=Wed, 17-Jun-2020 12:17:08 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - cd84917fbf626bc8
      X-B3-Traceid:
      - cd84917fbf626bc8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 864d2429-fbf4-46ac-49ce-2806e77df072
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7f9417d4ec6b908629759ca97df0642c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - yS6KK33T8kzCKB-yUtjCTo4IFOwAIMB99YFidYx0lf0sLbu0bUNGvA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:08 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12540
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tA.HyLdnFjtJ4NsYUtUNVeRBudtHE0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34218'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:08 GMT
      Dm-Request-Id:
      - 51c535f6c83ebdf9
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:08 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tA.HyLdnFjtJ4NsYUtUNVeRBudtHE0;
        Expires=Wed, 17-Jun-2020 12:17:08 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 51c535f6c83ebdf9
      X-B3-Traceid:
      - 51c535f6c83ebdf9
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 16092678-0b1b-464c-7482-7757e80d7cf3
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 c7d0326d26a1e6e7b26b0c29a25ccbe0.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - 3agBCnL4BQ88-rcvmiuopEMd57PqVsXpNahYvpRYU7P6rI1_MZ0aPg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:08 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12526
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tA.HyLdnFjtJ4NsYUtUNVeRBudtHE0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34813'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:09 GMT
      Dm-Request-Id:
      - a4b8842797a9611d
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:09 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tQ.p_Aj8jkpox0V5Hj52XBs-MlIvKI;
        Expires=Wed, 17-Jun-2020 12:17:09 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - a4b8842797a9611d
      X-B3-Traceid:
      - a4b8842797a9611d
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 2a980640-a5b5-489d-5687-573d6722c0b0
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 93cfeed105500c4613cee2ee99f5f9a7.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - E6Hklh58NN3t7HnF6phcjZUt1-rc7T3sj4D-pTQmTl_hgS5EQzOL-g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:09 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12533
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tQ.p_Aj8jkpox0V5Hj52XBs-MlIvKI
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29782'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:09 GMT
      Dm-Request-Id:
      - 0a650aaee115b092
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:09 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tQ.p_Aj8jkpox0V5Hj52XBs-MlIvKI;
        Expires=Wed, 17-Jun-2020 12:17:09 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 0a650aaee115b092
      X-B3-Traceid:
      - 0a650aaee115b092
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 1e397080-81f4-480e-4dd8-1eeed80f376a
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 2fafb26bfb5e0420de152a7abef27a44.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - h5-tqEnb8GAfI5Q0_26iWUotazQAQ0gMEyStKLCADcOTOqFBplLYGg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:09 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12534
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tQ.p_Aj8jkpox0V5Hj52XBs-MlIvKI
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29731'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:09 GMT
      Dm-Request-Id:
      - 648c110cf0f8d468
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:09 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tQ.p_Aj8jkpox0V5Hj52XBs-MlIvKI;
        Expires=Wed, 17-Jun-2020 12:17:09 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 648c110cf0f8d468
      X-B3-Traceid:
      - 648c110cf0f8d468
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b39a8e2e-41d8-476f-6dcb-85cff4336a62
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 1e14debf40c7c0d32192ed8ad517da21.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - VaoY0Iwq7J839n_2guHYEDhjQa5tRBlcPIF2BFqOCo11K9LXW6C_Cw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:09 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12535
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tQ.p_Aj8jkpox0V5Hj52XBs-MlIvKI
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29725'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:10 GMT
      Dm-Request-Id:
      - 28c88017a49f996c
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:10 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tg.RfHbNdQkJy6JHmwWcmk9oqYe89g;
        Expires=Wed, 17-Jun-2020 12:17:10 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 28c88017a49f996c
      X-B3-Traceid:
      - 28c88017a49f996c
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b7ebe909-3370-41c4-7d98-b4798120c904
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 674e965f3d2af64c7723a159d4fcb6b5.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - NFVFm4kfSIP5HaMakKk0oytti7GMqwRXquaWs4wuVEWfAJFNMbS1FA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:10 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12466
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tg.RfHbNdQkJy6JHmwWcmk9oqYe89g
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '29755'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:10 GMT
      Dm-Request-Id:
      - 4eee397b286f88d7
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:10 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tg.RfHbNdQkJy6JHmwWcmk9oqYe89g;
        Expires=Wed, 17-Jun-2020 12:17:10 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 4eee397b286f88d7
      X-B3-Traceid:
      - 4eee397b286f88d7
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - fe6bfe65-0096-4ec7-5ffc-a0b638493600
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 175f4e0d961da3ddfe4ae465cff22263.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - c3-y_GvXocdHmgiuhbVEkVY3s9JlIuyAGrKcPmc1jjZCOqdZGdhJvg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiIgY2xhc3M9ImdvdnVrLXRlbXBsYXRlICI+CiAgPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4KICAgIDx0aXRsZT4KICBDQ1Q5MTQgLSBEZWZlbmNlIERpZ2l0YWwgU0RPIFNDSURBIEVuZ2luZWVyIChOb3J0aCkgLSBEaWdpdGFsIE1hcmtldHBsYWNlCjwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIHZpZXdwb3J0LWZpdD1jb3ZlciI+CiAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iIzBiMGMwYyIgLz4gCiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIgLz4KCiAgICAKICAgICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBzaXplcz0iMTZ4MTYgMzJ4MzIgNDh4NDgiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2Zhdmljb24uaWNvIiB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICAgIDxsaW5rIHJlbD0ibWFzay1pY29uIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1tYXNrLWljb24uc3ZnIiBjb2xvcj0iIzBiMGMwYyI+IAogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxODB4MTgwIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1hcHBsZS10b3VjaC1pY29uLTE4MHgxODAucG5nIj4KICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTY3eDE2NyIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstYXBwbGUtdG91Y2gtaWNvbi0xNjd4MTY3LnBuZyI+CiAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi5wbmciPgogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24ucG5nIj4KICAgIAoKICAgIAogIAoKCgoKCgoKCiAgCiAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSJUS0dTR1puZkhweDEtbEtPdGhJMTdBTnR3azdmejNGNFNicjc3STBwcE8wIj4KCiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi5jc3M/NmY5NzFiNGQ3ZjUzYTJlODE2NmIzZTZhNDk3ZjhmMGMiIC8+CiAgCgogICAgCiAgICAKICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iL3N0YXRpYy9pbWFnZXMvZ292dWstb3BlbmdyYXBoLWltYWdlLnBuZyI+CiAgPC9oZWFkPgogIDxib2R5IGNsYXNzPSJnb3Z1ay10ZW1wbGF0ZV9fYm9keSAiPgogICAgPHNjcmlwdD5kb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9ICgoZG9jdW1lbnQuYm9keS5jbGFzc05hbWUpID8gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgKyAnIGpzLWVuYWJsZWQnIDogJ2pzLWVuYWJsZWQnKTs8L3NjcmlwdD4KICAgIAoKICAgIAogICAgICA8YSBocmVmPSIjbWFpbi1jb250ZW50IiBjbGFzcz0iZ292dWstc2tpcC1saW5rIj5Ta2lwIHRvIG1haW4gY29udGVudDwvYT4KICAgIAoKICAgIAogIAogIAoKCgoKPGRpdiBpZD0iZG0tY29va2llLWJhbm5lciIgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXIgZ292dWstd2lkdGgtY29udGFpbmVyIiBkYXRhLW1vZHVsZT0iZG0tY29va2llLWJhbm5lciIgcm9sZT0icmVnaW9uIiBhcmlhLWRlc2NyaWJlZGJ5PSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICA8ZGl2IGNsYXNzPSJkbS1jb29raWUtYmFubmVyX193cmFwcGVyIj4KICAgIDxoMiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyBnb3Z1ay1oZWFkaW5nLW0iIGlkPSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICAgICAgQ2FuIHdlIHN0b3JlIGFuYWx5dGljcyBjb29raWVzIG9uIHlvdXIgZGV2aWNlPwogICAgPC9oMj4KICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5Ij4KICAgICAgQW5hbHl0aWNzIGNvb2tpZXMgaGVscCB1cyB1bmRlcnN0YW5kIGhvdyBvdXIgd2Vic2l0ZSBpcyBiZWluZyB1c2VkLgogICAgPC9wPgogICAgPGRpdiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fYnV0dG9ucyI+CiAgICAgIDxidXR0b24gY2xhc3M9ImdvdnVrLWJ1dHRvbiBkbS1jb29raWUtYmFubmVyX19idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uLS1hY2NlcHQiIHR5cGU9InN1Ym1pdCIgZGF0YS1hY2NlcHQtY29va2llcz0idHJ1ZSIgYXJpYS1kZXNjcmliZWRieT0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyI+CiAgICAgICAgWWVzPHNwYW4gY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+LCBEaWdpdGFsIE1hcmtldHBsYWNlIGNhbiBzdG9yZSBhbmFseXRpY3MgY29va2llcyBvbiB5b3VyIGRldmljZTwvc3Bhbj4KICAgICAgPC9idXR0b24+CiAgICAgIDxidXR0b24gY2xhc3M9ImdvdnVrLWJ1dHRvbiBkbS1jb29raWUtYmFubmVyX19idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uLS1yZWplY3QiIHR5cGU9InN1Ym1pdCIgZGF0YS1hY2NlcHQtY29va2llcz0iZmFsc2UiIGFyaWEtZGVzY3JpYmVkYnk9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmciPgogICAgICAgIE5vPHNwYW4gY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+LCBEaWdpdGFsIE1hcmtldHBsYWNlIGNhbm5vdCBzdG9yZSBhbmFseXRpY3MgY29va2llcyBvbiB5b3VyIGRldmljZTwvc3Bhbj4KICAgICAgPC9idXR0b24+CiAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIGRtLWNvb2tpZS1iYW5uZXJfX2xpbmsiIGhyZWY9Ii9jb29raWVzIj5Ib3cgRGlnaXRhbCBNYXJrZXRwbGFjZSB1c2VzIGNvb2tpZXM8L2E+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPGRpdiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fY29uZmlybWF0aW9uIiB0YWJpbmRleD0iLTEiPgogICAgPHAgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2NvbmZpcm1hdGlvbi1tZXNzYWdlIGdvdnVrLWJvZHkiPgogICAgICBZb3UgY2FuIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvdXNlci9jb29raWUtc2V0dGluZ3MiPmNoYW5nZSB5b3VyIGNvb2tpZSBzZXR0aW5nczwvYT4gYXQgYW55IHRpbWUuCiAgICA8L3A+CiAgICA8YnV0dG9uIGNsYXNzPSJkbS1jb29raWUtYmFubmVyX19oaWRlLWJ1dHRvbiBnb3Z1ay1saW5rIiBkYXRhLWhpZGUtY29va2llLWJhbm5lcj0idHJ1ZSIgcm9sZT0ibGluayI+SGlkZTwvYnV0dG9uPgogIDwvZGl2Pgo8L2Rpdj4KCiAgCgoKCgoKICAKICAKCgoKICAKCjxoZWFkZXIgY2xhc3M9ImdvdnVrLWhlYWRlciAiIHJvbGU9ImJhbm5lciIgZGF0YS1tb2R1bGU9ImhlYWRlciI+CiAgPGRpdiBjbGFzcz0iZ292dWstaGVhZGVyX19jb250YWluZXIgZ292dWstd2lkdGgtY29udGFpbmVyIj4KCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ28iPgogICAgICA8YSBocmVmPSIvIiBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIGdvdnVrLWhlYWRlcl9fbGluay0taG9tZXBhZ2UiPgogICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlIj4KICAgICAgICAgIAogICAgICAgICAgPHN2ZwogICAgICAgICAgICByb2xlPSJwcmVzZW50YXRpb24iCiAgICAgICAgICAgIGZvY3VzYWJsZT0iZmFsc2UiCiAgICAgICAgICAgIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLWNyb3duIgogICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgIHZpZXdib3g9IjAgMCAxMzIgOTciCiAgICAgICAgICAgIGhlaWdodD0iMzIiCiAgICAgICAgICAgIHdpZHRoPSIzNiIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICBkPSJNMjUgMzAuMmMzLjUgMS41IDcuNy0uMiA5LjEtMy43IDEuNS0zLjYtLjItNy44LTMuOS05LjItMy42LTEuNC03LjYuMy05LjEgMy45LTEuNCAzLjUuMyA3LjUgMy45IDl6TTkgMzkuNWMzLjYgMS41IDcuOC0uMiA5LjItMy43IDEuNS0zLjYtLjItNy44LTMuOS05LjEtMy42LTEuNS03LjYuMi05LjEgMy44LTEuNCAzLjUuMyA3LjUgMy44IDl6TTQuNCA1Ny4yYzMuNSAxLjUgNy43LS4yIDkuMS0zLjggMS41LTMuNi0uMi03LjctMy45LTkuMS0zLjUtMS41LTcuNi4zLTkuMSAzLjgtMS40IDMuNS4zIDcuNiAzLjkgOS4xem0zOC4zLTIxLjRjMy41IDEuNSA3LjctLjIgOS4xLTMuOCAxLjUtMy42LS4yLTcuNy0zLjktOS4xLTMuNi0xLjUtNy42LjMtOS4xIDMuOC0xLjMgMy42LjQgNy43IDMuOSA5LjF6bTY0LjQtNS42Yy0zLjYgMS41LTcuOC0uMi05LjEtMy43LTEuNS0zLjYuMi03LjggMy44LTkuMiAzLjYtMS40IDcuNy4zIDkuMiAzLjkgMS4zIDMuNS0uNCA3LjUtMy45IDl6bTE1LjkgOS4zYy0zLjYgMS41LTcuNy0uMi05LjEtMy43LTEuNS0zLjYuMi03LjggMy43LTkuMSAzLjYtMS41IDcuNy4yIDkuMiAzLjggMS41IDMuNS0uMyA3LjUtMy44IDl6bTQuNyAxNy43Yy0zLjYgMS41LTcuOC0uMi05LjItMy44LTEuNS0zLjYuMi03LjcgMy45LTkuMSAzLjYtMS41IDcuNy4zIDkuMiAzLjggMS4zIDMuNS0uNCA3LjYtMy45IDkuMXpNODkuMyAzNS44Yy0zLjYgMS41LTcuOC0uMi05LjItMy44LTEuNC0zLjYuMi03LjcgMy45LTkuMSAzLjYtMS41IDcuNy4zIDkuMiAzLjggMS40IDMuNi0uMyA3LjctMy45IDkuMXpNNjkuNyAxNy43bDguOSA0LjdWOS4zbC04LjkgMi44Yy0uMi0uMy0uNS0uNi0uOS0uOUw3Mi40IDBINTkuNmwzLjUgMTEuMmMtLjMuMy0uNi41LS45LjlsLTguOC0yLjh2MTMuMWw4LjgtNC43Yy4zLjMuNi43LjkuOWwtNSAxNS40di4xYy0uMi44LS40IDEuNi0uNCAyLjQgMCA0LjEgMy4xIDcuNSA3IDguMWguMmMuMyAwIC43LjEgMSAuMS40IDAgLjcgMCAxLS4xaC4yYzQtLjYgNy4xLTQuMSA3LjEtOC4xIDAtLjgtLjEtMS43LS40LTIuNFYzNGwtNS4xLTE1LjRjLjQtLjIuNy0uNiAxLS45ek02NiA5Mi44YzE2LjkgMCAzMi44IDEuMSA0Ny4xIDMuMiA0LTE2LjkgOC45LTI2LjcgMTQtMzMuNWwtOS42LTMuNGMxIDQuOSAxLjEgNy4yIDAgMTAuMi0xLjUtMS40LTMtNC4zLTQuMi04LjdMMTA4LjYgNzZjMi44LTIgNS0zLjIgNy41LTMuMy00LjQgOS40LTEwIDExLjktMTMuNiAxMS4yLTQuMy0uOC02LjMtNC42LTUuNi03LjkgMS00LjcgNS43LTUuOSA4LS41IDQuMy04LjctMy0xMS40LTcuNi04LjggNy4xLTcuMiA3LjktMTMuNSAyLjEtMjEuMS04IDYuMS04LjEgMTIuMy00LjUgMjAuOC00LjctNS40LTEyLjEtMi41LTkuNSA2LjIgMy40LTUuMiA3LjktMiA3LjIgMy4xLS42IDQuMy02LjQgNy44LTEzLjUgNy4yLTEwLjMtLjktMTAuOS04LTExLjItMTMuOCAyLjUtLjUgNy4xIDEuOCAxMSA3LjNMODAuMiA2MGMtNC4xIDQuNC04IDUuMy0xMi4zIDUuNCAxLjQtNC40IDgtMTEuNiA4LTExLjZINTUuNXM2LjQgNy4yIDcuOSAxMS42Yy00LjItLjEtOC0xLTEyLjMtNS40bDEuNCAxNi40YzMuOS01LjUgOC41LTcuNyAxMC45LTcuMy0uMyA1LjgtLjkgMTIuOC0xMS4xIDEzLjgtNy4yLjYtMTIuOS0yLjktMTMuNS03LjItLjctNSAzLjgtOC4zIDcuMS0zLjEgMi43LTguNy00LjYtMTEuNi05LjQtNi4yIDMuNy04LjUgMy42LTE0LjctNC42LTIwLjgtNS44IDcuNi01IDEzLjkgMi4yIDIxLjEtNC43LTIuNi0xMS45LjEtNy43IDguOCAyLjMtNS41IDcuMS00LjIgOC4xLjUuNyAzLjMtMS4zIDcuMS01LjcgNy45LTMuNS43LTktMS44LTEzLjUtMTEuMiAyLjUuMSA0LjcgMS4zIDcuNSAzLjNsLTQuNy0xNS40Yy0xLjIgNC40LTIuNyA3LjItNC4zIDguNy0xLjEtMy0uOS01LjMgMC0xMC4ybC05LjUgMy40YzUgNi45IDkuOSAxNi43IDE0IDMzLjUgMTQuOC0yLjEgMzAuOC0zLjIgNDcuNy0zLjJ6IgogICAgICAgICAgICA+PC9wYXRoPgogICAgICAgICAgICAKICAgICAgICAgICAgPGltYWdlIHNyYz0iL2Fzc2V0cy9pbWFnZXMvZ292dWstbG9nb3R5cGUtY3Jvd24ucG5nIiB4bGluazpocmVmPSIiIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLWNyb3duLWZhbGxiYWNrLWltYWdlIiB3aWR0aD0iMzYiIGhlaWdodD0iMzIiPjwvaW1hZ2U+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLXRleHQiPgogICAgICAgICAgICBHT1YuVUsKICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImdvdnVrLWhlYWRlcl9fcHJvZHVjdC1uYW1lIj4KICAgICAgICAgIERpZ2l0YWwgTWFya2V0cGxhY2UKICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgIDwvYT4KICAgIDwvZGl2PgogICAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2NvbnRlbnQiPgoKICAgIAoKICAgIAogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbWVudS1idXR0b24ganMtaGVhZGVyLXRvZ2dsZSIgYXJpYS1jb250cm9scz0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iU2hvdyBvciBoaWRlIFRvcCBMZXZlbCBOYXZpZ2F0aW9uIj5NZW51PC9idXR0b24+CiAgICA8bmF2PgogICAgICA8dWwgaWQ9Im5hdmlnYXRpb24iIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24gIiBhcmlhLWxhYmVsPSJUb3AgTGV2ZWwgTmF2aWdhdGlvbiI+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24taXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2J1eWluZy1hbmQtc2VsbGluZy1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+CiAgICAgICAgICAgICAgICBHdWlkYW5jZQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstaGVhZGVyX19uYXZpZ2F0aW9uLWl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xpbmsiIGhyZWY9Ii9oZWxwIj4KICAgICAgICAgICAgICAgIEhlbHAKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbmF2aWdhdGlvbi1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIiBocmVmPSIvdXNlci9sb2dpbiI+CiAgICAgICAgICAgICAgICBMb2cgaW4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAKICAgICAgPC91bD4KICAgIDwvbmF2PgogICAgCiAgICA8L2Rpdj4KICAgIAogIDwvZGl2Pgo8L2hlYWRlcj4KCgogICAgCiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLXdpZHRoLWNvbnRhaW5lciI+CiAgICAgICAgCiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1waGFzZS1iYW5uZXIiPgogIDxwIGNsYXNzPSJnb3Z1ay1waGFzZS1iYW5uZXJfX2NvbnRlbnQiPjxzdHJvbmcgY2xhc3M9ImdvdnVrLXRhZyBnb3Z1ay1waGFzZS1iYW5uZXJfX2NvbnRlbnRfX3RhZyAiPgogIGJldGEKPC9zdHJvbmc+PHNwYW4gY2xhc3M9ImdvdnVrLXBoYXNlLWJhbm5lcl9fdGV4dCI+CiAgICAgIEhlbHAgdXMgaW1wcm92ZSB0aGUgRGlnaXRhbCBNYXJrZXRwbGFjZSAtIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvaGVscCI+c2VuZCB5b3VyIGZlZWRiYWNrPC9hPgogICAgPC9zcGFuPgogIDwvcD4KPC9kaXY+CiAgCiAgCjxkaXYgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzIj4KICA8b2wgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0Ij4KICAKICAgIAogICAgPGxpIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdC1pdGVtIj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saW5rIiBocmVmPSIvIj5EaWdpdGFsIE1hcmtldHBsYWNlPC9hPgogICAgPC9saT4KICAgIAogIAogICAgCiAgICA8bGkgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0LWl0ZW0iPgogICAgICA8YSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzIj5TdXBwbGllciBvcHBvcnR1bml0aWVzPC9hPgogICAgPC9saT4KICAgIAogIAogIDwvb2w+CjwvZGl2PgoKCiAgICAgICAgPG1haW4gY2xhc3M9ImdvdnVrLW1haW4td3JhcHBlciAiIGlkPSJtYWluLWNvbnRlbnQiIHJvbGU9Im1haW4iPgogICAgICAgICAgCiAgCiAgCgogIAogICAgCiAgCiAgCgoKCjxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi10d28tdGhpcmRzIj4KICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1jYXB0aW9uLWwiPk1pbmlzdHJ5IG9mIERlZmVuY2UsIERlZmVuY2UgRGlnaXRhbDwvc3Bhbj4KICAgIDxoMSBjbGFzcz0iZ292dWstaGVhZGluZy1sIj5DQ1Q5MTQgLSBEZWZlbmNlIERpZ2l0YWwgU0RPIFNDSURBIEVuZ2luZWVyIChOb3J0aCk8L2gxPgogICAgPHNwYW4gZGF0YS1sb3Q9ImRpZ2l0YWwtc3BlY2lhbGlzdHMiPjwvc3Bhbj4KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOSI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tb25lLXRoaXJkIGFwcC1zdGF0LWJsb2NrIiBpZD0iaW5jb21wbGV0ZS1hcHBsaWNhdGlvbnMiPgogICA8aDI+CiAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay0hLWZvbnQtc2l6ZS0zNiBnb3Z1ay0hLWRpc3BsYXktYmxvY2siPjU8L3NwYW4+CiAgICAgIDxzcGFuPkluY29tcGxldGUgYXBwbGljYXRpb25zPC9zcGFuPgogICA8L2gyPgogICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLWZvbnQtc2l6ZS0xNiI+NSBTTUUsIDAgbGFyZ2U8L3A+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi1vbmUtdGhpcmQgYXBwLXN0YXQtYmxvY2siIGlkPSJjb21wbGV0ZWQtYXBwbGljYXRpb25zIj4KICAgPGgyPgogICAgICA8c3BhbiBjbGFzcz0iZ292dWstIS1mb250LXNpemUtMzYgZ292dWstIS1kaXNwbGF5LWJsb2NrIj4wPC9zcGFuPgogICAgICA8c3Bhbj5Db21wbGV0ZWQgYXBwbGljYXRpb25zPC9zcGFuPgogICA8L2gyPgogICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLWZvbnQtc2l6ZS0xNiI+PC9wPgo8L2Rpdj4KCjwvZGl2PgoKPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLWZ1bGwiPgogICAgCgo8aDIgY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+SW1wb3J0YW50IGRhdGVzPC9oMj4KCgoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiIGlkPSJvcHBvcnR1bml0eS1pbXBvcnRhbnQtZGF0ZXMiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBQdWJsaXNoZWQKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUdWVzZGF5IDE2IEp1bmUgMjAyMAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBEZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9ucwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFR1ZXNkYXkgMjMgSnVuZSAyMDIwIGF0IDExOjU5cG0gR01UCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIENsb3NpbmcgZGF0ZSBmb3IgYXBwbGljYXRpb25zCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgVHVlc2RheSAzMCBKdW5lIDIwMjAgYXQgMTE6NTlwbSBHTVQKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0xIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+T3ZlcnZpZXc8L2gyPgogIAogIAoKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFNwZWNpYWxpc3Qgcm9sZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIERlbGl2ZXJ5IG1hbmFnZXIKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgU3VtbWFyeSBvZiB0aGUgd29yawogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIEFzc2Vzc21lbnQgb2YgSVQgYW5kIHBoeXNpY2FsIGluZnJhc3RydWN0dXJlLCBhY3Jvc3MgbXVsdGlwbGUgZGVmZW5jZSBzaXRlcywgZW5zdXJpbmcgY29tcGxpYW5jZSB3aXRoIEpTUCA2MDQgYW5kIEpTUCA0NDAuIFN1cHBvcnRpbmcgY2hhbmdlIHJlcXVlc3RzIGVuc3VyaW5nIGluc3RhbGxhdGlvbnMgYXJlIHRvIHN0YW5kYXJkIGZvbGxvd2luZyBNb0QgcHJvY2Vzc2VzLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBMYXRlc3Qgc3RhcnQgZGF0ZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFR1ZXNkYXkgMSBTZXB0ZW1iZXIgMjAyMAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFeHBlY3RlZCBjb250cmFjdCBsZW5ndGgKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBmaXhlZCBleHBpcnkgb2YgMzFzdCBNYXJjaCAyMDIxCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIExvY2F0aW9uCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTm8gc3BlY2lmaWMgbG9jYXRpb24sIGVnIHRoZXkgY2FuIHdvcmsgcmVtb3RlbHkKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgT3JnYW5pc2F0aW9uIHRoZSB3b3JrIGlzIGZvcgogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIE1pbmlzdHJ5IG9mIERlZmVuY2UsIERlZmVuY2UgRGlnaXRhbAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBNYXhpbXVtIGRheSByYXRlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgwqM3NTAKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTIiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5BYm91dCB0aGUgd29yazwvaDI+CiAgCiAgCgoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFYXJseSBtYXJrZXQgZW5nYWdlbWVudAogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBXaG8gdGhlIHNwZWNpYWxpc3Qgd2lsbCB3b3JrIHdpdGgKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBZb3Ugd2lsbCBwcmltYXJpbHkgcmVwb3J0IHRvIHRoZSBEZWZlbmNlIERpZ2l0YWwgU0NJREEgUHJvamVjdCB0ZWFtIGJ1dCB3aWxsIGJlIHN1cHBvcnRlZCBieSB0aGUgcmVnaW9uYWwgRGVmIFNpdGVzIHRlYW0gaW4gd2hpY2ggdGhleSBhcmUgYmFzZWQuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFdoYXQgdGhlIHNwZWNpYWxpc3Qgd2lsbCB3b3JrIG9uCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgRGVsaXZlcnkgb2YgdGhlIFNDSURBIGZ1bmN0aW9uIGFuZCBpdHMgb3V0cHV0cyBpbiBsaW5lIHdpdGggSlNQIDYwNCBndWlkZWxpbmVzIGFuZCBEZWZlbmNlIERpZ2l0YWwgcHJvY2Vzc2VzIOKAkzxicj5Db21wbGV0aW9uIG9mIFNlcnZpY2UgTGV2ZWwgMSBhbmQgU2VydmljZSBMZXZlbCAyIFNDSURBIGF1ZGl0cy48YnI+Q29tcGxldGlvbiBvZiBFQ1IgKEVuZ2luZWVyaW5nIENoYW5nZSBSZXF1ZXN0cykgYXQgc3RhZ2VzIDMgYW5kIDUgZGVsaXZlcnkuPGJyPkNvbXBsZXRpb24gb2Ygc2l0ZSBpbmZyYXN0cnVjdHVyZSBiYXNlbGluaW5nLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8aDIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtMyIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPldvcmsgc2V0dXA8L2gyPgogIAogIAoKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgQWRkcmVzcyB3aGVyZSB0aGUgd29yayB3aWxsIHRha2UgcGxhY2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUaGUgcm9sZSB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciBwcm92aWRpbmcgU0NJREEgc2VydmljZXMgYXQgRGVmZW5jZSBzaXRlcyBpbiBTY290bGFuZCwgTkksIGFuZCBOb3J0aCBFbmdsYW5kIGFzIGZhciBkb3duIGFzIFlvcmtzaGlyZSBhbmQgQ2hlc2hpcmUuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFdvcmtpbmcgYXJyYW5nZW1lbnRzCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgVGhlIHdvcmsgd2lsbCBiZSBkZWxpdmVyZWQgZnJvbSBtdWx0aXBsZSBzaXRlcyB3aXRoaW4gdGhlIGRlZmluZWQgZ2VvZ3JhcGhpY2FsIGFyZWEuICBUaGUgc3BlY2lhbGlzdCB3aWxsIHdvcmsgZGlyZWN0bHkgdG8gdGhlIERlZmVuY2UgRGlnaXRhbCBTQ0lEQSBQcm9qZWN0IHRlYW0gYW5kIGJlIHN1cHBvcnRlZCBieSB0aGUgRGVmIFNpdGVzIHRlYW0gd2hlcmUgdGhleSBhcmUgYmFzZWQuPGJyPjxicj5JbiB1bmRlcnRha2luZyB0aGUgU2VydmljZXMsIHRoZSBzcGVjaWFsaXN0IHdpbGwgY29tcGx5IHdpdGggRGVmZW5jZSBEaWdpdGFsIFNDSURBIHByb2Nlc3NlcyBhbmQgd2F5cyBvZiB3b3JraW5nLjxicj48YnI+VHJhdmVsIGFuZCBTdWJzaXN0ZW5jZSB3aWxsIGJlIHBhaWQgb24gYW4gYWN0dWFscyBiYXNpcyBhbmQgYWxpZ25lZCB0byBNT0QgUG9saWN5LgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBTZWN1cml0eSBjbGVhcmFuY2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBTQyBjbGVhcmFuY2UgaXMgcmVxdWlyZWQgYXQgY29tbWVuY2VtZW50IGFuZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBlbmdhZ2VtZW50LgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8aDIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNCIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPkFkZGl0aW9uYWwgaW5mb3JtYXRpb248L2gyPgogIAogIAoKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEFkZGl0aW9uYWwgdGVybXMgYW5kIGNvbmRpdGlvbnMKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICAKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTUiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5Ta2lsbHMgYW5kIGV4cGVyaWVuY2U8L2gyPgogIAogIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIj5CdXllcnMgd2lsbCB1c2UgdGhlIGVzc2VudGlhbCBhbmQgbmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZSB0byBoZWxwIHRoZW0gZXZhbHVhdGUgc3VwcGxpZXJz4oCZIHRlY2huaWNhbCBjb21wZXRlbmNlLjwvcD4KICAKICAKICAKCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRXNzZW50aWFsIHNraWxscyBhbmQgZXhwZXJpZW5jZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPkEgU0NJREEgcXVhbGlmaWNhdGlvbiBvciBldmlkZW5jZSBvZiB0d28geWVhcnMgZW1wbG95bWVudCBhcyBhIFNDSURBIHdpdGhpbiB0aGUgbGFzdCBmaXZlIHllYXJzIDMwJTwvbGk+CiAgICAgICAgICA8bGk+RGVtb25zdHJhYmxlIGV4cGVyaWVuY2UgYW5kIGtub3dsZWRnZSBvZiBTZXJ2aWNlIFZhbGlkYXRpb24gYW5kIEFjY2VwdGFuY2Ugb2YgSUNUIHNlcnZpY2VzIDIwJTwvbGk+CiAgICAgICAgICA8bGk+RXhwZXJpZW5jZSBkZWxpdmVyaW5nIElDVCBTeXN0ZW1zIGludG8gY29tcGxleCBlbnZpcm9ubWVudHMgYW5kIHdpdGggb3RoZXIgdGVhbXMgKGUuZy4gTmV0d29ya3MpLiAxNSU8L2xpPgogICAgICAgICAgPGxpPlByb3ZpZGUgZXZpZGVuY2UgYW5kIGV4YW1wbGVzIG9mIHN1Y2Nlc3NmdWwgZGVsaXZlcnkgb2YgU0NJREEgc2VydmljZXMgZm9yIGNvbXBsZXggSUNUIHByb2plY3RzIHdpdGhpbiBjaGFsbGVuZ2luZyBtdWx0aS1zdGFrZWhvbGRlciBlbnZpcm9ubWVudHMuIDIwJTwvbGk+CiAgICAgICAgICA8bGk+S25vd2xlZGdlIG9mIHNlY3VyaXR5IGFyY2hpdGVjdHVyZSByZXF1aXJlZCBpbiBjb21wYXJ0bWVudGVkIGNlcnRpZmllZCBlbnZpcm9ubWVudHM7IGluY2x1ZGluZyBwb2xpY2llcyBhbmQgY29uc3RyYWludHMgYXNzb2NpYXRlZCB3aXRoIElDVCBTeXN0ZW1zIGFuZCB3b3JraW5nIGtub3dsZWRnZSBhbmQgZXZpZGVuY2Ugb2YgdXNpbmcgTW9EIEpTUCYjMzk7cyA0NDAgYW5kIDYwNC4gIDE1JTwvbGk+CiAgICAgICAgPC91bD4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgTmljZS10by1oYXZlIHNraWxscyBhbmQgZXhwZXJpZW5jZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPkV2aWRlbmNlIG9mIGFwcHJvcHJpYXRlIFByb2plY3QgTWFuYWdlbWVudCB0cmFpbmluZyBpbiBhIHJlbGV2YW50IGZpZWxkLCAoZS5nLiBBUE0sIFByaW5jZTIsIE1TUCBldGMpLiAxMCU8L2xpPgogICAgICAgICAgPGxpPktub3dsZWRnZSBhbmQgRXhwZXJpZW5jZSBvZiBPZmZpY2UgMzY1IHNvZnR3YXJlIDEwJTwvbGk+CiAgICAgICAgICA8bGk+RXhwZXJpZW5jZSBvZiBDaGFuZ2UgQ29udHJvbCBwcm9jZXNzZXMgaW5jbHVkaW5nIGRlbGl2ZXJ5IG9mIHNpZ25pZmljYW50IGNoYW5nZXMgdG8gSUNUIFN5c3RlbXMuIDIwJTwvbGk+CiAgICAgICAgICA8bGk+RXZpZGVuY2Ugb2YgSUVUIEVsZWN0cmljYWwgV2lyaW5nIFJlZ3VsYXRpb25zIHRyYWluaW5nIDIwJTwvbGk+CiAgICAgICAgICA8bGk+RXhwZXJpZW5jZSBvZiB3b3JraW5nIG9uIElDVCBTeXN0ZW1zIGluIGNvbXBhcnRtZW50ZWQgY2VydGlmaWVkIGVudmlyb25tZW50cy4gRGVtb25zdHJhYmxlIGV4cGVyaWVuY2UgaW4gY2xhc3NpZmllZCBkb21haW5zIGFuZCBEZWZlbmNlIENvbW11bml0eS4gMTAlPC9saT4KICAgICAgICAgIDxsaT5Qcm92ZW4gZXhwZXJpZW5jZSB3b3JraW5nIGluIElDVCBUcmFuc2l0aW9uIFBsYW5uaW5nIGFuZCBTdXBwb3J0IGVudmlyb25tZW50cy4gRXZpZGVuY2Ugb2YgYWJpbGl0eSB0byBkZXZlbG9wL21haW50YWluIHBsYW5zIGZvciBtaWdyYXRpb24gb2YgSUNUIFN5c3RlbXMgYW5kIHVuZGVydGFrZSBmb3JtYWwgcXVhbGl0eSByZXZpZXdzIG9mIHRlY2huaWNhbC9kb2N1bWVudGF0aW9uLiAgMjAlPC9saT4KICAgICAgICAgIDxsaT5FeHBlcmllbmNlIG9mIElUIFNlcnZpY2UgTWFuYWdlbWVudCB0b29saW5nIFJlbWVkeS4gMTAlPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8aDIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtNiIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPkhvdyBzdXBwbGllcnMgd2lsbCBiZSBldmFsdWF0ZWQ8L2gyPgogIAogIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIj5BbGwgc3VwcGxpZXJzIHdpbGwgYmUgYXNrZWQgdG8gcHJvdmlkZSBhIHdvcmsgaGlzdG9yeS48L3A+CiAgCiAgCgoKICAKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgSG93IG1hbnkgc3BlY2lhbGlzdHMgdG8gZXZhbHVhdGUKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICA0CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEN1bHR1cmFsIGZpdCBjcml0ZXJpYQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDx1bCBjbGFzcz0iZ292dWstbGlzdCBnb3Z1ay1saXN0LS1idWxsZXQiPgogICAgICAgICAgPGxpPldvcmsgYXMgYSB0ZWFtIHdpdGggTW9EPC9saT4KICAgICAgICAgIDxsaT5CZSB0cmFuc3BhcmVudCBhbmQgY29sbGFib3JhdGl2ZSB3aGVuIG1ha2luZyBkZWNpc2lvbnM8L2xpPgogICAgICAgICAgPGxpPlRha2UgcmVzcG9uc2liaWxpdHkgZm9yIHRoZWlyIHdvcms8L2xpPgogICAgICAgICAgPGxpPlNoYXJlIGtub3dsZWRnZSBhbmQgZXhwZXJpZW5jZSB3aXRoIHRlYW08L2xpPgogICAgICAgICAgPGxpPkJlIGNvbWZvcnRhYmxlIHN0YW5kaW5nIHVwIGZvciBkaXNjaXBsaW5lPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBBZGRpdGlvbmFsIGFzc2Vzc21lbnQgbWV0aG9kcwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIEludGVydmlldwogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBFdmFsdWF0aW9uIHdlaWdodGluZwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0wIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5UZWNobmljYWwgY29tcGV0ZW5jZTwvcD4KICAgICAgICA8ZGl2PjcwJTwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5DdWx0dXJhbCBmaXQ8L3A+CiAgICAgICAgPGRpdj41JTwvZGl2PgogICAgICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5IGdvdnVrLSEtbWFyZ2luLXRvcC0zIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS0xIj5QcmljZTwvcD4KICAgICAgICA8ZGl2PjI1JTwvZGl2PgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi1mdWxsIj4KICAgIAoKCgo8aDIgaWQ9ImNsYXJpZmljYXRpb24tcXVlc3Rpb25zIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+UXVlc3Rpb25zIGFza2VkIGJ5IHN1cHBsaWVyczwvaDI+CgoKCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgMS4gSXMgdGhlcmUgYW4gSW5jdW1iZW50PwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoaXMgaXMgYSBuZXcgcmVxdWlyZW1lbnQgYW5kIHRoZXJlZm9yZSB0aGVyZSBpcyBubyBpbmN1bWJlbnQuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDIuIFdoYXQgaXMgdGhlIElSMzUgc3RhdHVzIG9mIHRoZSByb2xlPwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoZSByb2xlIGhhcyBiZWVuIGFzc2Vzc2VkIGFzIG91dHNpZGUgSVIzNS4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCgoKICA8YSBjbGFzcz0iZ292dWstbGluayIgaHJlZj0iL3N1cHBsaWVycy9vcHBvcnR1bml0aWVzLzEyNDY2L2Fzay1hLXF1ZXN0aW9uIj4KICAgIAogICAgICBMb2cgaW4gdG8gYXNrIGEgcXVlc3Rpb24KICAgIAogIDwvYT4KCiAgPC9kaXY+CjwvZGl2PgoKCiAgPGJyLz48IS0tIDwtIHJlbW92ZSBvbmNlIGdyaWQgYW5kIGJvZHkgZWxlbWVudHMgaGF2ZSBiZWVuIGNvbnZlcnRlZCB0byBnb3Z1ayBmcm9udGVuZCAtLT4KICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyI+CiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi10d28tdGhpcmRzIj4KICAgICAgPGZvcm0gYWN0aW9uPSIvc3VwcGxpZXJzL29wcG9ydHVuaXRpZXMvMTI0NjYvcmVzcG9uc2VzL3N0YXJ0IiBtZXRob2Q9ImdldCI+CiAgICAgICAgCiAgCiAgICAKICAKCjxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iZ292dWstYnV0dG9uIj4KICBBcHBseSBmb3IgdGhpcyBvcHBvcnR1bml0eQo8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgPC9kaXY+CiAgPC9kaXY+CgoKCgogICAgICAgIDwvbWFpbj4KICAgICAgPC9kaXY+CiAgICAKCiAgICAKICA8Zm9vdGVyIGNsYXNzPSJnb3Z1ay1mb290ZXIgIiByb2xlPSJjb250ZW50aW5mbyI+CiAgPGRpdiBjbGFzcz0iZ292dWstd2lkdGgtY29udGFpbmVyICI+CiAgICAKICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19uYXZpZ2F0aW9uIj4KICAgICAgICAKICAgICAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fc2VjdGlvbiI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iZ292dWstZm9vdGVyX19oZWFkaW5nIGdvdnVrLWhlYWRpbmctbSI+QWJvdXQgRGlnaXRhbCBNYXJrZXRwbGFjZTwvaDI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDx1bCBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0ICI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvaGVscCI+CiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3QKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLWJ1eWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZpY2VzIHlvdSBjYW4gYnV5CiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1tYXJrZXRwbGFjZS1zdXBwbGllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBTZXJ2aWNlcyB5b3UgY2FuIHNlbGwKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9nb3Zlcm5tZW50L29yZ2FuaXNhdGlvbnMvY3Jvd24tY29tbWVyY2lhbC1zZXJ2aWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQWJvdXQgQ3Jvd24gQ29tbWVyY2lhbCBTZXJ2aWNlcwogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFib3V0IEdvdmVybm1lbnQgRGlnaXRhbCBTZXJ2aWNlcwogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iL2ctY2xvdWQvc3VwcGxpZXJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgRy1DbG91ZCBzdXBwbGllciBBIHRvIFoKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIAogICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX3NlY3Rpb24iPgogICAgICAgICAgICA8aDIgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faGVhZGluZyBnb3Z1ay1oZWFkaW5nLW0iPkd1aWRhbmNlIGZvciB1c2luZyBEaWdpdGFsIE1hcmtldHBsYWNlPC9oMj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QgIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9nLWNsb3VkLXN1cHBsaWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGx5aW5nIHRvIHNlbGwgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc3VwcGxpZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRE9TIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2hvdy10by1zZWxsLXlvdXItZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtc2VydmljZXMiPgogICAgICAgICAgICAgICAgICAgICAgICBSZXNwb25kaW5nIHRvIGJ1eWVyIHJlcXVpcmVtZW50cyBvbiB0aGUgRE9TIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtYnV5ZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQnV5aW5nIG9uIHRoZSBHLUNsb3VkIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtb3V0Y29tZXMtYW5kLXNwZWNpYWxpc3RzLWJ1eWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEJ1eWluZyBvbiB0aGUgRE9TIGZyYW1ld29yawogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL3RoZS1jcm93bi1ob3N0aW5nLWRhdGEtY2VudHJlcy1mcmFtZXdvcmstb24tdGhlLWRpZ2l0YWwtbWFya2V0cGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICBCdXlpbmcgb24gdGhlIENyb3duIEhvc3RpbmcgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAKICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICA8L2Rpdj4KICAgICAgPGhyIGNsYXNzPSJnb3Z1ay1mb290ZXJfX3NlY3Rpb24tYnJlYWsiPgogICAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX21ldGEiPgogICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX21ldGEtaXRlbSBnb3Z1ay1mb290ZXJfX21ldGEtaXRlbS0tZ3JvdyI+CiAgICAgICAgCiAgICAgICAgICA8aDIgY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+U3VwcG9ydCBsaW5rczwvaDI+CiAgICAgICAgICAKICAgICAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0Ij4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19pbmxpbmUtbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iL3Rlcm1zLWFuZC1jb25kaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICBUZXJtcyBhbmQgY29uZGl0aW9ucwogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvY29va2llcyI+CiAgICAgICAgICAgICAgICAgICAgQ29va2llcwogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvcHJpdmFjeS1ub3RpY2UiPgogICAgICAgICAgICAgICAgICAgIFByaXZhY3kgbm90aWNlCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX21ldGEtY3VzdG9tIj4KICAgICAgICAgICAgICBCdWlsdCBieSB0aGUgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9nb3Zlcm5tZW50LWRpZ2l0YWwtc2VydmljZSIgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayI+R292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2U8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgCiAgICAgICAgCiAgICAgICAgPHN2ZwogICAgICAgICAgcm9sZT0icHJlc2VudGF0aW9uIgogICAgICAgICAgZm9jdXNhYmxlPSJmYWxzZSIKICAgICAgICAgIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpY2VuY2UtbG9nbyIKICAgICAgICAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgICAgICAgIHZpZXdib3g9IjAgMCA0ODMuMiAxOTUuNyIKICAgICAgICAgIGhlaWdodD0iMTciCiAgICAgICAgICB3aWR0aD0iNDEiCiAgICAgICAgPgogICAgICAgICAgPHBhdGgKICAgICAgICAgICAgZmlsbD0iY3VycmVudENvbG9yIgogICAgICAgICAgICBkPSJNNDIxLjUgMTQyLjhWLjFsLTUwLjcgMzIuM3YxNjEuMWgxMTIuNHYtNTAuN3ptLTEyMi4zLTkuNkE0Ny4xMiA0Ny4xMiAwIDAgMSAyMjEgOTcuOGMwLTI2IDIxLjEtNDcuMSA0Ny4xLTQ3LjEgMTYuNyAwIDMxLjQgOC43IDM5LjcgMjEuOGw0Mi43LTI3LjJBOTcuNjMgOTcuNjMgMCAwIDAgMjY4LjEgMGMtMzYuNSAwLTY4LjMgMjAuMS04NS4xIDQ5LjdBOTggOTggMCAwIDAgOTcuOCAwQzQzLjkgMCAwIDQzLjkgMCA5Ny44czQzLjkgOTcuOCA5Ny44IDk3LjhjMzYuNSAwIDY4LjMtMjAuMSA4NS4xLTQ5LjdhOTcuNzYgOTcuNzYgMCAwIDAgMTQ5LjYgMjUuNGwxOS40IDIyLjJoM3YtODcuOGgtODBsMjQuMyAyNy41ek05Ny44IDE0NWMtMjYgMC00Ny4xLTIxLjEtNDcuMS00Ny4xczIxLjEtNDcuMSA0Ny4xLTQ3LjEgNDcuMiAyMSA0Ny4yIDQ3UzEyMy44IDE0NSA5Ny44IDE0NSIKICAgICAgICAgIC8+CiAgICAgICAgPC9zdmc+CiAgICAgICAgPHNwYW4gY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGljZW5jZS1kZXNjcmlwdGlvbiI+CiAgICAgICAgICBBbGwgY29udGVudCBpcyBhdmFpbGFibGUgdW5kZXIgdGhlCiAgICAgICAgICA8YQogICAgICAgICAgICBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIgogICAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9kb2Mvb3Blbi1nb3Zlcm5tZW50LWxpY2VuY2UvdmVyc2lvbi8zLyIKICAgICAgICAgICAgcmVsPSJsaWNlbnNlIgogICAgICAgICAgPk9wZW4gR292ZXJubWVudCBMaWNlbmNlIHYzLjA8L2E+LCBleGNlcHQgd2hlcmUgb3RoZXJ3aXNlIHN0YXRlZAogICAgICAgIDwvc3Bhbj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YS1pdGVtIj4KICAgICAgICA8YQogICAgICAgICAgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayBnb3Z1ay1mb290ZXJfX2NvcHlyaWdodC1sb2dvIgogICAgICAgICAgaHJlZj0iaHR0cHM6Ly93d3cubmF0aW9uYWxhcmNoaXZlcy5nb3YudWsvaW5mb3JtYXRpb24tbWFuYWdlbWVudC9yZS11c2luZy1wdWJsaWMtc2VjdG9yLWluZm9ybWF0aW9uL3VrLWdvdmVybm1lbnQtbGljZW5zaW5nLWZyYW1ld29yay9jcm93bi1jb3B5cmlnaHQvIgogICAgICAgID7CqSBDcm93biBjb3B5cmlnaHQ8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZm9vdGVyPgoKCiAgICAKICA8c2NyaXB0IHNyYz0iL3N0YXRpYy9qYXZhc2NyaXB0cy9hcHBsaWNhdGlvbi5qcz8wNjRjM2JmN2Q1OWVjOTcyMTU5MThlNTUzYjMwZTI0OSI+PC9zY3JpcHQ+CiAgCgogIDwvYm9keT4KPC9odG1sPg==
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:10 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12531
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tg.RfHbNdQkJy6JHmwWcmk9oqYe89g
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31691'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:11 GMT
      Dm-Request-Id:
      - af69e8088f4e14c3
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:11 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tw.eOJTGgInZZBpUlnqOlFJqaFPLjY;
        Expires=Wed, 17-Jun-2020 12:17:11 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - af69e8088f4e14c3
      X-B3-Traceid:
      - af69e8088f4e14c3
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 9b123d77-49d4-47a3-68a6-a0db0068991d
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 44a651f8e3a1f38a5a977c4f0c4d45a0.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - BDOrchAibSN3zbnSzFqMkyMkSU2LaLvXErkJ9fTq4gNJ2QDqxtxb9A==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:11 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12529
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tw.eOJTGgInZZBpUlnqOlFJqaFPLjY
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39823'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:11 GMT
      Dm-Request-Id:
      - 4185e0f3b2805338
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:11 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tw.eOJTGgInZZBpUlnqOlFJqaFPLjY;
        Expires=Wed, 17-Jun-2020 12:17:11 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 4185e0f3b2805338
      X-B3-Traceid:
      - 4185e0f3b2805338
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - cfa4fdd9-4e0e-4ce3-4190-256e4ec434dc
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 b3f54d3c6a628831461cdc9d5d466584.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - vgVE2MrrwWmiAdpMZHkfMuClgqdszTZ5jUmyWNMCmfPQuba8WEWlBg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:11 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12500
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7tw.eOJTGgInZZBpUlnqOlFJqaFPLjY
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34817'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:12 GMT
      Dm-Request-Id:
      - c381201bf004ea32
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:12 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uA.A9OIlkjJTz4fIkpvxNuW0i2m4Fo;
        Expires=Wed, 17-Jun-2020 12:17:12 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - c381201bf004ea32
      X-B3-Traceid:
      - c381201bf004ea32
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 6955c739-fa22-4735-48d5-ba35d129343a
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 4a0cc459ba06aacf2a1f9058da1dd0e6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - fb1ss-yOUoYzh49svvA4Rvp-bt25IZUhkMrkS8FH_2Q7aO8z4O8Oeg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:12 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12479
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uA.A9OIlkjJTz4fIkpvxNuW0i2m4Fo
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '35678'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:12 GMT
      Dm-Request-Id:
      - 62a768eca93a821d
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:12 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uA.A9OIlkjJTz4fIkpvxNuW0i2m4Fo;
        Expires=Wed, 17-Jun-2020 12:17:12 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 62a768eca93a821d
      X-B3-Traceid:
      - 62a768eca93a821d
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 194cfc72-7b46-47d7-7e94-bb1cc2d0f936
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 137830cc36c3678f4f33e4b28fff771a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - PL-xYA4v1QVhK_LWIVdEERK4p34PzfToSNYbC2c0dLPEOlOdLQ9wYw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:12 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12525
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uA.A9OIlkjJTz4fIkpvxNuW0i2m4Fo
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '32956'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:13 GMT
      Dm-Request-Id:
      - 7b2afa59e8eb15d3
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:13 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uQ.W3YIQj0dlL6gDngEfxJdmlsfUF0;
        Expires=Wed, 17-Jun-2020 12:17:13 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7b2afa59e8eb15d3
      X-B3-Traceid:
      - 7b2afa59e8eb15d3
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 73588caa-c556-4b99-589a-4a61638078a5
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 bbd81ac50c4c19202fae4e2a92912971.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - ZWmO0ZsQYLLGAJ7CVUznrM3g_22XtB5VjHBfLkOwYiiAltprvIfCwg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:13 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12355
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uQ.W3YIQj0dlL6gDngEfxJdmlsfUF0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36480'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:13 GMT
      Dm-Request-Id:
      - 0baab20788878d29
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:13 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uQ.W3YIQj0dlL6gDngEfxJdmlsfUF0;
        Expires=Wed, 17-Jun-2020 12:17:13 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 0baab20788878d29
      X-B3-Traceid:
      - 0baab20788878d29
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - e48b99b1-a19f-4a5d-7e1b-945799289a83
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 bbd81ac50c4c19202fae4e2a92912971.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - MmmJdptL6o5v7IwjrnpMg7TbednsvK_UTvZ_N_17pqpVp_MOKMnvTw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:13 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12520
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uQ.W3YIQj0dlL6gDngEfxJdmlsfUF0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '32285'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:13 GMT
      Dm-Request-Id:
      - 5fc999b23df56976
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:13 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uQ.W3YIQj0dlL6gDngEfxJdmlsfUF0;
        Expires=Wed, 17-Jun-2020 12:17:13 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 5fc999b23df56976
      X-B3-Traceid:
      - 5fc999b23df56976
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - cd6aeae7-c14e-4dec-6fa7-b7a00cc4c896
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 674e965f3d2af64c7723a159d4fcb6b5.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - NrFjExBUca7_SwVkS5WOrHdLMqAl1VhUO_fg0iebvhxSpqyCvycW5Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:13 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12501
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uQ.W3YIQj0dlL6gDngEfxJdmlsfUF0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '41178'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:14 GMT
      Dm-Request-Id:
      - 4b7280820ff97f33
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:14 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7ug.x6tCOl61FFAgk2CK76FnNHDQ_6M;
        Expires=Wed, 17-Jun-2020 12:17:14 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 4b7280820ff97f33
      X-B3-Traceid:
      - 4b7280820ff97f33
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 7c9f35a4-2f3a-4cea-4aed-ad0571e19a4d
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 0fbcb069bd4e72d46684a2e5202ac82d.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - UjkJ844fMvhYhRV_yt5ipTtg2DzjXv6W0DM-tGGd_HKpzig_C1ESDw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:14 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12519
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7ug.x6tCOl61FFAgk2CK76FnNHDQ_6M
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '31500'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:14 GMT
      Dm-Request-Id:
      - bbb3afdfc3ad0737
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:14 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7ug.x6tCOl61FFAgk2CK76FnNHDQ_6M;
        Expires=Wed, 17-Jun-2020 12:17:14 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - bbb3afdfc3ad0737
      X-B3-Traceid:
      - bbb3afdfc3ad0737
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 86404336-1397-460a-4178-f06f5d1f13e7
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 a4ba6141247f3b441c87ee1a49ec2851.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - cO2vbIcWbm5kwzUQLyW22Jv9RFY4lg-8GslQcTxb2A9Amp1FGbMQ5g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:14 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12434
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7ug.x6tCOl61FFAgk2CK76FnNHDQ_6M
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '30934'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:15 GMT
      Dm-Request-Id:
      - 685c480d0e07d81d
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:15 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uw.IgaFFiCGde9FG7bjKuooR0zs4GY;
        Expires=Wed, 17-Jun-2020 12:17:15 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 685c480d0e07d81d
      X-B3-Traceid:
      - 685c480d0e07d81d
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - c5136a1a-bd63-443d-7c9d-578bfe33931e
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 36ca971f60479f380bc64504d2bb0680.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - ZRpb_hV1G02ihCV7AJ1B3FX8HrJG3xzWB89BoEF0PvZzkGTfYkJdcA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:15 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12499
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uw.IgaFFiCGde9FG7bjKuooR0zs4GY
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '37763'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:15 GMT
      Dm-Request-Id:
      - 86de8d8c6adb6dbb
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:15 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uw.IgaFFiCGde9FG7bjKuooR0zs4GY;
        Expires=Wed, 17-Jun-2020 12:17:15 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 86de8d8c6adb6dbb
      X-B3-Traceid:
      - 86de8d8c6adb6dbb
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - f6bd441b-413e-4943-7e27-a01682bf3f25
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 106f0cae03bb6a218d16ab28ba07c665.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - YD5d4wU3bgYg1S0h3geuQm223sH_TPkjiGWM_s-VBB6UjxzStjK3mQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:15 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12513
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uw.IgaFFiCGde9FG7bjKuooR0zs4GY
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '37537'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:15 GMT
      Dm-Request-Id:
      - 21befbfdfdb06227
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:15 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uw.IgaFFiCGde9FG7bjKuooR0zs4GY;
        Expires=Wed, 17-Jun-2020 12:17:15 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 21befbfdfdb06227
      X-B3-Traceid:
      - 21befbfdfdb06227
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 12f88504-cfcc-4a7d-7381-d4e540c3fa45
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 b168ace465ff12c259c3868216506598.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - FKYpQiEyakBX_2238UalhSZ7y5UL4mmsh6XgmD0lVeYpgXGcagI-Hg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:15 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12512
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7uw.IgaFFiCGde9FG7bjKuooR0zs4GY
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '34286'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:16 GMT
      Dm-Request-Id:
      - 1228f13f6c754318
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:16 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vA.qIq1c6ABpoetgwDmSOTBdapcFTs;
        Expires=Wed, 17-Jun-2020 12:17:16 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 1228f13f6c754318
      X-B3-Traceid:
      - 1228f13f6c754318
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 572c47e1-932b-4f95-7b02-c125e88400d4
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 3e37a185adf0633e53d97f7c71ebc945.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - M0TX5ln4g4h_DB2RB_az-fhVc170wS4Ais6jh5M6EmUDQZwR7cZgyg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:16 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12492
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vA.qIq1c6ABpoetgwDmSOTBdapcFTs
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '36880'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:16 GMT
      Dm-Request-Id:
      - 15d2286115ecd1f7
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:16 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vA.qIq1c6ABpoetgwDmSOTBdapcFTs;
        Expires=Wed, 17-Jun-2020 12:17:16 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 15d2286115ecd1f7
      X-B3-Traceid:
      - 15d2286115ecd1f7
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - c3f5f864-b50a-469a-627a-2c9ce8176b68
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 2ef58ed55caca3380e66558d27160ee9.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - rcva4hcZ0EhZbEQsmerNbYckYigyEk0-b1o2blX9c9c3rj3SdGqdXg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:16 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12487
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vA.qIq1c6ABpoetgwDmSOTBdapcFTs
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '37633'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:17 GMT
      Dm-Request-Id:
      - 1296e84468df6599
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:17 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vQ.WnHzbFenu4JM9kbIBAIkq84O4J0;
        Expires=Wed, 17-Jun-2020 12:17:17 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 1296e84468df6599
      X-B3-Traceid:
      - 1296e84468df6599
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - ac414581-ea93-41a2-65c9-68bc37cd1e8f
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 4a0cc459ba06aacf2a1f9058da1dd0e6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - N-Y6YgBQMYQUM3qgPdkAFpNnTZLFLJ9-al3T1mbgYAYt3pZmheCnLg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:17 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12475
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vQ.WnHzbFenu4JM9kbIBAIkq84O4J0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '33012'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:17 GMT
      Dm-Request-Id:
      - d145a9200e0b4104
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:17 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vQ.WnHzbFenu4JM9kbIBAIkq84O4J0;
        Expires=Wed, 17-Jun-2020 12:17:17 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - d145a9200e0b4104
      X-B3-Traceid:
      - d145a9200e0b4104
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 42f9f249-9120-4c99-40f6-0349b49e39f5
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 1e14debf40c7c0d32192ed8ad517da21.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - v5n5FfDjVzeLB0G9SOfnaBjY-CucSEg8Few4ZRqaYV3Tqb8vtRzEPA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:17 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12467
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vQ.WnHzbFenu4JM9kbIBAIkq84O4J0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '53439'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:18 GMT
      Dm-Request-Id:
      - '0934d40b73705077'
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:18 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vg.pDWIOLwOecCgNEen_VIUwVoFRFs;
        Expires=Wed, 17-Jun-2020 12:17:18 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - '0934d40b73705077'
      X-B3-Traceid:
      - '0934d40b73705077'
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - c7dd2cf5-6988-48bf-5b65-77b099eace07
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 b0f20dc7ed973df2db1883bc7d5fcb24.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - OqRioHRjM-k1TpODWNhosjLgoYthSkZA4f2EZBgyp_y6TAxz1nDbDA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:18 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12450
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vg.pDWIOLwOecCgNEen_VIUwVoFRFs
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '40879'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:18 GMT
      Dm-Request-Id:
      - c896d6d80d9953e6
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:18 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vg.pDWIOLwOecCgNEen_VIUwVoFRFs;
        Expires=Wed, 17-Jun-2020 12:17:18 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - c896d6d80d9953e6
      X-B3-Traceid:
      - c896d6d80d9953e6
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b9ca8e4d-f7f9-46be-6214-2366d5ae787e
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 38625201ad7f896d72a7ab055328881f.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - l5FZBDhXRSqcY_epO43CV1v1TPF1qJjy1FI5D76FyKVEuNbduc5LrA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:18 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12470
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vg.pDWIOLwOecCgNEen_VIUwVoFRFs
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '44270'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:18 GMT
      Dm-Request-Id:
      - fad1d615a3a3cc81
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:18 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vg.pDWIOLwOecCgNEen_VIUwVoFRFs;
        Expires=Wed, 17-Jun-2020 12:17:18 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - fad1d615a3a3cc81
      X-B3-Traceid:
      - fad1d615a3a3cc81
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - bfce46f6-3556-4077-7cc2-755e6838ffc9
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 928c0faaba62379cf695423a4a47c02e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - Poekw84sFzK7uc3lwaSsRdXIQLj015Wy2ed877xfiWGu7GZ6gpIFaw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:18 GMT
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/12436
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vg.pDWIOLwOecCgNEen_VIUwVoFRFs
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '38082'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:17:19 GMT
      Dm-Request-Id:
      - f21c8533ba5ae317
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:17:19 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun7vw.fTyDOYTNfD02IoMSxIEQRUcyiCI;
        Expires=Wed, 17-Jun-2020 12:17:19 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - f21c8533ba5ae317
      X-B3-Traceid:
      - f21c8533ba5ae317
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - b860118f-8e31-444e-6c60-c90bc7da771e
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 36ca971f60479f380bc64504d2bb0680.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - eb2JeRojLkRZ0Yta3gRlLe_Im0xI4HknPHpjHTY9pYg012tDor7CZQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiIgY2xhc3M9ImdvdnVrLXRlbXBsYXRlICI+CiAgPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4KICAgIDx0aXRsZT4KICBCaS1ib3JvdWdoIFRlY2ggU3RyYXRlZ3kgQ29uc3VsdGFuY3kgLSBEaWdpdGFsIE1hcmtldHBsYWNlCjwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIHZpZXdwb3J0LWZpdD1jb3ZlciI+CiAgICA8bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0iIzBiMGMwYyIgLz4gCiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIgLz4KCiAgICAKICAgICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBzaXplcz0iMTZ4MTYgMzJ4MzIgNDh4NDgiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2Zhdmljb24uaWNvIiB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICAgIDxsaW5rIHJlbD0ibWFzay1pY29uIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1tYXNrLWljb24uc3ZnIiBjb2xvcj0iIzBiMGMwYyI+IAogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxODB4MTgwIiBocmVmPSIvc3RhdGljL2ltYWdlcy9nb3Z1ay1hcHBsZS10b3VjaC1pY29uLTE4MHgxODAucG5nIj4KICAgICAgPGxpbmsgcmVsPSJhcHBsZS10b3VjaC1pY29uIiBzaXplcz0iMTY3eDE2NyIgaHJlZj0iL3N0YXRpYy9pbWFnZXMvZ292dWstYXBwbGUtdG91Y2gtaWNvbi0xNjd4MTY3LnBuZyI+CiAgICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgc2l6ZXM9IjE1MngxNTIiIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24tMTUyeDE1Mi5wbmciPgogICAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii9zdGF0aWMvaW1hZ2VzL2dvdnVrLWFwcGxlLXRvdWNoLWljb24ucG5nIj4KICAgIAoKICAgIAogIAoKCgoKCgoKCiAgCiAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSJUS0dTR1puZkhweDEtbEtPdGhJMTdBTnR3azdmejNGNFNicjc3STBwcE8wIj4KCiAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL3N0YXRpYy9zdHlsZXNoZWV0cy9hcHBsaWNhdGlvbi5jc3M/NmY5NzFiNGQ3ZjUzYTJlODE2NmIzZTZhNDk3ZjhmMGMiIC8+CiAgCgogICAgCiAgICAKICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iL3N0YXRpYy9pbWFnZXMvZ292dWstb3BlbmdyYXBoLWltYWdlLnBuZyI+CiAgPC9oZWFkPgogIDxib2R5IGNsYXNzPSJnb3Z1ay10ZW1wbGF0ZV9fYm9keSAiPgogICAgPHNjcmlwdD5kb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9ICgoZG9jdW1lbnQuYm9keS5jbGFzc05hbWUpID8gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgKyAnIGpzLWVuYWJsZWQnIDogJ2pzLWVuYWJsZWQnKTs8L3NjcmlwdD4KICAgIAoKICAgIAogICAgICA8YSBocmVmPSIjbWFpbi1jb250ZW50IiBjbGFzcz0iZ292dWstc2tpcC1saW5rIj5Ta2lwIHRvIG1haW4gY29udGVudDwvYT4KICAgIAoKICAgIAogIAogIAoKCgoKPGRpdiBpZD0iZG0tY29va2llLWJhbm5lciIgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXIgZ292dWstd2lkdGgtY29udGFpbmVyIiBkYXRhLW1vZHVsZT0iZG0tY29va2llLWJhbm5lciIgcm9sZT0icmVnaW9uIiBhcmlhLWRlc2NyaWJlZGJ5PSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICA8ZGl2IGNsYXNzPSJkbS1jb29raWUtYmFubmVyX193cmFwcGVyIj4KICAgIDxoMiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyBnb3Z1ay1oZWFkaW5nLW0iIGlkPSJkbS1jb29raWUtYmFubmVyX19oZWFkaW5nIj4KICAgICAgQ2FuIHdlIHN0b3JlIGFuYWx5dGljcyBjb29raWVzIG9uIHlvdXIgZGV2aWNlPwogICAgPC9oMj4KICAgIDxwIGNsYXNzPSJnb3Z1ay1ib2R5Ij4KICAgICAgQW5hbHl0aWNzIGNvb2tpZXMgaGVscCB1cyB1bmRlcnN0YW5kIGhvdyBvdXIgd2Vic2l0ZSBpcyBiZWluZyB1c2VkLgogICAgPC9wPgogICAgPGRpdiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fYnV0dG9ucyI+CiAgICAgIDxidXR0b24gY2xhc3M9ImdvdnVrLWJ1dHRvbiBkbS1jb29raWUtYmFubmVyX19idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uLS1hY2NlcHQiIHR5cGU9InN1Ym1pdCIgZGF0YS1hY2NlcHQtY29va2llcz0idHJ1ZSIgYXJpYS1kZXNjcmliZWRieT0iZG0tY29va2llLWJhbm5lcl9faGVhZGluZyI+CiAgICAgICAgWWVzPHNwYW4gY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+LCBEaWdpdGFsIE1hcmtldHBsYWNlIGNhbiBzdG9yZSBhbmFseXRpY3MgY29va2llcyBvbiB5b3VyIGRldmljZTwvc3Bhbj4KICAgICAgPC9idXR0b24+CiAgICAgIDxidXR0b24gY2xhc3M9ImdvdnVrLWJ1dHRvbiBkbS1jb29raWUtYmFubmVyX19idXR0b24gZG0tY29va2llLWJhbm5lcl9fYnV0dG9uLS1yZWplY3QiIHR5cGU9InN1Ym1pdCIgZGF0YS1hY2NlcHQtY29va2llcz0iZmFsc2UiIGFyaWEtZGVzY3JpYmVkYnk9ImRtLWNvb2tpZS1iYW5uZXJfX2hlYWRpbmciPgogICAgICAgIE5vPHNwYW4gY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+LCBEaWdpdGFsIE1hcmtldHBsYWNlIGNhbm5vdCBzdG9yZSBhbmFseXRpY3MgY29va2llcyBvbiB5b3VyIGRldmljZTwvc3Bhbj4KICAgICAgPC9idXR0b24+CiAgICAgIDxhIGNsYXNzPSJnb3Z1ay1saW5rIGRtLWNvb2tpZS1iYW5uZXJfX2xpbmsiIGhyZWY9Ii9jb29raWVzIj5Ib3cgRGlnaXRhbCBNYXJrZXRwbGFjZSB1c2VzIGNvb2tpZXM8L2E+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPGRpdiBjbGFzcz0iZG0tY29va2llLWJhbm5lcl9fY29uZmlybWF0aW9uIiB0YWJpbmRleD0iLTEiPgogICAgPHAgY2xhc3M9ImRtLWNvb2tpZS1iYW5uZXJfX2NvbmZpcm1hdGlvbi1tZXNzYWdlIGdvdnVrLWJvZHkiPgogICAgICBZb3UgY2FuIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvdXNlci9jb29raWUtc2V0dGluZ3MiPmNoYW5nZSB5b3VyIGNvb2tpZSBzZXR0aW5nczwvYT4gYXQgYW55IHRpbWUuCiAgICA8L3A+CiAgICA8YnV0dG9uIGNsYXNzPSJkbS1jb29raWUtYmFubmVyX19oaWRlLWJ1dHRvbiBnb3Z1ay1saW5rIiBkYXRhLWhpZGUtY29va2llLWJhbm5lcj0idHJ1ZSIgcm9sZT0ibGluayI+SGlkZTwvYnV0dG9uPgogIDwvZGl2Pgo8L2Rpdj4KCiAgCgoKCgoKICAKICAKCgoKICAKCjxoZWFkZXIgY2xhc3M9ImdvdnVrLWhlYWRlciAiIHJvbGU9ImJhbm5lciIgZGF0YS1tb2R1bGU9ImhlYWRlciI+CiAgPGRpdiBjbGFzcz0iZ292dWstaGVhZGVyX19jb250YWluZXIgZ292dWstd2lkdGgtY29udGFpbmVyIj4KCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ28iPgogICAgICA8YSBocmVmPSIvIiBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIGdvdnVrLWhlYWRlcl9fbGluay0taG9tZXBhZ2UiPgogICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlIj4KICAgICAgICAgIAogICAgICAgICAgPHN2ZwogICAgICAgICAgICByb2xlPSJwcmVzZW50YXRpb24iCiAgICAgICAgICAgIGZvY3VzYWJsZT0iZmFsc2UiCiAgICAgICAgICAgIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLWNyb3duIgogICAgICAgICAgICB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgICAgICAgICAgIHZpZXdib3g9IjAgMCAxMzIgOTciCiAgICAgICAgICAgIGhlaWdodD0iMzIiCiAgICAgICAgICAgIHdpZHRoPSIzNiIKICAgICAgICAgID4KICAgICAgICAgICAgPHBhdGgKICAgICAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiIGZpbGwtcnVsZT0iZXZlbm9kZCIKICAgICAgICAgICAgICBkPSJNMjUgMzAuMmMzLjUgMS41IDcuNy0uMiA5LjEtMy43IDEuNS0zLjYtLjItNy44LTMuOS05LjItMy42LTEuNC03LjYuMy05LjEgMy45LTEuNCAzLjUuMyA3LjUgMy45IDl6TTkgMzkuNWMzLjYgMS41IDcuOC0uMiA5LjItMy43IDEuNS0zLjYtLjItNy44LTMuOS05LjEtMy42LTEuNS03LjYuMi05LjEgMy44LTEuNCAzLjUuMyA3LjUgMy44IDl6TTQuNCA1Ny4yYzMuNSAxLjUgNy43LS4yIDkuMS0zLjggMS41LTMuNi0uMi03LjctMy45LTkuMS0zLjUtMS41LTcuNi4zLTkuMSAzLjgtMS40IDMuNS4zIDcuNiAzLjkgOS4xem0zOC4zLTIxLjRjMy41IDEuNSA3LjctLjIgOS4xLTMuOCAxLjUtMy42LS4yLTcuNy0zLjktOS4xLTMuNi0xLjUtNy42LjMtOS4xIDMuOC0xLjMgMy42LjQgNy43IDMuOSA5LjF6bTY0LjQtNS42Yy0zLjYgMS41LTcuOC0uMi05LjEtMy43LTEuNS0zLjYuMi03LjggMy44LTkuMiAzLjYtMS40IDcuNy4zIDkuMiAzLjkgMS4zIDMuNS0uNCA3LjUtMy45IDl6bTE1LjkgOS4zYy0zLjYgMS41LTcuNy0uMi05LjEtMy43LTEuNS0zLjYuMi03LjggMy43LTkuMSAzLjYtMS41IDcuNy4yIDkuMiAzLjggMS41IDMuNS0uMyA3LjUtMy44IDl6bTQuNyAxNy43Yy0zLjYgMS41LTcuOC0uMi05LjItMy44LTEuNS0zLjYuMi03LjcgMy45LTkuMSAzLjYtMS41IDcuNy4zIDkuMiAzLjggMS4zIDMuNS0uNCA3LjYtMy45IDkuMXpNODkuMyAzNS44Yy0zLjYgMS41LTcuOC0uMi05LjItMy44LTEuNC0zLjYuMi03LjcgMy45LTkuMSAzLjYtMS41IDcuNy4zIDkuMiAzLjggMS40IDMuNi0uMyA3LjctMy45IDkuMXpNNjkuNyAxNy43bDguOSA0LjdWOS4zbC04LjkgMi44Yy0uMi0uMy0uNS0uNi0uOS0uOUw3Mi40IDBINTkuNmwzLjUgMTEuMmMtLjMuMy0uNi41LS45LjlsLTguOC0yLjh2MTMuMWw4LjgtNC43Yy4zLjMuNi43LjkuOWwtNSAxNS40di4xYy0uMi44LS40IDEuNi0uNCAyLjQgMCA0LjEgMy4xIDcuNSA3IDguMWguMmMuMyAwIC43LjEgMSAuMS40IDAgLjcgMCAxLS4xaC4yYzQtLjYgNy4xLTQuMSA3LjEtOC4xIDAtLjgtLjEtMS43LS40LTIuNFYzNGwtNS4xLTE1LjRjLjQtLjIuNy0uNiAxLS45ek02NiA5Mi44YzE2LjkgMCAzMi44IDEuMSA0Ny4xIDMuMiA0LTE2LjkgOC45LTI2LjcgMTQtMzMuNWwtOS42LTMuNGMxIDQuOSAxLjEgNy4yIDAgMTAuMi0xLjUtMS40LTMtNC4zLTQuMi04LjdMMTA4LjYgNzZjMi44LTIgNS0zLjIgNy41LTMuMy00LjQgOS40LTEwIDExLjktMTMuNiAxMS4yLTQuMy0uOC02LjMtNC42LTUuNi03LjkgMS00LjcgNS43LTUuOSA4LS41IDQuMy04LjctMy0xMS40LTcuNi04LjggNy4xLTcuMiA3LjktMTMuNSAyLjEtMjEuMS04IDYuMS04LjEgMTIuMy00LjUgMjAuOC00LjctNS40LTEyLjEtMi41LTkuNSA2LjIgMy40LTUuMiA3LjktMiA3LjIgMy4xLS42IDQuMy02LjQgNy44LTEzLjUgNy4yLTEwLjMtLjktMTAuOS04LTExLjItMTMuOCAyLjUtLjUgNy4xIDEuOCAxMSA3LjNMODAuMiA2MGMtNC4xIDQuNC04IDUuMy0xMi4zIDUuNCAxLjQtNC40IDgtMTEuNiA4LTExLjZINTUuNXM2LjQgNy4yIDcuOSAxMS42Yy00LjItLjEtOC0xLTEyLjMtNS40bDEuNCAxNi40YzMuOS01LjUgOC41LTcuNyAxMC45LTcuMy0uMyA1LjgtLjkgMTIuOC0xMS4xIDEzLjgtNy4yLjYtMTIuOS0yLjktMTMuNS03LjItLjctNSAzLjgtOC4zIDcuMS0zLjEgMi43LTguNy00LjYtMTEuNi05LjQtNi4yIDMuNy04LjUgMy42LTE0LjctNC42LTIwLjgtNS44IDcuNi01IDEzLjkgMi4yIDIxLjEtNC43LTIuNi0xMS45LjEtNy43IDguOCAyLjMtNS41IDcuMS00LjIgOC4xLjUuNyAzLjMtMS4zIDcuMS01LjcgNy45LTMuNS43LTktMS44LTEzLjUtMTEuMiAyLjUuMSA0LjcgMS4zIDcuNSAzLjNsLTQuNy0xNS40Yy0xLjIgNC40LTIuNyA3LjItNC4zIDguNy0xLjEtMy0uOS01LjMgMC0xMC4ybC05LjUgMy40YzUgNi45IDkuOSAxNi43IDE0IDMzLjUgMTQuOC0yLjEgMzAuOC0zLjIgNDcuNy0zLjJ6IgogICAgICAgICAgICA+PC9wYXRoPgogICAgICAgICAgICAKICAgICAgICAgICAgPGltYWdlIHNyYz0iL2Fzc2V0cy9pbWFnZXMvZ292dWstbG9nb3R5cGUtY3Jvd24ucG5nIiB4bGluazpocmVmPSIiIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLWNyb3duLWZhbGxiYWNrLWltYWdlIiB3aWR0aD0iMzYiIGhlaWdodD0iMzIiPjwvaW1hZ2U+CiAgICAgICAgICA8L3N2Zz4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xvZ290eXBlLXRleHQiPgogICAgICAgICAgICBHT1YuVUsKICAgICAgICAgIDwvc3Bhbj4KICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgICAgPHNwYW4gY2xhc3M9ImdvdnVrLWhlYWRlcl9fcHJvZHVjdC1uYW1lIj4KICAgICAgICAgIERpZ2l0YWwgTWFya2V0cGxhY2UKICAgICAgICA8L3NwYW4+CiAgICAgICAgCiAgICAgIDwvYT4KICAgIDwvZGl2PgogICAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2NvbnRlbnQiPgoKICAgIAoKICAgIAogICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIHJvbGU9ImJ1dHRvbiIgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbWVudS1idXR0b24ganMtaGVhZGVyLXRvZ2dsZSIgYXJpYS1jb250cm9scz0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0iU2hvdyBvciBoaWRlIFRvcCBMZXZlbCBOYXZpZ2F0aW9uIj5NZW51PC9idXR0b24+CiAgICA8bmF2PgogICAgICA8dWwgaWQ9Im5hdmlnYXRpb24iIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24gIiBhcmlhLWxhYmVsPSJUb3AgTGV2ZWwgTmF2aWdhdGlvbiI+CiAgICAgICAgCiAgICAgICAgICAKICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX25hdmlnYXRpb24taXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2J1eWluZy1hbmQtc2VsbGluZy1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+CiAgICAgICAgICAgICAgICBHdWlkYW5jZQogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstaGVhZGVyX19uYXZpZ2F0aW9uLWl0ZW0iPgogICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1oZWFkZXJfX2xpbmsiIGhyZWY9Ii9oZWxwIj4KICAgICAgICAgICAgICAgIEhlbHAKICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWhlYWRlcl9fbmF2aWdhdGlvbi1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstaGVhZGVyX19saW5rIiBocmVmPSIvdXNlci9sb2dpbiI+CiAgICAgICAgICAgICAgICBMb2cgaW4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAKICAgICAgPC91bD4KICAgIDwvbmF2PgogICAgCiAgICA8L2Rpdj4KICAgIAogIDwvZGl2Pgo8L2hlYWRlcj4KCgogICAgCiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLXdpZHRoLWNvbnRhaW5lciI+CiAgICAgICAgCiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1waGFzZS1iYW5uZXIiPgogIDxwIGNsYXNzPSJnb3Z1ay1waGFzZS1iYW5uZXJfX2NvbnRlbnQiPjxzdHJvbmcgY2xhc3M9ImdvdnVrLXRhZyBnb3Z1ay1waGFzZS1iYW5uZXJfX2NvbnRlbnRfX3RhZyAiPgogIGJldGEKPC9zdHJvbmc+PHNwYW4gY2xhc3M9ImdvdnVrLXBoYXNlLWJhbm5lcl9fdGV4dCI+CiAgICAgIEhlbHAgdXMgaW1wcm92ZSB0aGUgRGlnaXRhbCBNYXJrZXRwbGFjZSAtIDxhIGNsYXNzPSJnb3Z1ay1saW5rIiBocmVmPSIvaGVscCI+c2VuZCB5b3VyIGZlZWRiYWNrPC9hPgogICAgPC9zcGFuPgogIDwvcD4KPC9kaXY+CiAgCiAgCjxkaXYgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzIj4KICA8b2wgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0Ij4KICAKICAgIAogICAgPGxpIGNsYXNzPSJnb3Z1ay1icmVhZGNydW1ic19fbGlzdC1pdGVtIj4KICAgICAgPGEgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saW5rIiBocmVmPSIvIj5EaWdpdGFsIE1hcmtldHBsYWNlPC9hPgogICAgPC9saT4KICAgIAogIAogICAgCiAgICA8bGkgY2xhc3M9ImdvdnVrLWJyZWFkY3J1bWJzX19saXN0LWl0ZW0iPgogICAgICA8YSBjbGFzcz0iZ292dWstYnJlYWRjcnVtYnNfX2xpbmsiIGhyZWY9Ii9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy9vcHBvcnR1bml0aWVzIj5TdXBwbGllciBvcHBvcnR1bml0aWVzPC9hPgogICAgPC9saT4KICAgIAogIAogIDwvb2w+CjwvZGl2PgoKCiAgICAgICAgPG1haW4gY2xhc3M9ImdvdnVrLW1haW4td3JhcHBlciAiIGlkPSJtYWluLWNvbnRlbnQiIHJvbGU9Im1haW4iPgogICAgICAgICAgCiAgCiAgCgogIAogICAgCiAgCiAgCgoKCjxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtcm93Ij4KICA8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLWNvbHVtbi10d28tdGhpcmRzIj4KICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay1jYXB0aW9uLWwiPldlc3RtaW5zdGVyIENpdHkgQ291bmNpbDwvc3Bhbj4KICAgIDxoMSBjbGFzcz0iZ292dWstaGVhZGluZy1sIj5CaS1ib3JvdWdoIFRlY2ggU3RyYXRlZ3kgQ29uc3VsdGFuY3k8L2gxPgogICAgPHNwYW4gZGF0YS1sb3Q9ImRpZ2l0YWwtb3V0Y29tZXMiPjwvc3Bhbj4KICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJnb3Z1ay1ncmlkLXJvdyBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOSI+CiAgPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1jb2x1bW4tb25lLXRoaXJkIGFwcC1zdGF0LWJsb2NrIiBpZD0iaW5jb21wbGV0ZS1hcHBsaWNhdGlvbnMiPgogICA8aDI+CiAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay0hLWZvbnQtc2l6ZS0zNiBnb3Z1ay0hLWRpc3BsYXktYmxvY2siPjQ1PC9zcGFuPgogICAgICA8c3Bhbj5JbmNvbXBsZXRlIGFwcGxpY2F0aW9uczwvc3Bhbj4KICAgPC9oMj4KICAgPHAgY2xhc3M9ImdvdnVrLWJvZHkgZ292dWstIS1mb250LXNpemUtMTYiPjM4IFNNRSwgNyBsYXJnZTwvcD4KPC9kaXY+CjxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLW9uZS10aGlyZCBhcHAtc3RhdC1ibG9jayIgaWQ9ImNvbXBsZXRlZC1hcHBsaWNhdGlvbnMiPgogICA8aDI+CiAgICAgIDxzcGFuIGNsYXNzPSJnb3Z1ay0hLWZvbnQtc2l6ZS0zNiBnb3Z1ay0hLWRpc3BsYXktYmxvY2siPjI1PC9zcGFuPgogICAgICA8c3Bhbj5Db21wbGV0ZWQgYXBwbGljYXRpb25zPC9zcGFuPgogICA8L2gyPgogICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLWZvbnQtc2l6ZS0xNiI+MjEgU01FLCA0IGxhcmdlPC9wPgo8L2Rpdj4KCjwvZGl2PgoKPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLWZ1bGwiPgogICAgCgo8aDIgY2xhc3M9ImdvdnVrLXZpc3VhbGx5LWhpZGRlbiI+SW1wb3J0YW50IGRhdGVzPC9oMj4KCgoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiIGlkPSJvcHBvcnR1bml0eS1pbXBvcnRhbnQtZGF0ZXMiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBQdWJsaXNoZWQKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBXZWRuZXNkYXkgMyBKdW5lIDIwMjAKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgRGVhZGxpbmUgZm9yIGFza2luZyBxdWVzdGlvbnMKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBXZWRuZXNkYXkgMTAgSnVuZSAyMDIwIGF0IDExOjU5cG0gR01UCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIENsb3NpbmcgZGF0ZSBmb3IgYXBwbGljYXRpb25zCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgV2VkbmVzZGF5IDE3IEp1bmUgMjAyMCBhdCAxMTo1OXBtIEdNVAogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTEiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5PdmVydmlldzwvaDI+CiAgCiAgCgoKICAKCiAgCgogIAoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBTdW1tYXJ5IG9mIHRoZSB3b3JrCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgQXMtSXMgcmV2aWV3IGFjcm9zcyB0aGUgYmktYm9yb3VnaCB0ZWNobmljYWwgaW5mcmFzdHJ1Y3R1cmUsIHRlY2huaWNhbCBkdWUtZGlsaWdlbmNlIG9uIGJhY2sgJmFtcDsgZnJvbnQgb2ZmaWNlIGludGVncmF0aW9uIGNhcGFiaWxpdGllcy48YnI+PGJyPldoZXJlIHRlY2huaWNhbCByZXF1aXJlbWVudHMgb3IgYnVzaW5lc3MgcHJvY2Vzc2VzIGFyZSB1bmtub3duLCAgaW52ZXN0aWdhdGlvbiBjYXJyaWVkIG91dCBpbiBjb25zdWx0YXRpb24gd2l0aCBJVCwgQ0VELCBhbmQgIG90aGVyICBzdGFrZWhvbGRlci48YnI+PGJyPuKAr091dHB1dCBzaG91bGQgaWRlbnRpZnkgbGltaXRhdGlvbnMsIG9wcG9ydHVuaXRpZXMgYW5kIGdlbmVyYWwgb2JzZXJ2YXRpb25zIHRoYXQgYXNzaXN0cyB3aXRoIGZ1dHVyZSBpbnZlc3RpZ2F0aW9ucyBhbmQgb3B0aW9ucy4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgTGF0ZXN0IHN0YXJ0IGRhdGUKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBGcmlkYXkgMTAgSnVseSAyMDIwCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEV4cGVjdGVkIGNvbnRyYWN0IGxlbmd0aAogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIHVwIHRvIDYgbW9udGhzCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIExvY2F0aW9uCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTG9uZG9uCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIE9yZ2FuaXNhdGlvbiB0aGUgd29yayBpcyBmb3IKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBXZXN0bWluc3RlciBDaXR5IENvdW5jaWwKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgQnVkZ2V0IHJhbmdlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgwqM4MDAwMCAtIMKjMTIwMDAwCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy0yIiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+QWJvdXQgdGhlIHdvcms8L2gyPgogIAogIAoKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFdoeSB0aGUgd29yayBpcyBiZWluZyBkb25lCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgV2VzdG1pbnN0ZXIgQ2l0eSBDb3VuY2lsIChXQ0MpIGFuZCBSb3lhbCBCb3JvdWdoIG9mIEtlbnNpbmd0b24gYW5kIENoZWxzZWEgKFJCS0MpIGFyZSBtb3ZpbmcgZm9yd2FyZCB3aXRoIGFtYml0aW91cyBwbGFucyB0byBpbXByb3ZlIHRoZSBvbmxpbmUgYW5kIG9mZmxpbmUgZXhwZXJpZW5jZSBmb3IgY3VzdG9tZXJzLjxicj48YnI+Qm90aCBib3JvdWdocyBoYXZlIGlkZW50aWZpZWQgYSBuZWVkIGZvciBhIHRlY2huaWNhbCByb2FkbWFwIHRvIHN1cHBvcnQgdGhlaXIgbmV3IGN1c3RvbWVyIG9wZXJhdGluZyBtb2RlbHMuPGJyPjxicj5UaGlzIHBpZWNlIG9mIHdvcmsgYWltcyB0byB1bmRlcnN0YW5kIHRoZSBleGlzdGluZyBDdXN0b21lciB0ZWNobm9sb2d5IGxhbmRzY2FwZSBpbiBkZXRhaWwsIGZyb20gdGhlIG1vbWVudCB0aGUgY3VzdG9tZXIgY29uc2lkZXJzIG1ha2luZyBjb250YWN0IHVudGlsIGFmdGVyIHRoZSBzZXJ2aWNlcyBoYXMgYmVlbiBwcm92aWRlZC4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgUHJvYmxlbSB0byBiZSBzb2x2ZWQKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBCb3RoIGNvdW5jaWxzIChXQ0MgYW5kIFJCS0MpIGhhdmUgY29tcGxpY2F0ZWQgbGVnYWN5IGFyY2hpdGVjdHVyZS4gSW4gb3JkZXIgdG8gYWNoaWV2ZSBvdXIgY3VzdG9tZXIgYW5kIHNlcnZpY2UgYW1iaXRpb25zIHdlIG5lZWQgdG8gdW5kZXJzdGFuZCB0aGlzIGxhbmRzY2FwZSBpbiBkZXRhaWwsIGFuZCBpZGVudGlmeSB3aGF0LCBhbmQgaW4gd2hhdCBvcmRlciwgY2hhbmdlcyBuZWVkIHRvIGJlIG1hZGUuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFdobyB0aGUgdXNlcnMgYXJlIGFuZCB3aGF0IHRoZXkgbmVlZCB0byBkbwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIMK3CUFzIGEgY3VzdG9tZXIsIEkgZXhwZXJpZW5jZSBkaWZmZXJlbnQgY3VzdG9tZXIgZXhwZXJpZW5jZXMgZGVwZW5kaW5nIG9uIGNoYW5uZWwsIHNlcnZpY2UgYW5kIGFwcGxpY2F0aW9uLjxicj7CtwlBcyBJVCwgd2UgaGF2ZSBhIGhpZ2gtbGV2ZWwgYXJjaGl0ZWN0dXJhbCBmcmFtZXdvcmssIGJ1dCB3ZSBuZWVkIGRldGFpbGVkIGJsdWVwcmludHMgZm9yIHNlcnZpY2VzIGFsaWduZWQgdG8gb3VyIGN1c3RvbWVyIGFuZCBidXNpbmVzcyBvYmplY3RpdmVzLiBXZSBuZWVkIHN1cHBvcnQgdG8gcHJpb3JpdGlzZSBvcHBvcnR1bml0aWVzIGFuZCBpc3N1ZXMgYW5kIGludmVzdGlnYXRlIHRoZSBBcy1JcyBhY3Jvc3MgdGhlIGFwcGxpY2F0aW9uIGxhbmRzY2FwZS48YnI+wrcJQXMgYSBtZW1iZXIgb2YgdGhlIGN1c3RvbWVyIHNlcnZpY2UgdGVhbSwgd2UgbmVlZCB0byBiZSBhYmxlIHRvIGxvb2sgYXQgdHJlbmRzLCBzdXBwb3J0IGN1c3RvbWVycyBhbmQgYXV0b21hdGUgc2VydmljZSBkZWxpdmVyeTsgcHVzaGluZyBhcyBtYW55IHRyYW5zYWN0aW9ucyBvbmxpbmUgYXMgcG9zc2libGUuIEluIG9yZGVyIHRvIGFjaGlldmUgdGhpcywgdGhlIElUIGluZnJhc3RydWN0dXJlIG5lZWRzIGludGVncmF0aW5nLCB1cGRhdGluZyBvciByZXBsYWNpbmcuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEVhcmx5IG1hcmtldCBlbmdhZ2VtZW50CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTm9uZQogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBBbnkgd29yayB0aGF04oCZcyBhbHJlYWR5IGJlZW4gZG9uZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoZSBDdXN0b21lciBFeHBlcmllbmNlIGFuZCBEaWdpdGFsIFN0cmF0ZWd5IGhhcyBiZWVuIGRldmVsb3BlZC4gQW4gSVQgU3RyYXRlZ3kgd2FzIGRldmVsb3BlZCBhIGNvdXBsZSBvZiB5ZWFycyBhZ28sIGFsb25nIHdpdGggYSBjb25jZXB0dWFsIGZ1dHVyZSBhcmNoaXRlY3R1cmUuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEV4aXN0aW5nIHRlYW0KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBJVCBBcmNoaXRlY3R1cmUgVGVhbSAoQmktQm9yb3VnaCkgPGJyPkN1c3RvbWVyIEV4cGVyaWVuY2UgUHJvZ3JhbW1lIFRlYW0gKFdlc3RtaW5zdGVyIENvdW5jaWwpPGJyPkRpZ2l0YWwgVGVhbSAoUkJLQykKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgQ3VycmVudCBwaGFzZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIERpc2NvdmVyeQogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKICA8aDIgaWQ9Im9wcG9ydHVuaXR5LWF0dHJpYnV0ZXMtMyIgY2xhc3M9ImdvdnVrLWhlYWRpbmctbSBhcHAtc3VtbWFyeS1saXN0LWhlYWRpbmciPldvcmsgc2V0dXA8L2gyPgogIAogIAoKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgQWRkcmVzcyB3aGVyZSB0aGUgd29yayB3aWxsIHRha2UgcGxhY2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBWaWN0b3JpYSBTdHJlZXQsIExvbmRvbiBhbmQgUkJLQywgd2l0aCBvY2Nhc2lvbmFsIG9mZi1zaXRlIHdvcmtpbmcuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFdvcmtpbmcgYXJyYW5nZW1lbnRzCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgVGhlIHdvcmsgd2lsbCBiZSBvZmYtc2l0ZSBvciBvbi1zaXRlIGJhc2VkIG9uIGJ1c2luZXNzIChWaWN0b3JpYSBTdHJlZXQsIExvbmRvbiksIHN1cHBsaWVycyB3aWxsIGhhdmUgdGhlIG9wdGlvbiBvZiB3b3JraW5nIGZyb20gaG9tZSBhcyB0aGUgYnVzaW5lc3MgZGljdGF0ZXMuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFNlY3VyaXR5IGNsZWFyYW5jZQogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIEJQU1MKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKPC9kbD4KCiAgPGgyIGlkPSJvcHBvcnR1bml0eS1hdHRyaWJ1dGVzLTQiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5BZGRpdGlvbmFsIGluZm9ybWF0aW9uPC9oMj4KICAKICAKCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBBZGRpdGlvbmFsIHRlcm1zIGFuZCBjb25kaXRpb25zCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy01IiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+U2tpbGxzIGFuZCBleHBlcmllbmNlPC9oMj4KICAKICA8cCBjbGFzcz0iZ292dWstYm9keSBnb3Z1ay0hLW1hcmdpbi10b3AtMyI+QnV5ZXJzIHdpbGwgdXNlIHRoZSBlc3NlbnRpYWwgYW5kIG5pY2UtdG8taGF2ZSBza2lsbHMgYW5kIGV4cGVyaWVuY2UgdG8gaGVscCB0aGVtIGV2YWx1YXRlIHN1cHBsaWVyc+KAmSB0ZWNobmljYWwgY29tcGV0ZW5jZS48L3A+CiAgCiAgCiAgCgoKICAKCiAgCjxkbCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdC0tdG9wLWJvcmRlciBnb3Z1ay0hLW1hcmdpbi1ib3R0b20tOCI+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEVzc2VudGlhbCBza2lsbHMgYW5kIGV4cGVyaWVuY2UKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWxpc3QgZ292dWstbGlzdC0tYnVsbGV0Ij4KICAgICAgICAgIDxsaT5UdXJuaW5nIGN1c3RvbWVyIGFuZCBidXNpbmVzcyBvdXRjb21lcyBpbnRvIHRlY2huaWNhbCBvdXRwdXRzPC9saT4KICAgICAgICAgIDxsaT5SZWNlbnQgZXhwZXJpZW5jZSBtYXBwaW5nIGFzLWlzIGVudGVycHJpc2UgYXBwbGljYXRpb24gbGFuZHNjYXBlIGluIGRldGFpbDwvbGk+CiAgICAgICAgICA8bGk+S25vd2xlZGdlIG9mIHRoZSBsb2NhbCBhdXRob3JpdHkgSVQgYW5kIGRpZ2l0YWwgbWFya2V0LCBpbmNsdWRpbmcgc3RhbmRhcmRzIGFuZCB2ZW5kb3JzLjwvbGk+CiAgICAgICAgICA8bGk+QWRvcHQgdXNlci1jZW50cmVkIGFuZCBhZ2lsZSBhcHByb2FjaGVzLCBjb25zaXN0ZW50IHdpdGggdGhlIEdvdmVybm1lbnQgRGlnaXRhbCBTZXJ2aWNlIFN0YW5kYXJkczwvbGk+CiAgICAgICAgICA8bGk+RXhwZXJpZW5jZSBvZiBkZWxpdmVyaW5nIHF1aWNrbHkgdG8gY2hhbGxlbmdpbmcgdGltZWxpbmVzPC9saT4KICAgICAgICAgIDxsaT5IYXZlIGV4cGVyaWVuY2UgY3JlYXRpbmcgb3ZlcmFsbCBkaWdpdGFsIHRyYW5zZm9ybWF0aW9uIHN0cmF0ZWdpZXMuPC9saT4KICAgICAgICAgIDxsaT5FeHBlcmllbmNlIGRldmVsb3BpbmcgZGVzaWducyBhbmQgc3VwcG9ydCB0aG9zZSBsYWNraW5nIGRpZ2l0YWwgc2tpbGxzIGFuZCB0aG9zZSB3aXRoIHZhcmllZCBhY2Nlc3NpYmlsaXR5IG5lZWRzLjwvbGk+CiAgICAgICAgICA8bGk+SGF2ZSBleHBlcmllbmNlIG9mIHRha2luZyBzeXN0ZW1zIGRlY2lzaW9ucyBpbiBhIGRpZ2l0YWwgdHJhbnNmb3JtYXRpb24uPC9saT4KICAgICAgICA8L3VsPgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBOaWNlLXRvLWhhdmUgc2tpbGxzIGFuZCBleHBlcmllbmNlCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1saXN0IGdvdnVrLWxpc3QtLWJ1bGxldCI+CiAgICAgICAgICA8bGk+RGVtb25zdHJhdGUgYXQgbGVhc3QgMiB5ZWFyc+KAmSBleHBlcmllbmNlIG9mIGtub3dsZWRnZSBhbmQgdXNlIG9mIEdvdmVybm1lbnQgRGVzaWduIFN0YW5kYXJkcyBhbmQgcHJpbmNpcGxlcyBvciBzaW1pbGFyLjwvbGk+CiAgICAgICAgICA8bGk+RGVtb25zdHJhdGUgYXQgbGVhc3QgMiB5ZWFyc+KAmSByZWNlbnQgZXhwZXJpZW5jZSBvZiB3b3JraW5nIHdpdGggYSBMb2NhbCBBdXRob3JpdHkgb24gYSBoaWdoLXByb2ZpbGUgSVQgLyBkaWdpdGFsIHRyYW5zZm9ybWF0aW9uYWwgcHJvamVjdC48L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDxoMiBpZD0ib3Bwb3J0dW5pdHktYXR0cmlidXRlcy02IiBjbGFzcz0iZ292dWstaGVhZGluZy1tIGFwcC1zdW1tYXJ5LWxpc3QtaGVhZGluZyI+SG93IHN1cHBsaWVycyB3aWxsIGJlIGV2YWx1YXRlZDwvaDI+CiAgCiAgPHAgY2xhc3M9ImdvdnVrLWJvZHkgZ292dWstIS1tYXJnaW4tdG9wLTMiPkFsbCBzdXBwbGllcnMgd2lsbCBiZSBhc2tlZCB0byBwcm92aWRlIGEgd3JpdHRlbiBwcm9wb3NhbC48L3A+CiAgCiAgCgoKICAKCiAgCgogIAoKICAKCiAgCgogIAo8ZGwgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0IGFwcC1nb3Z1ay1zdW1tYXJ5LWxpc3QtLXRvcC1ib3JkZXIgZ292dWstIS1tYXJnaW4tYm90dG9tLTgiPgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICBIb3cgbWFueSBzdXBwbGllcnMgdG8gZXZhbHVhdGUKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICA0CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFByb3Bvc2FsIGNyaXRlcmlhCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1saXN0IGdvdnVrLWxpc3QtLWJ1bGxldCI+CiAgICAgICAgICA8bGk+RXhwZXJpZW5jZTwvbGk+CiAgICAgICAgICA8bGk+QXBwcm9hY2ggYW5kIG1ldGhvZG9sb2d5PC9saT4KICAgICAgICAgIDxsaT5EZWxpdmVyeSBQbGFuPC9saT4KICAgICAgICAgIDxsaT5EZXRhaWwgdGhlIHByb3Bvc2VkIHRlYW1zIGV4cGVyaWVuY2UgYW5kIHNraWxscyBhbmQgYXMgdG8gaG93IHRoaXMgd2lsbCByZWxhdGUgdG8gYW5kIGFkZCB2YWx1ZSB0byBwcm9qZWN0IChhbGlnbiB0aGlzIHdpdGggeW91ciBXb3JrIEhpc3RvcnkgdG8gZXZpZGVuY2UpPC9saT4KICAgICAgICAgIDxsaT5UZWFtIHN0cnVjdHVyZSBhbmQgcXVhbGlmaWNhdGlvbnM8L2xpPgogICAgICAgICAgPGxpPlZhbHVlIGZvciBtb25leTwvbGk+CiAgICAgICAgPC91bD4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgQ3VsdHVyYWwgZml0IGNyaXRlcmlhCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1saXN0IGdvdnVrLWxpc3QtLWJ1bGxldCI+CiAgICAgICAgICA8bGk+QmUgYWJsZSB0byB3b3JrIGFzIGEgdGVhbSB3aXRoIG91ciBvcmdhbmlzYXRpb24gYW5kIG90aGVyIHN1cHBsaWVyczwvbGk+CiAgICAgICAgICA8bGk+QmUgdHJhbnNwYXJlbnQgYW5kIGNvbGxhYm9yYXRpdmUgd2hlbiBtYWtpbmcgZGVjaXNpb25zPC9saT4KICAgICAgICAgIDxsaT5UYWtlIHJlc3BvbnNpYmlsaXR5IGZvciB0aGVpciB3b3JrIGFuZCBiZSBwcm9hY3RpdmUgaW4gZW5nYWdpbmcgd2l0aCBjb3VuY2lsIHN0YWZmPC9saT4KICAgICAgICAgIDxsaT5TaGFyZSBrbm93bGVkZ2UgYW5kIGV4cGVyaWVuY2Ugd2l0aCBDb3VuY2lsIHN0YWZmPC9saT4KICAgICAgICAgIDxsaT5DaGFsbGVuZ2UgdGhlIHN0YXR1cyBxdW88L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIFBheW1lbnQgYXBwcm9hY2gKICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBDYXBwZWQgdGltZSBhbmQgbWF0ZXJpYWxzCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEFkZGl0aW9uYWwgYXNzZXNzbWVudCBtZXRob2RzCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgUHJlc2VudGF0aW9uCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIEV2YWx1YXRpb24gd2VpZ2h0aW5nCiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgPHAgY2xhc3M9ImdvdnVrLWJvZHkgZ292dWstIS1tYXJnaW4tdG9wLTAgZ292dWstIS1tYXJnaW4tYm90dG9tLTEiPlRlY2huaWNhbCBjb21wZXRlbmNlPC9wPgogICAgICAgIDxkaXY+NjUlPC9kaXY+CiAgICAgICAgPHAgY2xhc3M9ImdvdnVrLWJvZHkgZ292dWstIS1tYXJnaW4tdG9wLTMgZ292dWstIS1tYXJnaW4tYm90dG9tLTEiPkN1bHR1cmFsIGZpdDwvcD4KICAgICAgICA8ZGl2PjUlPC9kaXY+CiAgICAgICAgPHAgY2xhc3M9ImdvdnVrLWJvZHkgZ292dWstIS1tYXJnaW4tdG9wLTMgZ292dWstIS1tYXJnaW4tYm90dG9tLTEiPlByaWNlPC9wPgogICAgICAgIDxkaXY+MzAlPC9kaXY+CiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCjwvZGw+CgogIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iZ292dWstZ3JpZC1yb3ciPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLWZ1bGwiPgogICAgCgoKCjxoMiBpZD0iY2xhcmlmaWNhdGlvbi1xdWVzdGlvbnMiIGNsYXNzPSJnb3Z1ay1oZWFkaW5nLW0gYXBwLXN1bW1hcnktbGlzdC1oZWFkaW5nIj5RdWVzdGlvbnMgYXNrZWQgYnkgc3VwcGxpZXJzPC9oMj4KCgoKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCgogIAoKICAKCiAgCgogIAoKICAKPGRsIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3QgYXBwLWdvdnVrLXN1bW1hcnktbGlzdCBhcHAtZ292dWstc3VtbWFyeS1saXN0LS10b3AtYm9yZGVyIGdvdnVrLSEtbWFyZ2luLWJvdHRvbS04Ij4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgMS4gV2l0aCB0aGUgY3VycmVudCBDT1ZJRC0xOSBzaXR1YXRpb24gd2lsbCBvbi1zaXRlIHdvcmtpbmcgYmUgcmVxdWlyZWQgaW5pdGlhbGx5IG9yIHdpbGwgcmVtb3RlIHdvcmsgYmUgc3VpdGFibGUgdG8gYmVnaW4gd2l0aD8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBJdCBpcyBub3QgZXhwZWN0ZWQgdGhhdCBvbi1zaXRlIHdvcmtpbmcgd2lsbCBiZSByZXF1aXJlZCwgaG93ZXZlciwgaWYgcmVxdWVzdGVkIGl0IGlzIGV4cGVjdGVkIHRoZSBzdXBwbGllciB3aWxsIGF0dGVuZCBvY2Nhc2lvbmFsIG1lZXRpbmdzLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICAyLiBXaGF0IGtub3dsZWRnZSBpcyB0aGUgc3VjY2Vzc2Z1bCBzdXBwbGllciBleHBlY3RlZCB0byBoYXZlIHJlIGxvY2FsIGF1dGhvcml0eSBJVCBhbmQgZGlnaXRhbCBtYXJrZXQ/IElzIHRoZXJlIGFueXRoaW5nIHRoYXQgdGhlIHN1cHBsaWVyIG5lZWRzIHRvIGtub3cgdGhhdCBXZXN0bWluc3RlciBDaXR5IENvdW5jaWwgaXMgbm90IGFibGUgdG8gcHJvdmlkZSBhcyBpbmZvcm1hdGlvbgogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoaXMgcGllY2Ugb2Ygd29yayBpcyBhY3Jvc3MgdHdvIEJvcm91Z2hzLCBpbmNsdWRpbmcgS2Vuc2luZ3RvbiBhbmQgQ2hlbHNlYSBhbmQgV2VzdG1pbnN0ZXIgQ2l0eSBDb3VuY2lsLiBUaGUgc3VwcGxpZXIgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhbiBpbi1kZXB0aCB1bmRlcnN0YW5kaW5nIG9mIGxvY2FsIGF1dGhvcml0eSBlbnRlcnByaXNlLCBhcHBsaWNhdGlvbiBhbmQgZGF0YSBhcmNoaXRlY3R1cmUuIFRoZSBzdXBwbGllciBpcyBhbHNvIGV4cGVjdGVkIHRvIGhhdmUgYSBnb29kIGFwcHJlY2lhdGlvbiBvZiB0aGUgbWFpbiB2ZW5kb3JzIGluIHRoZSBtYXJrZXQgYW5kIHRoZWlyIG9mZmVyaW5ncywgYXMgd2VsbCBhcyBJVCBhbmQgTG9jYWwgR292ZXJubWVudCBzdGFuZGFyZHMgKGUuZy4gR0RTLCBMTFBHLCBUT0dBRiwgVUsgR292ZXJubWVudCBJVCBDb2RlIG9mIFByYWN0aWNlIGV0YykuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDMuIERvIHRoZSBjb3VuY2lscyBleHBlY3QgdGhlIHN1Y2Nlc3NmdWwgc3VwcGxpZXIgdG8gdXNlIGFueSBzcGVjaWZpYyBzdGFuZGFyZHMgb3IgbWV0aG9kb2xvZ2llcyBhbmQgaWYgc28sIHdoaWNoPwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoZSBvdXRjb21lIG9mIHRoaXMgd29yayBpcyBhbiBBcy1JcyByZXZpZXcuIFdlIGhhdmUgbm90IHNwZWNpZmljYWxseSBzdGlwdWxhdGVkIHRoZSBtZXRob2RvbG9neSwgYW5kIHRoaXMgaXMgcGFydCBvZiB0aGUgZXZhbHVhdGlvbiwgaG93ZXZlciwgdGhlIHN1cHBsaWVyIHdpbGwgYmUgZXhwZWN0ZWQgdG8gYnJvYWRseSBjb21wbHkgd2l0aCBUT0dBRi4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgNC4gVGhlIEVzc2VudGlhbCBTa2lsbHMgYW5kIEV4cGVyaWVuY2UgU2VjdGlvbiBzdGF0ZXM6ICYjMzk7QWRvcHQgdXNlci1jZW50cmVkIGFuZCBhZ2lsZSBhcHByb2FjaGVzLCBjb25zaXN0ZW50IHdpdGggdGhlIEdvdmVybm1lbnQgRGlnaXRhbCBTZXJ2aWNlIFN0YW5kYXJkcyYjMzk7LiBXaWxsIHRoaXMgcHJvamVjdCBiZSBtYXBwaW5nIGV4aXN0aW5nIGFuZCBmdXR1cmUgY3VzdG9tZXIgam91cm5leXM/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgTm8sIHRoZSBwcm9qZWN0IGlzIGV4cGVjdGVkIHRvIGFjY3VyYXRlbHkgbWFwIHRoZSBleGlzdGluZyBJVCBsYW5kc2NhcGUgKEFzLUlzIHN0YXRlKS4gPGJyPjxicj5UaGUgQ3VzdG9tZXIgRXhwZXJpZW5jZSBhbmQgRGlnaXRhbCB0ZWFtIGF0IFdlc3RtaW5zdGVyIGFuZCB0aGUgRGlnaXRhbCB0ZWFtIGF0IFJCS0Mgd2lsbCBiZSBhdmFpbGFibGUgdG8gc3VwcG9ydCBpbiBwcm92aWRpbmcgdXNlciBwcm9maWxlcyBhbmQgY3VzdG9tZXIgam91cm5leXMgdGhhdCBjYW4gYmUgdXNlZCB0byBlbnN1cmUgY3VzdG9tZXIgYW5kIHVzZXIgbmVlZHMgYXJlIGNvbnNpZGVyZWQuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDUuIERvIHRoZSBjb3VuY2lscyBoYXZlIGFueSBpbmN1bWJlbnQgSVQgcHJvdmlkZXJzIHRoYXQgc3VwcG9ydCBhbnkgb2YgdGhlIG1haW4gYXBwbGljYXRpb25zIG9yIGluZnJhc3RydWN0dXJlIHJlbGF0ZWQgdG8gdGhpcyBwcm9qZWN0PwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoZXJlIGlzIG5vIHNpbmdsZSB0ZWNobm9sb2d5IHN1cHBsaWVyLiBUaGUgY291bmNpbHMgYXJlIHByZWRvbWluYXRlbHkgTWljcm9zb2Z0IHRlY2hub2xvZ3kgc3RhY2tzLiBUaGVyZSBhcmUgYSByYW5nZSBvZiBhcHBsaWNhdGlvbiBwcm92aWRlcnMgYW5kIGdlbmVyYWxseSB0aGUgbWFpbnRlbmFuY2UgYW5kIHN1cHBvcnQgaGFzIGJlZW4gcHJvY3VyZWQgaW5kaXZpZHVhbGx5IHdpdGggdGhlIGFwcGxpY2F0aW9uLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICA2LiBEbyB0aGUgY291bmNpbHMgaGF2ZSBvciBwbGFuIHRvIGhhdmUgYSBzaGFyZWQgb3BlcmF0aW5nIG1vZGVsIGZvciBjdXN0b21lciBhY2Nlc3M/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgV2hpbHN0IHRoZSBjb3VuY2lscyBoYXZlIHZlcnkgZGlmZmVyZW50IGN1c3RvbWVyIGJhc2VzLCB3ZSBhcmUsIHdoZXJlIGl0IG1ha2VzIHNlbnNlIHRyeWluZyB0byBhbGlnbiB0byBiZW5lZml0IGZyb20gam9pbnQgd29ya2luZyBhbmQgY29sbGFib3JhdGlvbi4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgNy4gRG8gdGhlIGNvdW5jaWxzIGhhdmUgc2hhcmVkIGRpZ2l0YWwgcHJpbmNpcGxlcyBhbmQgb3IgYSBzaGFyZWQgY3VzdG9tZXIgYWNjZXNzIHN0cmF0ZWd5PwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoaXMgaW5mb3JtYXRpb24gd2lsbCBiZSBnaXZlbiBmb2xsb3dpbmcgdGVuZGVyIGF3YXJkLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICA4LiBBcmUgdGhlcmUgYW55IHBsYW5uZWQgcmVwbGFjZW1lbnRzIGZvciB0aGUgbWFpbiBhcHBsaWNhdGlvbnMgcmVsYXRlZCB0byB0aGlzIHByb2plY3Q/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgVGhlIG91dGNvbWUgb2YgdGhpcyB3b3JrIHdpbGwgaGVscCB0byBpbmZvcm0gZGVjaXNpb25zIG9uIGFwcGxpY2F0aW9uIHJlcGxhY2VtZW50LgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICA5LiBEbyB0aGUgMiBjb3VuY2lscyBoYXZlIGFueSBzaGFyZWQgc2VydmljZXMgcmVsYXRpbmcgdG8gdGhpcyBwcm9qZWN0IGFuZCBpZiBzbywgd2hhdCBhcmUgdGhleT8gRm9yIGV4YW1wbGUsIGlzIHRoZXJlIGEgc2hhcmVkIGNvbnRhY3QgY2VudHJlLCBhbnkgc2hhcmVkIElUIHNlcnZpY2VzLCBhbmQgc2hhcmVkIGFwcGxpY2F0aW9ucz8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBZZXMsIHRoaXMgaW5mb3JtYXRpb24gd2lsbCBiZSBnaXZlbiBmb2xsb3dpbmcgdGVuZGVyIGF3YXJkLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICAxMC4gUHJpY2luZyBtYWtlcyB1cCAzNSUgb2YgdGhlIG1hcmssIGJ1dCB0aGVyZSBpcyBubyBxdWVzdGlvbiB0byBwcm92aWRlIGEgcmVzcG9uc2Ugd2l0aCBvdXIgcHJpY2luZy4gUGxlYXNlIGNhbiB5b3UgY2xhcmlmeSBob3cgcHJpY2luZyB3aWxsIGJlIHN1Ym1pdHRlZCBhbmQgYXNzZXNzZWQ/CiAgICAgIDwvZHQ+CiAgICAgIDxkZCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X192YWx1ZSI+CiAgICAgICAgUHJpY2luZyBldmFsdWF0ZWQgYXQgcHJvcG9zYWwgbGV2ZWwuCiAgICAgIDwvZGQ+CiAgICAgIAogICAgPC9kaXY+CiAgCiAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3JvdyI+CiAgICAgIDxkdCBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19rZXkiPgogICAgICAgIDExLiBQbGVhc2UgY2FuIHlvdSBjb25maXJtIGlmIHRoZSBzY29wZSBpcyBsaW1pdGVkIHRvIGFuIGFzLWlzIHJldmlldyBhdCB0aGlzIHN0YWdlLCBhbmQgZG9lcyBub3QgaW52b2x2ZSB0aGUgY3JlYXRpb24gb2YgYSBmdXR1cmUgc3RhdGUgKFRvLUJlKSBzdHJhdGVneSBhbmQgYXJjaGl0ZWN0dXJlID8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUaGUgc2NvcGUgaXMgbGltaXRlZCB0byBhbiBhcy1pcyByZXZpZXcKICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgMTIuIFBsZWFzZSBjYW4geW91IGNvbmZpcm0gd2hldGhlciB0aGUgSVQgcHJvdmlzaW9uIGZvciBib3RoIGNvdW5jaWxzIGlzIGRlbGl2ZXJlZCBmcm9tIGFuIGludGVybmFsIElUIHRlYW0gb3IgZGVsaXZlcmVkIGJ5IDNyZCBwYXJ0eS9vdXRzb3VyY2luZyBhZ3JlZW1lbnRzIGluIHBhcnQsIG9yIGFzIGEgd2hvbGUgb2YgdGhlIHNlcnZpY2UgcHJvdmlzaW9uID8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBJVCBwcm92aXNpb24gaXMgZGVsaXZlcmVkIHRocm91Z2ggYSBtaXh0dXJlIG9mIGludGVybmFsIGFuZCAzcmQgcGFydHkvb3V0c291cmNpbmcgYWdyZWVtZW50cy4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgMTMuIFdoYXQgYXJlIHRoZSBuZXcgY3VzdG9tZXIgb3BlcmF0aW5nIG1vZGVscz8KICAgICAgPC9kdD4KICAgICAgPGRkIGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX3ZhbHVlIj4KICAgICAgICBUaGlzIEluZm9ybWF0aW9uIHdpbGwgYmUgZ2l2ZW4gZm9sbG93aW5nIHRlbmRlciBhd2FyZC4KICAgICAgPC9kZD4KICAgICAgCiAgICA8L2Rpdj4KICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fcm93Ij4KICAgICAgPGR0IGNsYXNzPSJnb3Z1ay1zdW1tYXJ5LWxpc3RfX2tleSI+CiAgICAgICAgMTQuIEFyZSB0aGVyZSBhbnkgc3lzdGVtcyB0aGF0IHRoZSB0d28gY291bmNpbHMgYWxyZWFkeSBzaGFyZSBvciBzaGFyZSBsaWNlbnNpbmcgYXJyYW5nZW1lbnRzPwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIFRoaXMgSW5mb3JtYXRpb24gd2lsbCBiZSBnaXZlbiBmb2xsb3dpbmcgdGVuZGVyIGF3YXJkLgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAogICAgPGRpdiBjbGFzcz0iZ292dWstc3VtbWFyeS1saXN0X19yb3ciPgogICAgICA8ZHQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fa2V5Ij4KICAgICAgICAxNS4gSXMgdGhlcmUgYW4gaW5jdW1iZW50IHN1cHBsaWVyPwogICAgICA8L2R0PgogICAgICA8ZGQgY2xhc3M9ImdvdnVrLXN1bW1hcnktbGlzdF9fdmFsdWUiPgogICAgICAgIE5vLCB0aGlzIGlzIGEgbmV3IHJlcXVpcmVtZW50LgogICAgICA8L2RkPgogICAgICAKICAgIDwvZGl2PgogIAo8L2RsPgoKCgogIFRoZSBkZWFkbGluZSBmb3IgYXNraW5nIHF1ZXN0aW9ucyBhYm91dCB0aGlzIG9wcG9ydHVuaXR5IHdhcyBXZWRuZXNkYXkgMTAgSnVuZSAyMDIwLgoKICA8L2Rpdj4KPC9kaXY+CgoKICA8YnIvPjwhLS0gPC0gcmVtb3ZlIG9uY2UgZ3JpZCBhbmQgYm9keSBlbGVtZW50cyBoYXZlIGJlZW4gY29udmVydGVkIHRvIGdvdnVrIGZyb250ZW5kIC0tPgogIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtcm93Ij4KICAgIDxkaXYgY2xhc3M9ImdvdnVrLWdyaWQtY29sdW1uLXR3by10aGlyZHMiPgogICAgICA8Zm9ybSBhY3Rpb249Ii9zdXBwbGllcnMvb3Bwb3J0dW5pdGllcy8xMjQzNi9yZXNwb25zZXMvc3RhcnQiIG1ldGhvZD0iZ2V0Ij4KICAgICAgICAKICAKICAgIAogIAoKPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJnb3Z1ay1idXR0b24iPgogIEFwcGx5IGZvciB0aGlzIG9wcG9ydHVuaXR5CjwvYnV0dG9uPgogICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCgoKCiAgICAgICAgPC9tYWluPgogICAgICA8L2Rpdj4KICAgIAoKICAgIAogIDxmb290ZXIgY2xhc3M9ImdvdnVrLWZvb3RlciAiIHJvbGU9ImNvbnRlbnRpbmZvIj4KICA8ZGl2IGNsYXNzPSJnb3Z1ay13aWR0aC1jb250YWluZXIgIj4KICAgIAogICAgICA8ZGl2IGNsYXNzPSJnb3Z1ay1mb290ZXJfX25hdmlnYXRpb24iPgogICAgICAgIAogICAgICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19zZWN0aW9uIj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2hlYWRpbmcgZ292dWstaGVhZGluZy1tIj5BYm91dCBEaWdpdGFsIE1hcmtldHBsYWNlPC9oMj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QgIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9oZWxwIj4KICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdAogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2RpZ2l0YWwtbWFya2V0cGxhY2UtYnV5ZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgU2VydmljZXMgeW91IGNhbiBidXkKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW1hcmtldHBsYWNlLXN1cHBsaWVycy1ndWlkZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNlcnZpY2VzIHlvdSBjYW4gc2VsbAogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvb3JnYW5pc2F0aW9ucy9jcm93bi1jb21tZXJjaWFsLXNlcnZpY2UiPgogICAgICAgICAgICAgICAgICAgICAgICBBYm91dCBDcm93biBDb21tZXJjaWFsIFNlcnZpY2VzCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQWJvdXQgR292ZXJubWVudCBEaWdpdGFsIFNlcnZpY2VzCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvZy1jbG91ZC9zdXBwbGllcnMiPgogICAgICAgICAgICAgICAgICAgICAgICBHLUNsb3VkIHN1cHBsaWVyIEEgdG8gWgogICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fc2VjdGlvbiI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iZ292dWstZm9vdGVyX19oZWFkaW5nIGdvdnVrLWhlYWRpbmctbSI+R3VpZGFuY2UgZm9yIHVzaW5nIERpZ2l0YWwgTWFya2V0cGxhY2U8L2gyPgogICAgICAgICAgICAKICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdCAiPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ292dWstZm9vdGVyX19saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuZ292LnVrL2d1aWRhbmNlL2ctY2xvdWQtc3VwcGxpZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQXBwbHlpbmcgdG8gc2VsbCBvbiB0aGUgRy1DbG91ZCBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGlzdC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3Lmdvdi51ay9ndWlkYW5jZS9kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zdXBwbGllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBBcHBseWluZyB0byBzZWxsIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvaG93LXRvLXNlbGwteW91ci1kaWdpdGFsLW91dGNvbWVzLWFuZC1zcGVjaWFsaXN0cy1zZXJ2aWNlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIFJlc3BvbmRpbmcgdG8gYnV5ZXIgcmVxdWlyZW1lbnRzIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZy1jbG91ZC1idXllcnMtZ3VpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICBCdXlpbmcgb24gdGhlIEctQ2xvdWQgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvZGlnaXRhbC1vdXRjb21lcy1hbmQtc3BlY2lhbGlzdHMtYnV5ZXJzLWd1aWRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgQnV5aW5nIG9uIHRoZSBET1MgZnJhbWV3b3JrCiAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ3VpZGFuY2UvdGhlLWNyb3duLWhvc3RpbmctZGF0YS1jZW50cmVzLWZyYW1ld29yay1vbi10aGUtZGlnaXRhbC1tYXJrZXRwbGFjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEJ1eWluZyBvbiB0aGUgQ3Jvd24gSG9zdGluZyBmcmFtZXdvcmsKICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIAogICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgIDwvZGl2PgogICAgICA8aHIgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fc2VjdGlvbi1icmVhayI+CiAgICAKICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YSI+CiAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YS1pdGVtIGdvdnVrLWZvb3Rlcl9fbWV0YS1pdGVtLS1ncm93Ij4KICAgICAgICAKICAgICAgICAgIDxoMiBjbGFzcz0iZ292dWstdmlzdWFsbHktaGlkZGVuIj5TdXBwb3J0IGxpbmtzPC9oMj4KICAgICAgICAgIAogICAgICAgICAgICA8dWwgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QiPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2lubGluZS1saXN0LWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIiBocmVmPSIvdGVybXMtYW5kLWNvbmRpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgIFRlcm1zIGFuZCBjb25kaXRpb25zCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9jb29raWVzIj4KICAgICAgICAgICAgICAgICAgICBDb29raWVzCiAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdvdnVrLWZvb3Rlcl9faW5saW5lLWxpc3QtaXRlbSI+CiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiIGhyZWY9Ii9wcml2YWN5LW5vdGljZSI+CiAgICAgICAgICAgICAgICAgICAgUHJpdmFjeSBub3RpY2UKICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAKICAgICAgICAgICAgPC91bD4KICAgICAgICAgIAogICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbWV0YS1jdXN0b20iPgogICAgICAgICAgICAgIEJ1aWx0IGJ5IHRoZSA8YSBocmVmPSJodHRwczovL3d3dy5nb3YudWsvZ292ZXJubWVudC9vcmdhbmlzYXRpb25zL2dvdmVybm1lbnQtZGlnaXRhbC1zZXJ2aWNlIiBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIj5Hb3Zlcm5tZW50IERpZ2l0YWwgU2VydmljZTwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICAgICAgICAKICAgICAgICA8c3ZnCiAgICAgICAgICByb2xlPSJwcmVzZW50YXRpb24iCiAgICAgICAgICBmb2N1c2FibGU9ImZhbHNlIgogICAgICAgICAgY2xhc3M9ImdvdnVrLWZvb3Rlcl9fbGljZW5jZS1sb2dvIgogICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgogICAgICAgICAgdmlld2JveD0iMCAwIDQ4My4yIDE5NS43IgogICAgICAgICAgaGVpZ2h0PSIxNyIKICAgICAgICAgIHdpZHRoPSI0MSIKICAgICAgICA+CiAgICAgICAgICA8cGF0aAogICAgICAgICAgICBmaWxsPSJjdXJyZW50Q29sb3IiCiAgICAgICAgICAgIGQ9Ik00MjEuNSAxNDIuOFYuMWwtNTAuNyAzMi4zdjE2MS4xaDExMi40di01MC43em0tMTIyLjMtOS42QTQ3LjEyIDQ3LjEyIDAgMCAxIDIyMSA5Ny44YzAtMjYgMjEuMS00Ny4xIDQ3LjEtNDcuMSAxNi43IDAgMzEuNCA4LjcgMzkuNyAyMS44bDQyLjctMjcuMkE5Ny42MyA5Ny42MyAwIDAgMCAyNjguMSAwYy0zNi41IDAtNjguMyAyMC4xLTg1LjEgNDkuN0E5OCA5OCAwIDAgMCA5Ny44IDBDNDMuOSAwIDAgNDMuOSAwIDk3LjhzNDMuOSA5Ny44IDk3LjggOTcuOGMzNi41IDAgNjguMy0yMC4xIDg1LjEtNDkuN2E5Ny43NiA5Ny43NiAwIDAgMCAxNDkuNiAyNS40bDE5LjQgMjIuMmgzdi04Ny44aC04MGwyNC4zIDI3LjV6TTk3LjggMTQ1Yy0yNiAwLTQ3LjEtMjEuMS00Ny4xLTQ3LjFzMjEuMS00Ny4xIDQ3LjEtNDcuMSA0Ny4yIDIxIDQ3LjIgNDdTMTIzLjggMTQ1IDk3LjggMTQ1IgogICAgICAgICAgLz4KICAgICAgICA8L3N2Zz4KICAgICAgICA8c3BhbiBjbGFzcz0iZ292dWstZm9vdGVyX19saWNlbmNlLWRlc2NyaXB0aW9uIj4KICAgICAgICAgIEFsbCBjb250ZW50IGlzIGF2YWlsYWJsZSB1bmRlciB0aGUKICAgICAgICAgIDxhCiAgICAgICAgICAgIGNsYXNzPSJnb3Z1ay1mb290ZXJfX2xpbmsiCiAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vd3d3Lm5hdGlvbmFsYXJjaGl2ZXMuZ292LnVrL2RvYy9vcGVuLWdvdmVybm1lbnQtbGljZW5jZS92ZXJzaW9uLzMvIgogICAgICAgICAgICByZWw9ImxpY2Vuc2UiCiAgICAgICAgICA+T3BlbiBHb3Zlcm5tZW50IExpY2VuY2UgdjMuMDwvYT4sIGV4Y2VwdCB3aGVyZSBvdGhlcndpc2Ugc3RhdGVkCiAgICAgICAgPC9zcGFuPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZ292dWstZm9vdGVyX19tZXRhLWl0ZW0iPgogICAgICAgIDxhCiAgICAgICAgICBjbGFzcz0iZ292dWstZm9vdGVyX19saW5rIGdvdnVrLWZvb3Rlcl9fY29weXJpZ2h0LWxvZ28iCiAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5uYXRpb25hbGFyY2hpdmVzLmdvdi51ay9pbmZvcm1hdGlvbi1tYW5hZ2VtZW50L3JlLXVzaW5nLXB1YmxpYy1zZWN0b3ItaW5mb3JtYXRpb24vdWstZ292ZXJubWVudC1saWNlbnNpbmctZnJhbWV3b3JrL2Nyb3duLWNvcHlyaWdodC8iCiAgICAgICAgPsKpIENyb3duIGNvcHlyaWdodDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9mb290ZXI+CgoKICAgIAogIDxzY3JpcHQgc3JjPSIvc3RhdGljL2phdmFzY3JpcHRzL2FwcGxpY2F0aW9uLmpzPzA2NGMzYmY3ZDU5ZWM5NzIxNTkxOGU1NTNiMzBlMjQ5Ij48L3NjcmlwdD4KICAKCiAgPC9ib2R5Pgo8L2h0bWw+
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:17:19 GMT
recorded_with: VCR 4.0.0
