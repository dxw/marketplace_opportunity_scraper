---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11371
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENELvg.7IyDXss2_Q_pEXRTatwSiwFFJ5M
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '41734'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 11:20:29 GMT
      Dm-Request-Id:
      - 7a149a380ee1cd4d
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 11:20:29 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENEQ_Q.629stfOMpetTyx8VgIuW9Sqylt0;
        Expires=Tue, 10-Dec-2019 12:20:29 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 7a149a380ee1cd4d
      X-B3-Traceid:
      - 7a149a380ee1cd4d
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 5628236d-c105-4c62-52ed-375fe7004e1f
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 7b0f68e9739bedcf2b240d30dd13a85b.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - 26_FcbB7hfmiPngDu6mIn1ye7jT27XDRb3LxK6EJekbFdSqYurcn8Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 11:20:29 GMT
recorded_with: VCR 4.0.0
