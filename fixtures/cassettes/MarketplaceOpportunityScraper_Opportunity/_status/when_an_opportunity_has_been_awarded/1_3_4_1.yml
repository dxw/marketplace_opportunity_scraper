---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/9115
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun8AQ.m-4xfB09lM0bt41xIRtnBuwwVYg
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '39844'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:18:25 GMT
      Dm-Request-Id:
      - 4dbed96b64da7251
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:18:25 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun8AQ.m-4xfB09lM0bt41xIRtnBuwwVYg;
        Expires=Wed, 17-Jun-2020 12:18:25 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 4dbed96b64da7251
      X-B3-Traceid:
      - 4dbed96b64da7251
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 900e2f46-31a7-4ed2-52f4-94ac7ff24cba
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 18e6ec21b2a0145722b1ee6278aea970.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR61-C1
      X-Amz-Cf-Id:
      - SXxVvPqv19T0o2rQBx1zGiGA0x-1eIZ6GZQPt3ZJnyKkJTbv2KDs4A==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:18:25 GMT
recorded_with: VCR 4.0.0
