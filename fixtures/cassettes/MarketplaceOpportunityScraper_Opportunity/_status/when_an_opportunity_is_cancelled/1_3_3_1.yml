---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11036
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.6.0p0 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENEQ_Q.629stfOMpetTyx8VgIuW9Sqylt0
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '53386'
      Connection:
      - keep-alive
      Date:
      - Tue, 10 Dec 2019 11:20:30 GMT
      Dm-Request-Id:
      - 8c1be73c86d58502
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Wed, 09-Dec-2020 11:20:30 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.ENEQ_g.Ioi0hOnU3IP6UxXGKbZP6E2ueEQ;
        Expires=Tue, 10-Dec-2019 12:20:30 GMT; Secure; HttpOnly; Path=/
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - 8c1be73c86d58502
      X-B3-Traceid:
      - 8c1be73c86d58502
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 67e89d26-fbb0-48ad-7f65-6fe0726ec0a7
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 09332a16e52d74a9c0e1dbb5affe9e16.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR52-C1
      X-Amz-Cf-Id:
      - XKPAk9z6-s0OUX-_abpL8SDmJHdYWwzNLxow0ovd-Ci74MzSSJJDWA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 10 Dec 2019 11:20:30 GMT
recorded_with: VCR 4.0.0
