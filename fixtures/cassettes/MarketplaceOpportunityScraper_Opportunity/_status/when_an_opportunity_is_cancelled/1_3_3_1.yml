---
http_interactions:
- request:
    method: get
    uri: https://www.digitalmarketplace.service.gov.uk/digital-outcomes-and-specialists/opportunities/11036
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.7.1p83 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - dm_cookie_probe=yum; dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun8AQ.m-4xfB09lM0bt41xIRtnBuwwVYg
      Host:
      - www.digitalmarketplace.service.gov.uk
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '52053'
      Connection:
      - keep-alive
      Date:
      - Wed, 17 Jun 2020 11:18:25 GMT
      Dm-Request-Id:
      - f4bf649c6994d775
      Server:
      - nginx
      Set-Cookie:
      - dm_cookie_probe=yum; Expires=Thu, 17-Jun-2021 11:18:25 GMT; Max-Age=31536000.0;
        Path=/
      - dm_session=eyJfZnJlc2giOmZhbHNlLCJfcGVybWFuZW50Ijp0cnVlfQ.Xun8AQ.m-4xfB09lM0bt41xIRtnBuwwVYg;
        Expires=Wed, 17-Jun-2020 12:18:25 GMT; Secure; HttpOnly; Path=/; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains
      Vary:
      - Cookie
      X-B3-Spanid:
      - f4bf649c6994d775
      X-B3-Traceid:
      - f4bf649c6994d775
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Vcap-Request-Id:
      - 265450dd-f322-42b2-6267-16e5c442f0bd
      X-Xss-Protection:
      - 1; mode=block
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 174c08439d0479ee62deefc2d025760e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - LHR61-C1
      X-Amz-Cf-Id:
      - "-tG1KhTF9K5alh5IlV2DBXTcYqc_jsRICC8H4PJBwpJnJYVfTVviPA=="
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 17 Jun 2020 11:18:25 GMT
recorded_with: VCR 4.0.0
